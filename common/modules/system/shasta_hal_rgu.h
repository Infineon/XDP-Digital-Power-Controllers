/**
 * @file     shasta_hal_rgu.h
 *
 * @brief    Definitions for the SHASTA Hardware Access Layer (HAL).
 *
 * @version  v0.0
 * @date     date
 *
 * @note
 */

/* ============================================================================
** Copyright (C) 2019 Infineon. All rights reserved.
**               Infineon Technologies, PMM SYS / DES
** ============================================================================
**
** ============================================================================
** This document contains proprietary information. Passing on and
** copying of this document, and communication of its contents is not
** permitted without prior written authorisation.
** ============================================================================
*
*/
/* This file is automatically generated. Do not edit! */
/*lint -save -e960 */


#ifndef _SHASTA_HAL_RGU_H_
#define _SHASTA_HAL_RGU_H_

#include    <stdint.h>

#include    <stddef.h>
#include    "fw_config.h"
#include    "hal_api.h"

/** @addtogroup Infineon
 * @{
 */

/** @addtogroup SHASTA
 * @{
 */


/** @addtogroup rgu
 * @{
 */

#if defined ( __CC_ARM )
#define __RGU_INLINE  static __inline __attribute__((always_inline))
#elif defined ( __GNUC__ )
#define __RGU_INLINE  static inline __attribute__((always_inline))
#elif defined ( _MSC_VER )
#define __RGU_INLINE  static __forceinline
#else
#warning Unsupported Compiler
#define __RGU_INLINE  static inline
#endif

/** register file of the rgu block.
 */
typedef struct _RGU_s
{
    volatile        uint32_t        RSTSR                       ; /*!< (@0x00000000) Reset Status Register */
    volatile        uint32_t        SWRST_CTRL                  ; /*!< (@0x00000004) Software Reset Control Register */
    volatile        uint32_t        RSTMODS                     ; /*!< (@0x00000008) Reset Modules Register */
    volatile        uint32_t        SW_PWDN_REQ                 ; /*!< (@0x0000000C) Software Power Down Request Register */
    volatile        uint32_t        SW_PWDN_CTRL                ; /*!< (@0x00000010) Software Power Down Control Register */
    volatile        uint32_t        HW_PWDN_CTRL                ; /*!< (@0x00000014) Hardware Power Down Control Register */
    volatile        uint32_t        SPARE_FF                    ; /*!< (@0x00000018) Spare Register */
    volatile        uint8_t         REGMEMGAP0[4]               ; /*!< (@0x0000001C) gap in address space */
    volatile        uint32_t        RSTMODS_SET                 ; /*!< (@0x00000020) Reset Modules Register */
    volatile        uint32_t        RSTMODS_CLR                 ; /*!< (@0x00000024) Reset Modules Register */
} RGU_t;


#define RGU_BASE (0x40001000u)                                                          /*!< rgu base address */

/** __RGU_BASE_PTR returns the base address of the peripheral.
 *
 * @return base address of peripheral's instance
 */
__RGU_INLINE uint32_t* __RGU_BASE_PTR(void)
{
    return (uint32_t*)(RGU_BASE);
}


/* -------------------------------------------------------------------------- */
/*                           RSTSR member of RGU_t                           */
/* -------------------------------------------------------------------------- */

/** __RGU_RSTSR__ADDRESS returns the address of member RSTSR.
 *
 * As indicated by the __ prefix, this is not intended for use by the FW. It is
 * here for readability only.
 *
 * @return address of RSTSR
 */
__RGU_INLINE uint32_t* __RGU_RSTSR__ADDRESS(void)
{
    return (uint32_t*)((uint32_t)__RGU_BASE_PTR() + (uint32_t)(offsetof(RGU_t, RSTSR)));
}

/** RGU_RSTSR__GET() gets RSTSR's current value.
 *
 * When reading from RSTSR, this is mandatory to use.
 *
 * @return current value of RSTSR
 */
__RGU_INLINE uint32_t RGU_RSTSR__GET(void)
{
    return HAL_GET32(__RGU_RSTSR__ADDRESS());
}

/* ---------------------------- RGU.RSTSR.WDTRST ---------------------------- */

/**
<pre>
  RGU.RSTSR.WDTRST:

    1: The last reset was an Watchdog Reset.

</pre> */

#define RGU_RSTSR__WDTRST__Pos                                  31                                                                     /*!< Right-most bit position of WDTRST in RGU.RSTSR */
#define RGU_RSTSR__WDTRST__Msk                                  (0x00000001UL << RGU_RSTSR__WDTRST__Pos)                               /*!< Mask for WDTRST in RGU.RSTSR */
#define RGU_RSTSR__WDTRST__Shift(v)                             (((v) << RGU_RSTSR__WDTRST__Pos) & RGU_RSTSR__WDTRST__Msk)             /*!< Shift value 'v' into WDTRST and mask 'v' to fit it into WDTRST field */

/** RGU_RSTSR__WDTRST__GET() gets RSTSR.WDTRST's current value.
 *
 * When reading from RSTSR.WDTRST, this is recommended to use.
 *
 * @return current value of RSTSR.WDTRST
 */
__RGU_INLINE uint32_t RGU_RSTSR__WDTRST__GET(void)
{
    uint32_t reg = RGU_RSTSR__GET();
    reg = (reg & RGU_RSTSR__WDTRST__Msk);
    reg = (reg >> RGU_RSTSR__WDTRST__Pos);
    return (uint32_t)reg;
}

/** RGU_RSTSR__WDTRST__EXTRACT() extracts RSTSR.WDTRST.
 *
 * This is recommended to use when extracting more than one bitfield from RGU.RSTSR.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of RGU.RSTSR
 * @return current value of RSTSR.WDTRST
 */
__RGU_INLINE uint32_t RGU_RSTSR__WDTRST__EXTRACT(uint32_t reg)
{
    reg = (reg & RGU_RSTSR__WDTRST__Msk);
    reg = (reg >> RGU_RSTSR__WDTRST__Pos);
    return (uint32_t)reg;
}

/* ---------------------------- RGU.RSTSR.SWRST ---------------------------- */

/**
<pre>
  RGU.RSTSR.SWRST:

    1: The last reset was an SoftReset.

</pre> */

#define RGU_RSTSR__SWRST__Pos                                   23                                                                     /*!< Right-most bit position of SWRST in RGU.RSTSR */
#define RGU_RSTSR__SWRST__Msk                                   (0x00000001UL << RGU_RSTSR__SWRST__Pos)                                /*!< Mask for SWRST in RGU.RSTSR */
#define RGU_RSTSR__SWRST__Shift(v)                              (((v) << RGU_RSTSR__SWRST__Pos) & RGU_RSTSR__SWRST__Msk)               /*!< Shift value 'v' into SWRST and mask 'v' to fit it into SWRST field */

/** RGU_RSTSR__SWRST__GET() gets RSTSR.SWRST's current value.
 *
 * When reading from RSTSR.SWRST, this is recommended to use.
 *
 * @return current value of RSTSR.SWRST
 */
__RGU_INLINE uint32_t RGU_RSTSR__SWRST__GET(void)
{
    uint32_t reg = RGU_RSTSR__GET();
    reg = (reg & RGU_RSTSR__SWRST__Msk);
    reg = (reg >> RGU_RSTSR__SWRST__Pos);
    return (uint32_t)reg;
}

/** RGU_RSTSR__SWRST__EXTRACT() extracts RSTSR.SWRST.
 *
 * This is recommended to use when extracting more than one bitfield from RGU.RSTSR.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of RGU.RSTSR
 * @return current value of RSTSR.SWRST
 */
__RGU_INLINE uint32_t RGU_RSTSR__SWRST__EXTRACT(uint32_t reg)
{
    reg = (reg & RGU_RSTSR__SWRST__Msk);
    reg = (reg >> RGU_RSTSR__SWRST__Pos);
    return (uint32_t)reg;
}

/* ---------------------------- RGU.RSTSR.SYSRST ---------------------------- */

/**
<pre>
  RGU.RSTSR.SYSRST:

    1: The last reset has been generated by SYSRESETQ signal

</pre> */

#define RGU_RSTSR__SYSRST__Pos                                  15                                                                     /*!< Right-most bit position of SYSRST in RGU.RSTSR */
#define RGU_RSTSR__SYSRST__Msk                                  (0x00000001UL << RGU_RSTSR__SYSRST__Pos)                               /*!< Mask for SYSRST in RGU.RSTSR */
#define RGU_RSTSR__SYSRST__Shift(v)                             (((v) << RGU_RSTSR__SYSRST__Pos) & RGU_RSTSR__SYSRST__Msk)             /*!< Shift value 'v' into SYSRST and mask 'v' to fit it into SYSRST field */

/** RGU_RSTSR__SYSRST__GET() gets RSTSR.SYSRST's current value.
 *
 * When reading from RSTSR.SYSRST, this is recommended to use.
 *
 * @return current value of RSTSR.SYSRST
 */
__RGU_INLINE uint32_t RGU_RSTSR__SYSRST__GET(void)
{
    uint32_t reg = RGU_RSTSR__GET();
    reg = (reg & RGU_RSTSR__SYSRST__Msk);
    reg = (reg >> RGU_RSTSR__SYSRST__Pos);
    return (uint32_t)reg;
}

/** RGU_RSTSR__SYSRST__EXTRACT() extracts RSTSR.SYSRST.
 *
 * This is recommended to use when extracting more than one bitfield from RGU.RSTSR.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of RGU.RSTSR
 * @return current value of RSTSR.SYSRST
 */
__RGU_INLINE uint32_t RGU_RSTSR__SYSRST__EXTRACT(uint32_t reg)
{
    reg = (reg & RGU_RSTSR__SYSRST__Msk);
    reg = (reg >> RGU_RSTSR__SYSRST__Pos);
    return (uint32_t)reg;
}

/* -------------------------- RGU.RSTSR.HWPWDNRST -------------------------- */

/**
<pre>
  RGU.RSTSR.HWPWDNRST:

    1: The last reset has been generated by HW_PWDN signal

</pre> */

#define RGU_RSTSR__HWPWDNRST__Pos                               7                                                                      /*!< Right-most bit position of HWPWDNRST in RGU.RSTSR */
#define RGU_RSTSR__HWPWDNRST__Msk                               (0x00000001UL << RGU_RSTSR__HWPWDNRST__Pos)                            /*!< Mask for HWPWDNRST in RGU.RSTSR */
#define RGU_RSTSR__HWPWDNRST__Shift(v)                          (((v) << RGU_RSTSR__HWPWDNRST__Pos) & RGU_RSTSR__HWPWDNRST__Msk)       /*!< Shift value 'v' into HWPWDNRST and mask 'v' to fit it into HWPWDNRST field */

/** RGU_RSTSR__HWPWDNRST__GET() gets RSTSR.HWPWDNRST's current value.
 *
 * When reading from RSTSR.HWPWDNRST, this is recommended to use.
 *
 * @return current value of RSTSR.HWPWDNRST
 */
__RGU_INLINE uint32_t RGU_RSTSR__HWPWDNRST__GET(void)
{
    uint32_t reg = RGU_RSTSR__GET();
    reg = (reg & RGU_RSTSR__HWPWDNRST__Msk);
    reg = (reg >> RGU_RSTSR__HWPWDNRST__Pos);
    return (uint32_t)reg;
}

/** RGU_RSTSR__HWPWDNRST__EXTRACT() extracts RSTSR.HWPWDNRST.
 *
 * This is recommended to use when extracting more than one bitfield from RGU.RSTSR.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of RGU.RSTSR
 * @return current value of RSTSR.HWPWDNRST
 */
__RGU_INLINE uint32_t RGU_RSTSR__HWPWDNRST__EXTRACT(uint32_t reg)
{
    reg = (reg & RGU_RSTSR__HWPWDNRST__Msk);
    reg = (reg >> RGU_RSTSR__HWPWDNRST__Pos);
    return (uint32_t)reg;
}

/* -------------------------- RGU.RSTSR.SWPWDNRST -------------------------- */

/**
<pre>
  RGU.RSTSR.SWPWDNRST:

    1: The last reset has been generated by SW_PWDN signal

</pre> */

#define RGU_RSTSR__SWPWDNRST__Pos                               0                                                                      /*!< Right-most bit position of SWPWDNRST in RGU.RSTSR */
#define RGU_RSTSR__SWPWDNRST__Msk                               (0x00000001UL << RGU_RSTSR__SWPWDNRST__Pos)                            /*!< Mask for SWPWDNRST in RGU.RSTSR */
#define RGU_RSTSR__SWPWDNRST__Shift(v)                          (((v) << RGU_RSTSR__SWPWDNRST__Pos) & RGU_RSTSR__SWPWDNRST__Msk)       /*!< Shift value 'v' into SWPWDNRST and mask 'v' to fit it into SWPWDNRST field */

/** RGU_RSTSR__SWPWDNRST__GET() gets RSTSR.SWPWDNRST's current value.
 *
 * When reading from RSTSR.SWPWDNRST, this is recommended to use.
 *
 * @return current value of RSTSR.SWPWDNRST
 */
__RGU_INLINE uint32_t RGU_RSTSR__SWPWDNRST__GET(void)
{
    uint32_t reg = RGU_RSTSR__GET();
    reg = (reg & RGU_RSTSR__SWPWDNRST__Msk);
    reg = (reg >> RGU_RSTSR__SWPWDNRST__Pos);
    return (uint32_t)reg;
}

/** RGU_RSTSR__SWPWDNRST__EXTRACT() extracts RSTSR.SWPWDNRST.
 *
 * This is recommended to use when extracting more than one bitfield from RGU.RSTSR.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of RGU.RSTSR
 * @return current value of RSTSR.SWPWDNRST
 */
__RGU_INLINE uint32_t RGU_RSTSR__SWPWDNRST__EXTRACT(uint32_t reg)
{
    reg = (reg & RGU_RSTSR__SWPWDNRST__Msk);
    reg = (reg >> RGU_RSTSR__SWPWDNRST__Pos);
    return (uint32_t)reg;
}

/* -------------------------------------------------------------------------- */
/*                         SWRST_CTRL member of RGU_t                         */
/* -------------------------------------------------------------------------- */

/** __RGU_SWRST_CTRL__ADDRESS returns the address of member SWRST_CTRL.
 *
 * As indicated by the __ prefix, this is not intended for use by the FW. It is
 * here for readability only.
 *
 * @return address of SWRST_CTRL
 */
__RGU_INLINE uint32_t* __RGU_SWRST_CTRL__ADDRESS(void)
{
    return (uint32_t*)((uint32_t)__RGU_BASE_PTR() + (uint32_t)(offsetof(RGU_t, SWRST_CTRL)));
}

/** RGU_SWRST_CTRL__SET() sets SWRST_CTRL to given value.
 *
 * When writing to SWRST_CTRL, this is mandatory to use.
 *
 * @param value new value for SWRST_CTRL
 */
__RGU_INLINE void RGU_SWRST_CTRL__SET(uint32_t value)
{
    HAL_SET32(__RGU_SWRST_CTRL__ADDRESS(), value);
}

/** RGU_SWRST_CTRL__GET() gets SWRST_CTRL's current value.
 *
 * When reading from SWRST_CTRL, this is mandatory to use.
 *
 * @return current value of SWRST_CTRL
 */
__RGU_INLINE uint32_t RGU_SWRST_CTRL__GET(void)
{
    return HAL_GET32(__RGU_SWRST_CTRL__ADDRESS());
}

/* ------------------------ RGU.SWRST_CTRL.EN_SWRST ------------------------ */

/**
<pre>
  RGU.SWRST_CTRL.EN_SWRST:

    1: CPUS can be reset by SWRST bit.

</pre> */

#define RGU_SWRST_CTRL__EN_SWRST__Pos                           0                                                                      /*!< Right-most bit position of EN_SWRST in RGU.SWRST_CTRL */
#define RGU_SWRST_CTRL__EN_SWRST__Msk                           (0x00000001UL << RGU_SWRST_CTRL__EN_SWRST__Pos)                        /*!< Mask for EN_SWRST in RGU.SWRST_CTRL */
#define RGU_SWRST_CTRL__EN_SWRST__Shift(v)                      (((v) << RGU_SWRST_CTRL__EN_SWRST__Pos) & RGU_SWRST_CTRL__EN_SWRST__Msk) /*!< Shift value 'v' into EN_SWRST and mask 'v' to fit it into EN_SWRST field */

/** RGU_SWRST_CTRL__EN_SWRST__SET() sets SWRST_CTRL.EN_SWRST to given value.
 *
 * When writing to SWRST_CTRL.EN_SWRST, this is recommended to use.
 *
 * @param bf_value new value for SWRST_CTRL.EN_SWRST
 */
__RGU_INLINE void RGU_SWRST_CTRL__EN_SWRST__SET(uint32_t bf_value)
{
    uint32_t reg = RGU_SWRST_CTRL__GET();
    reg = (reg & ~RGU_SWRST_CTRL__EN_SWRST__Msk);
    reg = (reg | (RGU_SWRST_CTRL__EN_SWRST__Shift((uint32_t)bf_value)));
    RGU_SWRST_CTRL__SET(reg);
}

/** RGU_SWRST_CTRL__EN_SWRST__GET() gets SWRST_CTRL.EN_SWRST's current value.
 *
 * When reading from SWRST_CTRL.EN_SWRST, this is recommended to use.
 *
 * @return current value of SWRST_CTRL.EN_SWRST
 */
__RGU_INLINE uint32_t RGU_SWRST_CTRL__EN_SWRST__GET(void)
{
    uint32_t reg = RGU_SWRST_CTRL__GET();
    reg = (reg & RGU_SWRST_CTRL__EN_SWRST__Msk);
    reg = (reg >> RGU_SWRST_CTRL__EN_SWRST__Pos);
    return (uint32_t)reg;
}

/** RGU_SWRST_CTRL__EN_SWRST__MODIFY() modifies SWRST_CTRL.EN_SWRST.
 *
 * This is recommended to use when setting more than one bitfield of RGU.SWRST_CTRL.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of RGU.SWRST_CTRL
 * @param bf_value new value for SWRST_CTRL.EN_SWRST
 * @return new value of RGU.SWRST_CTRL
 */
__RGU_INLINE uint32_t RGU_SWRST_CTRL__EN_SWRST__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~RGU_SWRST_CTRL__EN_SWRST__Msk);
    reg = (reg | (RGU_SWRST_CTRL__EN_SWRST__Shift((uint32_t)bf_value)));
    return reg;
}

/** RGU_SWRST_CTRL__EN_SWRST__EXTRACT() extracts SWRST_CTRL.EN_SWRST.
 *
 * This is recommended to use when extracting more than one bitfield from RGU.SWRST_CTRL.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of RGU.SWRST_CTRL
 * @return current value of SWRST_CTRL.EN_SWRST
 */
__RGU_INLINE uint32_t RGU_SWRST_CTRL__EN_SWRST__EXTRACT(uint32_t reg)
{
    reg = (reg & RGU_SWRST_CTRL__EN_SWRST__Msk);
    reg = (reg >> RGU_SWRST_CTRL__EN_SWRST__Pos);
    return (uint32_t)reg;
}

/* -------------------------------------------------------------------------- */
/*                          RSTMODS member of RGU_t                          */
/* -------------------------------------------------------------------------- */

/** __RGU_RSTMODS__ADDRESS returns the address of member RSTMODS.
 *
 * As indicated by the __ prefix, this is not intended for use by the FW. It is
 * here for readability only.
 *
 * @return address of RSTMODS
 */
__RGU_INLINE uint32_t* __RGU_RSTMODS__ADDRESS(void)
{
    return (uint32_t*)((uint32_t)__RGU_BASE_PTR() + (uint32_t)(offsetof(RGU_t, RSTMODS)));
}

/** RGU_RSTMODS__SET() sets RSTMODS to given value.
 *
 * When writing to RSTMODS, this is mandatory to use.
 *
 * @param value new value for RSTMODS
 */
__RGU_INLINE void RGU_RSTMODS__SET(uint32_t value)
{
    HAL_SET32(__RGU_RSTMODS__ADDRESS(), value);
}

/** RGU_RSTMODS__GET() gets RSTMODS's current value.
 *
 * When reading from RSTMODS, this is mandatory to use.
 *
 * @return current value of RSTMODS
 */
__RGU_INLINE uint32_t RGU_RSTMODS__GET(void)
{
    return HAL_GET32(__RGU_RSTMODS__ADDRESS());
}

/* -------------------------- RGU.RSTMODS.GPIO1RST -------------------------- */

/**
<pre>
  RGU.RSTMODS.GPIO1RST:

    1: Performs a reset of the GPIO1 block.

</pre> */

#define RGU_RSTMODS__GPIO1RST__Pos                              16                                                                     /*!< Right-most bit position of GPIO1RST in RGU.RSTMODS */
#define RGU_RSTMODS__GPIO1RST__Msk                              (0x00000001UL << RGU_RSTMODS__GPIO1RST__Pos)                           /*!< Mask for GPIO1RST in RGU.RSTMODS */
#define RGU_RSTMODS__GPIO1RST__Shift(v)                         (((v) << RGU_RSTMODS__GPIO1RST__Pos) & RGU_RSTMODS__GPIO1RST__Msk)     /*!< Shift value 'v' into GPIO1RST and mask 'v' to fit it into GPIO1RST field */

/** RGU_RSTMODS__GPIO1RST__SET() sets RSTMODS.GPIO1RST to given value.
 *
 * When writing to RSTMODS.GPIO1RST, this is recommended to use.
 *
 * @param bf_value new value for RSTMODS.GPIO1RST
 */
__RGU_INLINE void RGU_RSTMODS__GPIO1RST__SET(uint32_t bf_value)
{
    uint32_t reg = RGU_RSTMODS__GET();
    reg = (reg & ~RGU_RSTMODS__GPIO1RST__Msk);
    reg = (reg | (RGU_RSTMODS__GPIO1RST__Shift((uint32_t)bf_value)));
    RGU_RSTMODS__SET(reg);
}

/** RGU_RSTMODS__GPIO1RST__GET() gets RSTMODS.GPIO1RST's current value.
 *
 * When reading from RSTMODS.GPIO1RST, this is recommended to use.
 *
 * @return current value of RSTMODS.GPIO1RST
 */
__RGU_INLINE uint32_t RGU_RSTMODS__GPIO1RST__GET(void)
{
    uint32_t reg = RGU_RSTMODS__GET();
    reg = (reg & RGU_RSTMODS__GPIO1RST__Msk);
    reg = (reg >> RGU_RSTMODS__GPIO1RST__Pos);
    return (uint32_t)reg;
}

/** RGU_RSTMODS__GPIO1RST__MODIFY() modifies RSTMODS.GPIO1RST.
 *
 * This is recommended to use when setting more than one bitfield of RGU.RSTMODS.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of RGU.RSTMODS
 * @param bf_value new value for RSTMODS.GPIO1RST
 * @return new value of RGU.RSTMODS
 */
__RGU_INLINE uint32_t RGU_RSTMODS__GPIO1RST__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~RGU_RSTMODS__GPIO1RST__Msk);
    reg = (reg | (RGU_RSTMODS__GPIO1RST__Shift((uint32_t)bf_value)));
    return reg;
}

/** RGU_RSTMODS__GPIO1RST__EXTRACT() extracts RSTMODS.GPIO1RST.
 *
 * This is recommended to use when extracting more than one bitfield from RGU.RSTMODS.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of RGU.RSTMODS
 * @return current value of RSTMODS.GPIO1RST
 */
__RGU_INLINE uint32_t RGU_RSTMODS__GPIO1RST__EXTRACT(uint32_t reg)
{
    reg = (reg & RGU_RSTMODS__GPIO1RST__Msk);
    reg = (reg >> RGU_RSTMODS__GPIO1RST__Pos);
    return (uint32_t)reg;
}

/* -------------------------- RGU.RSTMODS.GPIO0RST -------------------------- */

/**
<pre>
  RGU.RSTMODS.GPIO0RST:

    1: Performs a reset of the GPIO0 block.

</pre> */

#define RGU_RSTMODS__GPIO0RST__Pos                              15                                                                     /*!< Right-most bit position of GPIO0RST in RGU.RSTMODS */
#define RGU_RSTMODS__GPIO0RST__Msk                              (0x00000001UL << RGU_RSTMODS__GPIO0RST__Pos)                           /*!< Mask for GPIO0RST in RGU.RSTMODS */
#define RGU_RSTMODS__GPIO0RST__Shift(v)                         (((v) << RGU_RSTMODS__GPIO0RST__Pos) & RGU_RSTMODS__GPIO0RST__Msk)     /*!< Shift value 'v' into GPIO0RST and mask 'v' to fit it into GPIO0RST field */

/** RGU_RSTMODS__GPIO0RST__SET() sets RSTMODS.GPIO0RST to given value.
 *
 * When writing to RSTMODS.GPIO0RST, this is recommended to use.
 *
 * @param bf_value new value for RSTMODS.GPIO0RST
 */
__RGU_INLINE void RGU_RSTMODS__GPIO0RST__SET(uint32_t bf_value)
{
    uint32_t reg = RGU_RSTMODS__GET();
    reg = (reg & ~RGU_RSTMODS__GPIO0RST__Msk);
    reg = (reg | (RGU_RSTMODS__GPIO0RST__Shift((uint32_t)bf_value)));
    RGU_RSTMODS__SET(reg);
}

/** RGU_RSTMODS__GPIO0RST__GET() gets RSTMODS.GPIO0RST's current value.
 *
 * When reading from RSTMODS.GPIO0RST, this is recommended to use.
 *
 * @return current value of RSTMODS.GPIO0RST
 */
__RGU_INLINE uint32_t RGU_RSTMODS__GPIO0RST__GET(void)
{
    uint32_t reg = RGU_RSTMODS__GET();
    reg = (reg & RGU_RSTMODS__GPIO0RST__Msk);
    reg = (reg >> RGU_RSTMODS__GPIO0RST__Pos);
    return (uint32_t)reg;
}

/** RGU_RSTMODS__GPIO0RST__MODIFY() modifies RSTMODS.GPIO0RST.
 *
 * This is recommended to use when setting more than one bitfield of RGU.RSTMODS.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of RGU.RSTMODS
 * @param bf_value new value for RSTMODS.GPIO0RST
 * @return new value of RGU.RSTMODS
 */
__RGU_INLINE uint32_t RGU_RSTMODS__GPIO0RST__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~RGU_RSTMODS__GPIO0RST__Msk);
    reg = (reg | (RGU_RSTMODS__GPIO0RST__Shift((uint32_t)bf_value)));
    return reg;
}

/** RGU_RSTMODS__GPIO0RST__EXTRACT() extracts RSTMODS.GPIO0RST.
 *
 * This is recommended to use when extracting more than one bitfield from RGU.RSTMODS.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of RGU.RSTMODS
 * @return current value of RSTMODS.GPIO0RST
 */
__RGU_INLINE uint32_t RGU_RSTMODS__GPIO0RST__EXTRACT(uint32_t reg)
{
    reg = (reg & RGU_RSTMODS__GPIO0RST__Msk);
    reg = (reg >> RGU_RSTMODS__GPIO0RST__Pos);
    return (uint32_t)reg;
}

/* -------------------------- RGU.RSTMODS.WDTIFRST -------------------------- */

/**
<pre>
  RGU.RSTMODS.WDTIFRST:

    1: Performs a reset of the WDT IF block.

</pre> */

#define RGU_RSTMODS__WDTIFRST__Pos                              14                                                                     /*!< Right-most bit position of WDTIFRST in RGU.RSTMODS */
#define RGU_RSTMODS__WDTIFRST__Msk                              (0x00000001UL << RGU_RSTMODS__WDTIFRST__Pos)                           /*!< Mask for WDTIFRST in RGU.RSTMODS */
#define RGU_RSTMODS__WDTIFRST__Shift(v)                         (((v) << RGU_RSTMODS__WDTIFRST__Pos) & RGU_RSTMODS__WDTIFRST__Msk)     /*!< Shift value 'v' into WDTIFRST and mask 'v' to fit it into WDTIFRST field */

/** RGU_RSTMODS__WDTIFRST__SET() sets RSTMODS.WDTIFRST to given value.
 *
 * When writing to RSTMODS.WDTIFRST, this is recommended to use.
 *
 * @param bf_value new value for RSTMODS.WDTIFRST
 */
__RGU_INLINE void RGU_RSTMODS__WDTIFRST__SET(uint32_t bf_value)
{
    uint32_t reg = RGU_RSTMODS__GET();
    reg = (reg & ~RGU_RSTMODS__WDTIFRST__Msk);
    reg = (reg | (RGU_RSTMODS__WDTIFRST__Shift((uint32_t)bf_value)));
    RGU_RSTMODS__SET(reg);
}

/** RGU_RSTMODS__WDTIFRST__GET() gets RSTMODS.WDTIFRST's current value.
 *
 * When reading from RSTMODS.WDTIFRST, this is recommended to use.
 *
 * @return current value of RSTMODS.WDTIFRST
 */
__RGU_INLINE uint32_t RGU_RSTMODS__WDTIFRST__GET(void)
{
    uint32_t reg = RGU_RSTMODS__GET();
    reg = (reg & RGU_RSTMODS__WDTIFRST__Msk);
    reg = (reg >> RGU_RSTMODS__WDTIFRST__Pos);
    return (uint32_t)reg;
}

/** RGU_RSTMODS__WDTIFRST__MODIFY() modifies RSTMODS.WDTIFRST.
 *
 * This is recommended to use when setting more than one bitfield of RGU.RSTMODS.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of RGU.RSTMODS
 * @param bf_value new value for RSTMODS.WDTIFRST
 * @return new value of RGU.RSTMODS
 */
__RGU_INLINE uint32_t RGU_RSTMODS__WDTIFRST__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~RGU_RSTMODS__WDTIFRST__Msk);
    reg = (reg | (RGU_RSTMODS__WDTIFRST__Shift((uint32_t)bf_value)));
    return reg;
}

/** RGU_RSTMODS__WDTIFRST__EXTRACT() extracts RSTMODS.WDTIFRST.
 *
 * This is recommended to use when extracting more than one bitfield from RGU.RSTMODS.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of RGU.RSTMODS
 * @return current value of RSTMODS.WDTIFRST
 */
__RGU_INLINE uint32_t RGU_RSTMODS__WDTIFRST__EXTRACT(uint32_t reg)
{
    reg = (reg & RGU_RSTMODS__WDTIFRST__Msk);
    reg = (reg >> RGU_RSTMODS__WDTIFRST__Pos);
    return (uint32_t)reg;
}

/* ------------------------- RGU.RSTMODS.DTIMER3RST ------------------------- */

/**
<pre>
  RGU.RSTMODS.DTIMER3RST:

    1: Performs a reset of the DTIMER2 block.

</pre> */

#define RGU_RSTMODS__DTIMER3RST__Pos                            13                                                                     /*!< Right-most bit position of DTIMER3RST in RGU.RSTMODS */
#define RGU_RSTMODS__DTIMER3RST__Msk                            (0x00000001UL << RGU_RSTMODS__DTIMER3RST__Pos)                         /*!< Mask for DTIMER3RST in RGU.RSTMODS */
#define RGU_RSTMODS__DTIMER3RST__Shift(v)                       (((v) << RGU_RSTMODS__DTIMER3RST__Pos) & RGU_RSTMODS__DTIMER3RST__Msk) /*!< Shift value 'v' into DTIMER3RST and mask 'v' to fit it into DTIMER3RST field */

/** RGU_RSTMODS__DTIMER3RST__SET() sets RSTMODS.DTIMER3RST to given value.
 *
 * When writing to RSTMODS.DTIMER3RST, this is recommended to use.
 *
 * @param bf_value new value for RSTMODS.DTIMER3RST
 */
__RGU_INLINE void RGU_RSTMODS__DTIMER3RST__SET(uint32_t bf_value)
{
    uint32_t reg = RGU_RSTMODS__GET();
    reg = (reg & ~RGU_RSTMODS__DTIMER3RST__Msk);
    reg = (reg | (RGU_RSTMODS__DTIMER3RST__Shift((uint32_t)bf_value)));
    RGU_RSTMODS__SET(reg);
}

/** RGU_RSTMODS__DTIMER3RST__GET() gets RSTMODS.DTIMER3RST's current value.
 *
 * When reading from RSTMODS.DTIMER3RST, this is recommended to use.
 *
 * @return current value of RSTMODS.DTIMER3RST
 */
__RGU_INLINE uint32_t RGU_RSTMODS__DTIMER3RST__GET(void)
{
    uint32_t reg = RGU_RSTMODS__GET();
    reg = (reg & RGU_RSTMODS__DTIMER3RST__Msk);
    reg = (reg >> RGU_RSTMODS__DTIMER3RST__Pos);
    return (uint32_t)reg;
}

/** RGU_RSTMODS__DTIMER3RST__MODIFY() modifies RSTMODS.DTIMER3RST.
 *
 * This is recommended to use when setting more than one bitfield of RGU.RSTMODS.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of RGU.RSTMODS
 * @param bf_value new value for RSTMODS.DTIMER3RST
 * @return new value of RGU.RSTMODS
 */
__RGU_INLINE uint32_t RGU_RSTMODS__DTIMER3RST__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~RGU_RSTMODS__DTIMER3RST__Msk);
    reg = (reg | (RGU_RSTMODS__DTIMER3RST__Shift((uint32_t)bf_value)));
    return reg;
}

/** RGU_RSTMODS__DTIMER3RST__EXTRACT() extracts RSTMODS.DTIMER3RST.
 *
 * This is recommended to use when extracting more than one bitfield from RGU.RSTMODS.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of RGU.RSTMODS
 * @return current value of RSTMODS.DTIMER3RST
 */
__RGU_INLINE uint32_t RGU_RSTMODS__DTIMER3RST__EXTRACT(uint32_t reg)
{
    reg = (reg & RGU_RSTMODS__DTIMER3RST__Msk);
    reg = (reg >> RGU_RSTMODS__DTIMER3RST__Pos);
    return (uint32_t)reg;
}

/* ------------------------- RGU.RSTMODS.DTIMER2RST ------------------------- */

/**
<pre>
  RGU.RSTMODS.DTIMER2RST:

    1: Performs a reset of the DTIMER2 block.

</pre> */

#define RGU_RSTMODS__DTIMER2RST__Pos                            12                                                                     /*!< Right-most bit position of DTIMER2RST in RGU.RSTMODS */
#define RGU_RSTMODS__DTIMER2RST__Msk                            (0x00000001UL << RGU_RSTMODS__DTIMER2RST__Pos)                         /*!< Mask for DTIMER2RST in RGU.RSTMODS */
#define RGU_RSTMODS__DTIMER2RST__Shift(v)                       (((v) << RGU_RSTMODS__DTIMER2RST__Pos) & RGU_RSTMODS__DTIMER2RST__Msk) /*!< Shift value 'v' into DTIMER2RST and mask 'v' to fit it into DTIMER2RST field */

/** RGU_RSTMODS__DTIMER2RST__SET() sets RSTMODS.DTIMER2RST to given value.
 *
 * When writing to RSTMODS.DTIMER2RST, this is recommended to use.
 *
 * @param bf_value new value for RSTMODS.DTIMER2RST
 */
__RGU_INLINE void RGU_RSTMODS__DTIMER2RST__SET(uint32_t bf_value)
{
    uint32_t reg = RGU_RSTMODS__GET();
    reg = (reg & ~RGU_RSTMODS__DTIMER2RST__Msk);
    reg = (reg | (RGU_RSTMODS__DTIMER2RST__Shift((uint32_t)bf_value)));
    RGU_RSTMODS__SET(reg);
}

/** RGU_RSTMODS__DTIMER2RST__GET() gets RSTMODS.DTIMER2RST's current value.
 *
 * When reading from RSTMODS.DTIMER2RST, this is recommended to use.
 *
 * @return current value of RSTMODS.DTIMER2RST
 */
__RGU_INLINE uint32_t RGU_RSTMODS__DTIMER2RST__GET(void)
{
    uint32_t reg = RGU_RSTMODS__GET();
    reg = (reg & RGU_RSTMODS__DTIMER2RST__Msk);
    reg = (reg >> RGU_RSTMODS__DTIMER2RST__Pos);
    return (uint32_t)reg;
}

/** RGU_RSTMODS__DTIMER2RST__MODIFY() modifies RSTMODS.DTIMER2RST.
 *
 * This is recommended to use when setting more than one bitfield of RGU.RSTMODS.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of RGU.RSTMODS
 * @param bf_value new value for RSTMODS.DTIMER2RST
 * @return new value of RGU.RSTMODS
 */
__RGU_INLINE uint32_t RGU_RSTMODS__DTIMER2RST__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~RGU_RSTMODS__DTIMER2RST__Msk);
    reg = (reg | (RGU_RSTMODS__DTIMER2RST__Shift((uint32_t)bf_value)));
    return reg;
}

/** RGU_RSTMODS__DTIMER2RST__EXTRACT() extracts RSTMODS.DTIMER2RST.
 *
 * This is recommended to use when extracting more than one bitfield from RGU.RSTMODS.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of RGU.RSTMODS
 * @return current value of RSTMODS.DTIMER2RST
 */
__RGU_INLINE uint32_t RGU_RSTMODS__DTIMER2RST__EXTRACT(uint32_t reg)
{
    reg = (reg & RGU_RSTMODS__DTIMER2RST__Msk);
    reg = (reg >> RGU_RSTMODS__DTIMER2RST__Pos);
    return (uint32_t)reg;
}

/* ------------------------- RGU.RSTMODS.DTIMER1RST ------------------------- */

/**
<pre>
  RGU.RSTMODS.DTIMER1RST:

    1: Performs a reset of the DTIMER block.

</pre> */

#define RGU_RSTMODS__DTIMER1RST__Pos                            11                                                                     /*!< Right-most bit position of DTIMER1RST in RGU.RSTMODS */
#define RGU_RSTMODS__DTIMER1RST__Msk                            (0x00000001UL << RGU_RSTMODS__DTIMER1RST__Pos)                         /*!< Mask for DTIMER1RST in RGU.RSTMODS */
#define RGU_RSTMODS__DTIMER1RST__Shift(v)                       (((v) << RGU_RSTMODS__DTIMER1RST__Pos) & RGU_RSTMODS__DTIMER1RST__Msk) /*!< Shift value 'v' into DTIMER1RST and mask 'v' to fit it into DTIMER1RST field */

/** RGU_RSTMODS__DTIMER1RST__SET() sets RSTMODS.DTIMER1RST to given value.
 *
 * When writing to RSTMODS.DTIMER1RST, this is recommended to use.
 *
 * @param bf_value new value for RSTMODS.DTIMER1RST
 */
__RGU_INLINE void RGU_RSTMODS__DTIMER1RST__SET(uint32_t bf_value)
{
    uint32_t reg = RGU_RSTMODS__GET();
    reg = (reg & ~RGU_RSTMODS__DTIMER1RST__Msk);
    reg = (reg | (RGU_RSTMODS__DTIMER1RST__Shift((uint32_t)bf_value)));
    RGU_RSTMODS__SET(reg);
}

/** RGU_RSTMODS__DTIMER1RST__GET() gets RSTMODS.DTIMER1RST's current value.
 *
 * When reading from RSTMODS.DTIMER1RST, this is recommended to use.
 *
 * @return current value of RSTMODS.DTIMER1RST
 */
__RGU_INLINE uint32_t RGU_RSTMODS__DTIMER1RST__GET(void)
{
    uint32_t reg = RGU_RSTMODS__GET();
    reg = (reg & RGU_RSTMODS__DTIMER1RST__Msk);
    reg = (reg >> RGU_RSTMODS__DTIMER1RST__Pos);
    return (uint32_t)reg;
}

/** RGU_RSTMODS__DTIMER1RST__MODIFY() modifies RSTMODS.DTIMER1RST.
 *
 * This is recommended to use when setting more than one bitfield of RGU.RSTMODS.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of RGU.RSTMODS
 * @param bf_value new value for RSTMODS.DTIMER1RST
 * @return new value of RGU.RSTMODS
 */
__RGU_INLINE uint32_t RGU_RSTMODS__DTIMER1RST__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~RGU_RSTMODS__DTIMER1RST__Msk);
    reg = (reg | (RGU_RSTMODS__DTIMER1RST__Shift((uint32_t)bf_value)));
    return reg;
}

/** RGU_RSTMODS__DTIMER1RST__EXTRACT() extracts RSTMODS.DTIMER1RST.
 *
 * This is recommended to use when extracting more than one bitfield from RGU.RSTMODS.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of RGU.RSTMODS
 * @return current value of RSTMODS.DTIMER1RST
 */
__RGU_INLINE uint32_t RGU_RSTMODS__DTIMER1RST__EXTRACT(uint32_t reg)
{
    reg = (reg & RGU_RSTMODS__DTIMER1RST__Msk);
    reg = (reg >> RGU_RSTMODS__DTIMER1RST__Pos);
    return (uint32_t)reg;
}

/* ----------------------- RGU.RSTMODS.BIFPERUARTRST ----------------------- */

/**
<pre>
  RGU.RSTMODS.BIFPERUARTRST:

    1: Performs a reset of the BIF UART IF.

</pre> */

#define RGU_RSTMODS__BIFPERUARTRST__Pos                         9                                                                      /*!< Right-most bit position of BIFPERUARTRST in RGU.RSTMODS */
#define RGU_RSTMODS__BIFPERUARTRST__Msk                         (0x00000001UL << RGU_RSTMODS__BIFPERUARTRST__Pos)                      /*!< Mask for BIFPERUARTRST in RGU.RSTMODS */
#define RGU_RSTMODS__BIFPERUARTRST__Shift(v)                    (((v) << RGU_RSTMODS__BIFPERUARTRST__Pos) & RGU_RSTMODS__BIFPERUARTRST__Msk) /*!< Shift value 'v' into BIFPERUARTRST and mask 'v' to fit it into BIFPERUARTRST field */

/** RGU_RSTMODS__BIFPERUARTRST__SET() sets RSTMODS.BIFPERUARTRST to given value.
 *
 * When writing to RSTMODS.BIFPERUARTRST, this is recommended to use.
 *
 * @param bf_value new value for RSTMODS.BIFPERUARTRST
 */
__RGU_INLINE void RGU_RSTMODS__BIFPERUARTRST__SET(uint32_t bf_value)
{
    uint32_t reg = RGU_RSTMODS__GET();
    reg = (reg & ~RGU_RSTMODS__BIFPERUARTRST__Msk);
    reg = (reg | (RGU_RSTMODS__BIFPERUARTRST__Shift((uint32_t)bf_value)));
    RGU_RSTMODS__SET(reg);
}

/** RGU_RSTMODS__BIFPERUARTRST__GET() gets RSTMODS.BIFPERUARTRST's current value.
 *
 * When reading from RSTMODS.BIFPERUARTRST, this is recommended to use.
 *
 * @return current value of RSTMODS.BIFPERUARTRST
 */
__RGU_INLINE uint32_t RGU_RSTMODS__BIFPERUARTRST__GET(void)
{
    uint32_t reg = RGU_RSTMODS__GET();
    reg = (reg & RGU_RSTMODS__BIFPERUARTRST__Msk);
    reg = (reg >> RGU_RSTMODS__BIFPERUARTRST__Pos);
    return (uint32_t)reg;
}

/** RGU_RSTMODS__BIFPERUARTRST__MODIFY() modifies RSTMODS.BIFPERUARTRST.
 *
 * This is recommended to use when setting more than one bitfield of RGU.RSTMODS.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of RGU.RSTMODS
 * @param bf_value new value for RSTMODS.BIFPERUARTRST
 * @return new value of RGU.RSTMODS
 */
__RGU_INLINE uint32_t RGU_RSTMODS__BIFPERUARTRST__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~RGU_RSTMODS__BIFPERUARTRST__Msk);
    reg = (reg | (RGU_RSTMODS__BIFPERUARTRST__Shift((uint32_t)bf_value)));
    return reg;
}

/** RGU_RSTMODS__BIFPERUARTRST__EXTRACT() extracts RSTMODS.BIFPERUARTRST.
 *
 * This is recommended to use when extracting more than one bitfield from RGU.RSTMODS.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of RGU.RSTMODS
 * @return current value of RSTMODS.BIFPERUARTRST
 */
__RGU_INLINE uint32_t RGU_RSTMODS__BIFPERUARTRST__EXTRACT(uint32_t reg)
{
    reg = (reg & RGU_RSTMODS__BIFPERUARTRST__Msk);
    reg = (reg >> RGU_RSTMODS__BIFPERUARTRST__Pos);
    return (uint32_t)reg;
}

/* ------------------------ RGU.RSTMODS.BIFPERI2CRST ------------------------ */

/**
<pre>
  RGU.RSTMODS.BIFPERI2CRST:

    1: Performs a reset of the BIF I2C IF.

</pre> */

#define RGU_RSTMODS__BIFPERI2CRST__Pos                          8                                                                      /*!< Right-most bit position of BIFPERI2CRST in RGU.RSTMODS */
#define RGU_RSTMODS__BIFPERI2CRST__Msk                          (0x00000001UL << RGU_RSTMODS__BIFPERI2CRST__Pos)                       /*!< Mask for BIFPERI2CRST in RGU.RSTMODS */
#define RGU_RSTMODS__BIFPERI2CRST__Shift(v)                     (((v) << RGU_RSTMODS__BIFPERI2CRST__Pos) & RGU_RSTMODS__BIFPERI2CRST__Msk) /*!< Shift value 'v' into BIFPERI2CRST and mask 'v' to fit it into BIFPERI2CRST field */

/** RGU_RSTMODS__BIFPERI2CRST__SET() sets RSTMODS.BIFPERI2CRST to given value.
 *
 * When writing to RSTMODS.BIFPERI2CRST, this is recommended to use.
 *
 * @param bf_value new value for RSTMODS.BIFPERI2CRST
 */
__RGU_INLINE void RGU_RSTMODS__BIFPERI2CRST__SET(uint32_t bf_value)
{
    uint32_t reg = RGU_RSTMODS__GET();
    reg = (reg & ~RGU_RSTMODS__BIFPERI2CRST__Msk);
    reg = (reg | (RGU_RSTMODS__BIFPERI2CRST__Shift((uint32_t)bf_value)));
    RGU_RSTMODS__SET(reg);
}

/** RGU_RSTMODS__BIFPERI2CRST__GET() gets RSTMODS.BIFPERI2CRST's current value.
 *
 * When reading from RSTMODS.BIFPERI2CRST, this is recommended to use.
 *
 * @return current value of RSTMODS.BIFPERI2CRST
 */
__RGU_INLINE uint32_t RGU_RSTMODS__BIFPERI2CRST__GET(void)
{
    uint32_t reg = RGU_RSTMODS__GET();
    reg = (reg & RGU_RSTMODS__BIFPERI2CRST__Msk);
    reg = (reg >> RGU_RSTMODS__BIFPERI2CRST__Pos);
    return (uint32_t)reg;
}

/** RGU_RSTMODS__BIFPERI2CRST__MODIFY() modifies RSTMODS.BIFPERI2CRST.
 *
 * This is recommended to use when setting more than one bitfield of RGU.RSTMODS.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of RGU.RSTMODS
 * @param bf_value new value for RSTMODS.BIFPERI2CRST
 * @return new value of RGU.RSTMODS
 */
__RGU_INLINE uint32_t RGU_RSTMODS__BIFPERI2CRST__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~RGU_RSTMODS__BIFPERI2CRST__Msk);
    reg = (reg | (RGU_RSTMODS__BIFPERI2CRST__Shift((uint32_t)bf_value)));
    return reg;
}

/** RGU_RSTMODS__BIFPERI2CRST__EXTRACT() extracts RSTMODS.BIFPERI2CRST.
 *
 * This is recommended to use when extracting more than one bitfield from RGU.RSTMODS.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of RGU.RSTMODS
 * @return current value of RSTMODS.BIFPERI2CRST
 */
__RGU_INLINE uint32_t RGU_RSTMODS__BIFPERI2CRST__EXTRACT(uint32_t reg)
{
    reg = (reg & RGU_RSTMODS__BIFPERI2CRST__Msk);
    reg = (reg >> RGU_RSTMODS__BIFPERI2CRST__Pos);
    return (uint32_t)reg;
}

/* ------------------------ RGU.RSTMODS.BIFPERSSPRST ------------------------ */

/**
<pre>
  RGU.RSTMODS.BIFPERSSPRST:

    1: Performs a reset of the BIF SSP IF.

</pre> */

#define RGU_RSTMODS__BIFPERSSPRST__Pos                          7                                                                      /*!< Right-most bit position of BIFPERSSPRST in RGU.RSTMODS */
#define RGU_RSTMODS__BIFPERSSPRST__Msk                          (0x00000001UL << RGU_RSTMODS__BIFPERSSPRST__Pos)                       /*!< Mask for BIFPERSSPRST in RGU.RSTMODS */
#define RGU_RSTMODS__BIFPERSSPRST__Shift(v)                     (((v) << RGU_RSTMODS__BIFPERSSPRST__Pos) & RGU_RSTMODS__BIFPERSSPRST__Msk) /*!< Shift value 'v' into BIFPERSSPRST and mask 'v' to fit it into BIFPERSSPRST field */

/** RGU_RSTMODS__BIFPERSSPRST__SET() sets RSTMODS.BIFPERSSPRST to given value.
 *
 * When writing to RSTMODS.BIFPERSSPRST, this is recommended to use.
 *
 * @param bf_value new value for RSTMODS.BIFPERSSPRST
 */
__RGU_INLINE void RGU_RSTMODS__BIFPERSSPRST__SET(uint32_t bf_value)
{
    uint32_t reg = RGU_RSTMODS__GET();
    reg = (reg & ~RGU_RSTMODS__BIFPERSSPRST__Msk);
    reg = (reg | (RGU_RSTMODS__BIFPERSSPRST__Shift((uint32_t)bf_value)));
    RGU_RSTMODS__SET(reg);
}

/** RGU_RSTMODS__BIFPERSSPRST__GET() gets RSTMODS.BIFPERSSPRST's current value.
 *
 * When reading from RSTMODS.BIFPERSSPRST, this is recommended to use.
 *
 * @return current value of RSTMODS.BIFPERSSPRST
 */
__RGU_INLINE uint32_t RGU_RSTMODS__BIFPERSSPRST__GET(void)
{
    uint32_t reg = RGU_RSTMODS__GET();
    reg = (reg & RGU_RSTMODS__BIFPERSSPRST__Msk);
    reg = (reg >> RGU_RSTMODS__BIFPERSSPRST__Pos);
    return (uint32_t)reg;
}

/** RGU_RSTMODS__BIFPERSSPRST__MODIFY() modifies RSTMODS.BIFPERSSPRST.
 *
 * This is recommended to use when setting more than one bitfield of RGU.RSTMODS.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of RGU.RSTMODS
 * @param bf_value new value for RSTMODS.BIFPERSSPRST
 * @return new value of RGU.RSTMODS
 */
__RGU_INLINE uint32_t RGU_RSTMODS__BIFPERSSPRST__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~RGU_RSTMODS__BIFPERSSPRST__Msk);
    reg = (reg | (RGU_RSTMODS__BIFPERSSPRST__Shift((uint32_t)bf_value)));
    return reg;
}

/** RGU_RSTMODS__BIFPERSSPRST__EXTRACT() extracts RSTMODS.BIFPERSSPRST.
 *
 * This is recommended to use when extracting more than one bitfield from RGU.RSTMODS.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of RGU.RSTMODS
 * @return current value of RSTMODS.BIFPERSSPRST
 */
__RGU_INLINE uint32_t RGU_RSTMODS__BIFPERSSPRST__EXTRACT(uint32_t reg)
{
    reg = (reg & RGU_RSTMODS__BIFPERSSPRST__Msk);
    reg = (reg >> RGU_RSTMODS__BIFPERSSPRST__Pos);
    return (uint32_t)reg;
}

/* ----------------------- RGU.RSTMODS.BIFPERPMBUSRST ----------------------- */

/**
<pre>
  RGU.RSTMODS.BIFPERPMBUSRST:

    1: Performs a reset of the BIF PMBUS IF.

</pre> */

#define RGU_RSTMODS__BIFPERPMBUSRST__Pos                        6                                                                      /*!< Right-most bit position of BIFPERPMBUSRST in RGU.RSTMODS */
#define RGU_RSTMODS__BIFPERPMBUSRST__Msk                        (0x00000001UL << RGU_RSTMODS__BIFPERPMBUSRST__Pos)                     /*!< Mask for BIFPERPMBUSRST in RGU.RSTMODS */
#define RGU_RSTMODS__BIFPERPMBUSRST__Shift(v)                   (((v) << RGU_RSTMODS__BIFPERPMBUSRST__Pos) & RGU_RSTMODS__BIFPERPMBUSRST__Msk) /*!< Shift value 'v' into BIFPERPMBUSRST and mask 'v' to fit it into BIFPERPMBUSRST field */

/** RGU_RSTMODS__BIFPERPMBUSRST__SET() sets RSTMODS.BIFPERPMBUSRST to given value.
 *
 * When writing to RSTMODS.BIFPERPMBUSRST, this is recommended to use.
 *
 * @param bf_value new value for RSTMODS.BIFPERPMBUSRST
 */
__RGU_INLINE void RGU_RSTMODS__BIFPERPMBUSRST__SET(uint32_t bf_value)
{
    uint32_t reg = RGU_RSTMODS__GET();
    reg = (reg & ~RGU_RSTMODS__BIFPERPMBUSRST__Msk);
    reg = (reg | (RGU_RSTMODS__BIFPERPMBUSRST__Shift((uint32_t)bf_value)));
    RGU_RSTMODS__SET(reg);
}

/** RGU_RSTMODS__BIFPERPMBUSRST__GET() gets RSTMODS.BIFPERPMBUSRST's current value.
 *
 * When reading from RSTMODS.BIFPERPMBUSRST, this is recommended to use.
 *
 * @return current value of RSTMODS.BIFPERPMBUSRST
 */
__RGU_INLINE uint32_t RGU_RSTMODS__BIFPERPMBUSRST__GET(void)
{
    uint32_t reg = RGU_RSTMODS__GET();
    reg = (reg & RGU_RSTMODS__BIFPERPMBUSRST__Msk);
    reg = (reg >> RGU_RSTMODS__BIFPERPMBUSRST__Pos);
    return (uint32_t)reg;
}

/** RGU_RSTMODS__BIFPERPMBUSRST__MODIFY() modifies RSTMODS.BIFPERPMBUSRST.
 *
 * This is recommended to use when setting more than one bitfield of RGU.RSTMODS.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of RGU.RSTMODS
 * @param bf_value new value for RSTMODS.BIFPERPMBUSRST
 * @return new value of RGU.RSTMODS
 */
__RGU_INLINE uint32_t RGU_RSTMODS__BIFPERPMBUSRST__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~RGU_RSTMODS__BIFPERPMBUSRST__Msk);
    reg = (reg | (RGU_RSTMODS__BIFPERPMBUSRST__Shift((uint32_t)bf_value)));
    return reg;
}

/** RGU_RSTMODS__BIFPERPMBUSRST__EXTRACT() extracts RSTMODS.BIFPERPMBUSRST.
 *
 * This is recommended to use when extracting more than one bitfield from RGU.RSTMODS.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of RGU.RSTMODS
 * @return current value of RSTMODS.BIFPERPMBUSRST
 */
__RGU_INLINE uint32_t RGU_RSTMODS__BIFPERPMBUSRST__EXTRACT(uint32_t reg)
{
    reg = (reg & RGU_RSTMODS__BIFPERPMBUSRST__Msk);
    reg = (reg >> RGU_RSTMODS__BIFPERPMBUSRST__Pos);
    return (uint32_t)reg;
}

/* ----------------------- RGU.RSTMODS.BIFPERSVIDRST ----------------------- */

/**
<pre>
  RGU.RSTMODS.BIFPERSVIDRST:

    1: Performs a reset of the BIF SVID IF.

</pre> */

#define RGU_RSTMODS__BIFPERSVIDRST__Pos                         5                                                                      /*!< Right-most bit position of BIFPERSVIDRST in RGU.RSTMODS */
#define RGU_RSTMODS__BIFPERSVIDRST__Msk                         (0x00000001UL << RGU_RSTMODS__BIFPERSVIDRST__Pos)                      /*!< Mask for BIFPERSVIDRST in RGU.RSTMODS */
#define RGU_RSTMODS__BIFPERSVIDRST__Shift(v)                    (((v) << RGU_RSTMODS__BIFPERSVIDRST__Pos) & RGU_RSTMODS__BIFPERSVIDRST__Msk) /*!< Shift value 'v' into BIFPERSVIDRST and mask 'v' to fit it into BIFPERSVIDRST field */

/** RGU_RSTMODS__BIFPERSVIDRST__SET() sets RSTMODS.BIFPERSVIDRST to given value.
 *
 * When writing to RSTMODS.BIFPERSVIDRST, this is recommended to use.
 *
 * @param bf_value new value for RSTMODS.BIFPERSVIDRST
 */
__RGU_INLINE void RGU_RSTMODS__BIFPERSVIDRST__SET(uint32_t bf_value)
{
    uint32_t reg = RGU_RSTMODS__GET();
    reg = (reg & ~RGU_RSTMODS__BIFPERSVIDRST__Msk);
    reg = (reg | (RGU_RSTMODS__BIFPERSVIDRST__Shift((uint32_t)bf_value)));
    RGU_RSTMODS__SET(reg);
}

/** RGU_RSTMODS__BIFPERSVIDRST__GET() gets RSTMODS.BIFPERSVIDRST's current value.
 *
 * When reading from RSTMODS.BIFPERSVIDRST, this is recommended to use.
 *
 * @return current value of RSTMODS.BIFPERSVIDRST
 */
__RGU_INLINE uint32_t RGU_RSTMODS__BIFPERSVIDRST__GET(void)
{
    uint32_t reg = RGU_RSTMODS__GET();
    reg = (reg & RGU_RSTMODS__BIFPERSVIDRST__Msk);
    reg = (reg >> RGU_RSTMODS__BIFPERSVIDRST__Pos);
    return (uint32_t)reg;
}

/** RGU_RSTMODS__BIFPERSVIDRST__MODIFY() modifies RSTMODS.BIFPERSVIDRST.
 *
 * This is recommended to use when setting more than one bitfield of RGU.RSTMODS.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of RGU.RSTMODS
 * @param bf_value new value for RSTMODS.BIFPERSVIDRST
 * @return new value of RGU.RSTMODS
 */
__RGU_INLINE uint32_t RGU_RSTMODS__BIFPERSVIDRST__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~RGU_RSTMODS__BIFPERSVIDRST__Msk);
    reg = (reg | (RGU_RSTMODS__BIFPERSVIDRST__Shift((uint32_t)bf_value)));
    return reg;
}

/** RGU_RSTMODS__BIFPERSVIDRST__EXTRACT() extracts RSTMODS.BIFPERSVIDRST.
 *
 * This is recommended to use when extracting more than one bitfield from RGU.RSTMODS.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of RGU.RSTMODS
 * @return current value of RSTMODS.BIFPERSVIDRST
 */
__RGU_INLINE uint32_t RGU_RSTMODS__BIFPERSVIDRST__EXTRACT(uint32_t reg)
{
    reg = (reg & RGU_RSTMODS__BIFPERSVIDRST__Msk);
    reg = (reg >> RGU_RSTMODS__BIFPERSVIDRST__Pos);
    return (uint32_t)reg;
}

/* ------------------------- RGU.RSTMODS.BIFREGRST ------------------------- */

/**
<pre>
  RGU.RSTMODS.BIFREGRST:

    1: BIFREG Reset Signal set to 1.

</pre> */

#define RGU_RSTMODS__BIFREGRST__Pos                             4                                                                      /*!< Right-most bit position of BIFREGRST in RGU.RSTMODS */
#define RGU_RSTMODS__BIFREGRST__Msk                             (0x00000001UL << RGU_RSTMODS__BIFREGRST__Pos)                          /*!< Mask for BIFREGRST in RGU.RSTMODS */
#define RGU_RSTMODS__BIFREGRST__Shift(v)                        (((v) << RGU_RSTMODS__BIFREGRST__Pos) & RGU_RSTMODS__BIFREGRST__Msk)   /*!< Shift value 'v' into BIFREGRST and mask 'v' to fit it into BIFREGRST field */

/** RGU_RSTMODS__BIFREGRST__SET() sets RSTMODS.BIFREGRST to given value.
 *
 * When writing to RSTMODS.BIFREGRST, this is recommended to use.
 *
 * @param bf_value new value for RSTMODS.BIFREGRST
 */
__RGU_INLINE void RGU_RSTMODS__BIFREGRST__SET(uint32_t bf_value)
{
    uint32_t reg = RGU_RSTMODS__GET();
    reg = (reg & ~RGU_RSTMODS__BIFREGRST__Msk);
    reg = (reg | (RGU_RSTMODS__BIFREGRST__Shift((uint32_t)bf_value)));
    RGU_RSTMODS__SET(reg);
}

/** RGU_RSTMODS__BIFREGRST__GET() gets RSTMODS.BIFREGRST's current value.
 *
 * When reading from RSTMODS.BIFREGRST, this is recommended to use.
 *
 * @return current value of RSTMODS.BIFREGRST
 */
__RGU_INLINE uint32_t RGU_RSTMODS__BIFREGRST__GET(void)
{
    uint32_t reg = RGU_RSTMODS__GET();
    reg = (reg & RGU_RSTMODS__BIFREGRST__Msk);
    reg = (reg >> RGU_RSTMODS__BIFREGRST__Pos);
    return (uint32_t)reg;
}

/** RGU_RSTMODS__BIFREGRST__MODIFY() modifies RSTMODS.BIFREGRST.
 *
 * This is recommended to use when setting more than one bitfield of RGU.RSTMODS.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of RGU.RSTMODS
 * @param bf_value new value for RSTMODS.BIFREGRST
 * @return new value of RGU.RSTMODS
 */
__RGU_INLINE uint32_t RGU_RSTMODS__BIFREGRST__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~RGU_RSTMODS__BIFREGRST__Msk);
    reg = (reg | (RGU_RSTMODS__BIFREGRST__Shift((uint32_t)bf_value)));
    return reg;
}

/** RGU_RSTMODS__BIFREGRST__EXTRACT() extracts RSTMODS.BIFREGRST.
 *
 * This is recommended to use when extracting more than one bitfield from RGU.RSTMODS.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of RGU.RSTMODS
 * @return current value of RSTMODS.BIFREGRST
 */
__RGU_INLINE uint32_t RGU_RSTMODS__BIFREGRST__EXTRACT(uint32_t reg)
{
    reg = (reg & RGU_RSTMODS__BIFREGRST__Msk);
    reg = (reg >> RGU_RSTMODS__BIFREGRST__Pos);
    return (uint32_t)reg;
}

/* ------------------------ RGU.RSTMODS.CNFGOTP1WRST ------------------------ */

/**
<pre>
  RGU.RSTMODS.CNFGOTP1WRST:

    1: Performs a reset of the OTP1 Wrapper.

</pre> */

#define RGU_RSTMODS__CNFGOTP1WRST__Pos                          2                                                                      /*!< Right-most bit position of CNFGOTP1WRST in RGU.RSTMODS */
#define RGU_RSTMODS__CNFGOTP1WRST__Msk                          (0x00000001UL << RGU_RSTMODS__CNFGOTP1WRST__Pos)                       /*!< Mask for CNFGOTP1WRST in RGU.RSTMODS */
#define RGU_RSTMODS__CNFGOTP1WRST__Shift(v)                     (((v) << RGU_RSTMODS__CNFGOTP1WRST__Pos) & RGU_RSTMODS__CNFGOTP1WRST__Msk) /*!< Shift value 'v' into CNFGOTP1WRST and mask 'v' to fit it into CNFGOTP1WRST field */

/** RGU_RSTMODS__CNFGOTP1WRST__SET() sets RSTMODS.CNFGOTP1WRST to given value.
 *
 * When writing to RSTMODS.CNFGOTP1WRST, this is recommended to use.
 *
 * @param bf_value new value for RSTMODS.CNFGOTP1WRST
 */
__RGU_INLINE void RGU_RSTMODS__CNFGOTP1WRST__SET(uint32_t bf_value)
{
    uint32_t reg = RGU_RSTMODS__GET();
    reg = (reg & ~RGU_RSTMODS__CNFGOTP1WRST__Msk);
    reg = (reg | (RGU_RSTMODS__CNFGOTP1WRST__Shift((uint32_t)bf_value)));
    RGU_RSTMODS__SET(reg);
}

/** RGU_RSTMODS__CNFGOTP1WRST__GET() gets RSTMODS.CNFGOTP1WRST's current value.
 *
 * When reading from RSTMODS.CNFGOTP1WRST, this is recommended to use.
 *
 * @return current value of RSTMODS.CNFGOTP1WRST
 */
__RGU_INLINE uint32_t RGU_RSTMODS__CNFGOTP1WRST__GET(void)
{
    uint32_t reg = RGU_RSTMODS__GET();
    reg = (reg & RGU_RSTMODS__CNFGOTP1WRST__Msk);
    reg = (reg >> RGU_RSTMODS__CNFGOTP1WRST__Pos);
    return (uint32_t)reg;
}

/** RGU_RSTMODS__CNFGOTP1WRST__MODIFY() modifies RSTMODS.CNFGOTP1WRST.
 *
 * This is recommended to use when setting more than one bitfield of RGU.RSTMODS.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of RGU.RSTMODS
 * @param bf_value new value for RSTMODS.CNFGOTP1WRST
 * @return new value of RGU.RSTMODS
 */
__RGU_INLINE uint32_t RGU_RSTMODS__CNFGOTP1WRST__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~RGU_RSTMODS__CNFGOTP1WRST__Msk);
    reg = (reg | (RGU_RSTMODS__CNFGOTP1WRST__Shift((uint32_t)bf_value)));
    return reg;
}

/** RGU_RSTMODS__CNFGOTP1WRST__EXTRACT() extracts RSTMODS.CNFGOTP1WRST.
 *
 * This is recommended to use when extracting more than one bitfield from RGU.RSTMODS.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of RGU.RSTMODS
 * @return current value of RSTMODS.CNFGOTP1WRST
 */
__RGU_INLINE uint32_t RGU_RSTMODS__CNFGOTP1WRST__EXTRACT(uint32_t reg)
{
    reg = (reg & RGU_RSTMODS__CNFGOTP1WRST__Msk);
    reg = (reg >> RGU_RSTMODS__CNFGOTP1WRST__Pos);
    return (uint32_t)reg;
}

/* --------------------------- RGU.RSTMODS.DMARST --------------------------- */

/**
<pre>
  RGU.RSTMODS.DMARST:

    1: Performs a reset of the DMA.

</pre> */

#define RGU_RSTMODS__DMARST__Pos                                1                                                                      /*!< Right-most bit position of DMARST in RGU.RSTMODS */
#define RGU_RSTMODS__DMARST__Msk                                (0x00000001UL << RGU_RSTMODS__DMARST__Pos)                             /*!< Mask for DMARST in RGU.RSTMODS */
#define RGU_RSTMODS__DMARST__Shift(v)                           (((v) << RGU_RSTMODS__DMARST__Pos) & RGU_RSTMODS__DMARST__Msk)         /*!< Shift value 'v' into DMARST and mask 'v' to fit it into DMARST field */

/** RGU_RSTMODS__DMARST__SET() sets RSTMODS.DMARST to given value.
 *
 * When writing to RSTMODS.DMARST, this is recommended to use.
 *
 * @param bf_value new value for RSTMODS.DMARST
 */
__RGU_INLINE void RGU_RSTMODS__DMARST__SET(uint32_t bf_value)
{
    uint32_t reg = RGU_RSTMODS__GET();
    reg = (reg & ~RGU_RSTMODS__DMARST__Msk);
    reg = (reg | (RGU_RSTMODS__DMARST__Shift((uint32_t)bf_value)));
    RGU_RSTMODS__SET(reg);
}

/** RGU_RSTMODS__DMARST__GET() gets RSTMODS.DMARST's current value.
 *
 * When reading from RSTMODS.DMARST, this is recommended to use.
 *
 * @return current value of RSTMODS.DMARST
 */
__RGU_INLINE uint32_t RGU_RSTMODS__DMARST__GET(void)
{
    uint32_t reg = RGU_RSTMODS__GET();
    reg = (reg & RGU_RSTMODS__DMARST__Msk);
    reg = (reg >> RGU_RSTMODS__DMARST__Pos);
    return (uint32_t)reg;
}

/** RGU_RSTMODS__DMARST__MODIFY() modifies RSTMODS.DMARST.
 *
 * This is recommended to use when setting more than one bitfield of RGU.RSTMODS.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of RGU.RSTMODS
 * @param bf_value new value for RSTMODS.DMARST
 * @return new value of RGU.RSTMODS
 */
__RGU_INLINE uint32_t RGU_RSTMODS__DMARST__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~RGU_RSTMODS__DMARST__Msk);
    reg = (reg | (RGU_RSTMODS__DMARST__Shift((uint32_t)bf_value)));
    return reg;
}

/** RGU_RSTMODS__DMARST__EXTRACT() extracts RSTMODS.DMARST.
 *
 * This is recommended to use when extracting more than one bitfield from RGU.RSTMODS.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of RGU.RSTMODS
 * @return current value of RSTMODS.DMARST
 */
__RGU_INLINE uint32_t RGU_RSTMODS__DMARST__EXTRACT(uint32_t reg)
{
    reg = (reg & RGU_RSTMODS__DMARST__Msk);
    reg = (reg >> RGU_RSTMODS__DMARST__Pos);
    return (uint32_t)reg;
}

/* --------------------------- RGU.RSTMODS.SWRST --------------------------- */

/**
<pre>
  RGU.RSTMODS.SWRST:

    1: Enable Software Reset (CPU Subsystem reset enable).

</pre> */

#define RGU_RSTMODS__SWRST__Pos                                 0                                                                      /*!< Right-most bit position of SWRST in RGU.RSTMODS */
#define RGU_RSTMODS__SWRST__Msk                                 (0x00000001UL << RGU_RSTMODS__SWRST__Pos)                              /*!< Mask for SWRST in RGU.RSTMODS */
#define RGU_RSTMODS__SWRST__Shift(v)                            (((v) << RGU_RSTMODS__SWRST__Pos) & RGU_RSTMODS__SWRST__Msk)           /*!< Shift value 'v' into SWRST and mask 'v' to fit it into SWRST field */

/** RGU_RSTMODS__SWRST__SET() sets RSTMODS.SWRST to given value.
 *
 * When writing to RSTMODS.SWRST, this is recommended to use.
 *
 * @param bf_value new value for RSTMODS.SWRST
 */
__RGU_INLINE void RGU_RSTMODS__SWRST__SET(uint32_t bf_value)
{
    uint32_t reg = RGU_RSTMODS__GET();
    reg = (reg & ~RGU_RSTMODS__SWRST__Msk);
    reg = (reg | (RGU_RSTMODS__SWRST__Shift((uint32_t)bf_value)));
    RGU_RSTMODS__SET(reg);
}

/** RGU_RSTMODS__SWRST__GET() gets RSTMODS.SWRST's current value.
 *
 * When reading from RSTMODS.SWRST, this is recommended to use.
 *
 * @return current value of RSTMODS.SWRST
 */
__RGU_INLINE uint32_t RGU_RSTMODS__SWRST__GET(void)
{
    uint32_t reg = RGU_RSTMODS__GET();
    reg = (reg & RGU_RSTMODS__SWRST__Msk);
    reg = (reg >> RGU_RSTMODS__SWRST__Pos);
    return (uint32_t)reg;
}

/** RGU_RSTMODS__SWRST__MODIFY() modifies RSTMODS.SWRST.
 *
 * This is recommended to use when setting more than one bitfield of RGU.RSTMODS.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of RGU.RSTMODS
 * @param bf_value new value for RSTMODS.SWRST
 * @return new value of RGU.RSTMODS
 */
__RGU_INLINE uint32_t RGU_RSTMODS__SWRST__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~RGU_RSTMODS__SWRST__Msk);
    reg = (reg | (RGU_RSTMODS__SWRST__Shift((uint32_t)bf_value)));
    return reg;
}

/** RGU_RSTMODS__SWRST__EXTRACT() extracts RSTMODS.SWRST.
 *
 * This is recommended to use when extracting more than one bitfield from RGU.RSTMODS.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of RGU.RSTMODS
 * @return current value of RSTMODS.SWRST
 */
__RGU_INLINE uint32_t RGU_RSTMODS__SWRST__EXTRACT(uint32_t reg)
{
    reg = (reg & RGU_RSTMODS__SWRST__Msk);
    reg = (reg >> RGU_RSTMODS__SWRST__Pos);
    return (uint32_t)reg;
}

/* -------------------------------------------------------------------------- */
/*                        SW_PWDN_REQ member of RGU_t                        */
/* -------------------------------------------------------------------------- */

/** __RGU_SW_PWDN_REQ__ADDRESS returns the address of member SW_PWDN_REQ.
 *
 * As indicated by the __ prefix, this is not intended for use by the FW. It is
 * here for readability only.
 *
 * @return address of SW_PWDN_REQ
 */
__RGU_INLINE uint32_t* __RGU_SW_PWDN_REQ__ADDRESS(void)
{
    return (uint32_t*)((uint32_t)__RGU_BASE_PTR() + (uint32_t)(offsetof(RGU_t, SW_PWDN_REQ)));
}

/** RGU_SW_PWDN_REQ__SET() sets SW_PWDN_REQ to given value.
 *
 * When writing to SW_PWDN_REQ, this is mandatory to use.
 *
 * @param value new value for SW_PWDN_REQ
 */
__RGU_INLINE void RGU_SW_PWDN_REQ__SET(uint32_t value)
{
    HAL_SET32(__RGU_SW_PWDN_REQ__ADDRESS(), value);
}

/** RGU_SW_PWDN_REQ__GET() gets SW_PWDN_REQ's current value.
 *
 * When reading from SW_PWDN_REQ, this is mandatory to use.
 *
 * @return current value of SW_PWDN_REQ
 */
__RGU_INLINE uint32_t RGU_SW_PWDN_REQ__GET(void)
{
    return HAL_GET32(__RGU_SW_PWDN_REQ__ADDRESS());
}

/* ----------------------- RGU.SW_PWDN_REQ.SOFT_PWDN ----------------------- */

/**
<pre>
  RGU.SW_PWDN_REQ.SOFT_PWDN:

    1: Request CPUS to enter in PowerDown. This will be effective



    if the EN_SWPWDN bit has been set

</pre> */

#define RGU_SW_PWDN_REQ__SOFT_PWDN__Pos                         0                                                                      /*!< Right-most bit position of SOFT_PWDN in RGU.SW_PWDN_REQ */
#define RGU_SW_PWDN_REQ__SOFT_PWDN__Msk                         (0x00000001UL << RGU_SW_PWDN_REQ__SOFT_PWDN__Pos)                      /*!< Mask for SOFT_PWDN in RGU.SW_PWDN_REQ */
#define RGU_SW_PWDN_REQ__SOFT_PWDN__Shift(v)                    (((v) << RGU_SW_PWDN_REQ__SOFT_PWDN__Pos) & RGU_SW_PWDN_REQ__SOFT_PWDN__Msk) /*!< Shift value 'v' into SOFT_PWDN and mask 'v' to fit it into SOFT_PWDN field */

/** RGU_SW_PWDN_REQ__SOFT_PWDN__SET() sets SW_PWDN_REQ.SOFT_PWDN to given value.
 *
 * When writing to SW_PWDN_REQ.SOFT_PWDN, this is recommended to use.
 *
 * @param bf_value new value for SW_PWDN_REQ.SOFT_PWDN
 */
__RGU_INLINE void RGU_SW_PWDN_REQ__SOFT_PWDN__SET(uint32_t bf_value)
{
    uint32_t reg = RGU_SW_PWDN_REQ__GET();
    reg = (reg & ~RGU_SW_PWDN_REQ__SOFT_PWDN__Msk);
    reg = (reg | (RGU_SW_PWDN_REQ__SOFT_PWDN__Shift((uint32_t)bf_value)));
    RGU_SW_PWDN_REQ__SET(reg);
}

/** RGU_SW_PWDN_REQ__SOFT_PWDN__GET() gets SW_PWDN_REQ.SOFT_PWDN's current value.
 *
 * When reading from SW_PWDN_REQ.SOFT_PWDN, this is recommended to use.
 *
 * @return current value of SW_PWDN_REQ.SOFT_PWDN
 */
__RGU_INLINE uint32_t RGU_SW_PWDN_REQ__SOFT_PWDN__GET(void)
{
    uint32_t reg = RGU_SW_PWDN_REQ__GET();
    reg = (reg & RGU_SW_PWDN_REQ__SOFT_PWDN__Msk);
    reg = (reg >> RGU_SW_PWDN_REQ__SOFT_PWDN__Pos);
    return (uint32_t)reg;
}

/** RGU_SW_PWDN_REQ__SOFT_PWDN__MODIFY() modifies SW_PWDN_REQ.SOFT_PWDN.
 *
 * This is recommended to use when setting more than one bitfield of RGU.SW_PWDN_REQ.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of RGU.SW_PWDN_REQ
 * @param bf_value new value for SW_PWDN_REQ.SOFT_PWDN
 * @return new value of RGU.SW_PWDN_REQ
 */
__RGU_INLINE uint32_t RGU_SW_PWDN_REQ__SOFT_PWDN__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~RGU_SW_PWDN_REQ__SOFT_PWDN__Msk);
    reg = (reg | (RGU_SW_PWDN_REQ__SOFT_PWDN__Shift((uint32_t)bf_value)));
    return reg;
}

/** RGU_SW_PWDN_REQ__SOFT_PWDN__EXTRACT() extracts SW_PWDN_REQ.SOFT_PWDN.
 *
 * This is recommended to use when extracting more than one bitfield from RGU.SW_PWDN_REQ.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of RGU.SW_PWDN_REQ
 * @return current value of SW_PWDN_REQ.SOFT_PWDN
 */
__RGU_INLINE uint32_t RGU_SW_PWDN_REQ__SOFT_PWDN__EXTRACT(uint32_t reg)
{
    reg = (reg & RGU_SW_PWDN_REQ__SOFT_PWDN__Msk);
    reg = (reg >> RGU_SW_PWDN_REQ__SOFT_PWDN__Pos);
    return (uint32_t)reg;
}

/* -------------------------------------------------------------------------- */
/*                        SW_PWDN_CTRL member of RGU_t                        */
/* -------------------------------------------------------------------------- */

/** __RGU_SW_PWDN_CTRL__ADDRESS returns the address of member SW_PWDN_CTRL.
 *
 * As indicated by the __ prefix, this is not intended for use by the FW. It is
 * here for readability only.
 *
 * @return address of SW_PWDN_CTRL
 */
__RGU_INLINE uint32_t* __RGU_SW_PWDN_CTRL__ADDRESS(void)
{
    return (uint32_t*)((uint32_t)__RGU_BASE_PTR() + (uint32_t)(offsetof(RGU_t, SW_PWDN_CTRL)));
}

/** RGU_SW_PWDN_CTRL__SET() sets SW_PWDN_CTRL to given value.
 *
 * When writing to SW_PWDN_CTRL, this is mandatory to use.
 *
 * @param value new value for SW_PWDN_CTRL
 */
__RGU_INLINE void RGU_SW_PWDN_CTRL__SET(uint32_t value)
{
    HAL_SET32(__RGU_SW_PWDN_CTRL__ADDRESS(), value);
}

/** RGU_SW_PWDN_CTRL__GET() gets SW_PWDN_CTRL's current value.
 *
 * When reading from SW_PWDN_CTRL, this is mandatory to use.
 *
 * @return current value of SW_PWDN_CTRL
 */
__RGU_INLINE uint32_t RGU_SW_PWDN_CTRL__GET(void)
{
    return HAL_GET32(__RGU_SW_PWDN_CTRL__ADDRESS());
}

/* ----------------------- RGU.SW_PWDN_CTRL.EN_SWPWDN ----------------------- */

/**
<pre>
  RGU.SW_PWDN_CTRL.EN_SWPWDN:

    1: CPUS can be powered down by using SW procedure

</pre> */

#define RGU_SW_PWDN_CTRL__EN_SWPWDN__Pos                        0                                                                      /*!< Right-most bit position of EN_SWPWDN in RGU.SW_PWDN_CTRL */
#define RGU_SW_PWDN_CTRL__EN_SWPWDN__Msk                        (0x00000001UL << RGU_SW_PWDN_CTRL__EN_SWPWDN__Pos)                     /*!< Mask for EN_SWPWDN in RGU.SW_PWDN_CTRL */
#define RGU_SW_PWDN_CTRL__EN_SWPWDN__Shift(v)                   (((v) << RGU_SW_PWDN_CTRL__EN_SWPWDN__Pos) & RGU_SW_PWDN_CTRL__EN_SWPWDN__Msk) /*!< Shift value 'v' into EN_SWPWDN and mask 'v' to fit it into EN_SWPWDN field */

/** RGU_SW_PWDN_CTRL__EN_SWPWDN__SET() sets SW_PWDN_CTRL.EN_SWPWDN to given value.
 *
 * When writing to SW_PWDN_CTRL.EN_SWPWDN, this is recommended to use.
 *
 * @param bf_value new value for SW_PWDN_CTRL.EN_SWPWDN
 */
__RGU_INLINE void RGU_SW_PWDN_CTRL__EN_SWPWDN__SET(uint32_t bf_value)
{
    uint32_t reg = RGU_SW_PWDN_CTRL__GET();
    reg = (reg & ~RGU_SW_PWDN_CTRL__EN_SWPWDN__Msk);
    reg = (reg | (RGU_SW_PWDN_CTRL__EN_SWPWDN__Shift((uint32_t)bf_value)));
    RGU_SW_PWDN_CTRL__SET(reg);
}

/** RGU_SW_PWDN_CTRL__EN_SWPWDN__GET() gets SW_PWDN_CTRL.EN_SWPWDN's current value.
 *
 * When reading from SW_PWDN_CTRL.EN_SWPWDN, this is recommended to use.
 *
 * @return current value of SW_PWDN_CTRL.EN_SWPWDN
 */
__RGU_INLINE uint32_t RGU_SW_PWDN_CTRL__EN_SWPWDN__GET(void)
{
    uint32_t reg = RGU_SW_PWDN_CTRL__GET();
    reg = (reg & RGU_SW_PWDN_CTRL__EN_SWPWDN__Msk);
    reg = (reg >> RGU_SW_PWDN_CTRL__EN_SWPWDN__Pos);
    return (uint32_t)reg;
}

/** RGU_SW_PWDN_CTRL__EN_SWPWDN__MODIFY() modifies SW_PWDN_CTRL.EN_SWPWDN.
 *
 * This is recommended to use when setting more than one bitfield of RGU.SW_PWDN_CTRL.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of RGU.SW_PWDN_CTRL
 * @param bf_value new value for SW_PWDN_CTRL.EN_SWPWDN
 * @return new value of RGU.SW_PWDN_CTRL
 */
__RGU_INLINE uint32_t RGU_SW_PWDN_CTRL__EN_SWPWDN__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~RGU_SW_PWDN_CTRL__EN_SWPWDN__Msk);
    reg = (reg | (RGU_SW_PWDN_CTRL__EN_SWPWDN__Shift((uint32_t)bf_value)));
    return reg;
}

/** RGU_SW_PWDN_CTRL__EN_SWPWDN__EXTRACT() extracts SW_PWDN_CTRL.EN_SWPWDN.
 *
 * This is recommended to use when extracting more than one bitfield from RGU.SW_PWDN_CTRL.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of RGU.SW_PWDN_CTRL
 * @return current value of SW_PWDN_CTRL.EN_SWPWDN
 */
__RGU_INLINE uint32_t RGU_SW_PWDN_CTRL__EN_SWPWDN__EXTRACT(uint32_t reg)
{
    reg = (reg & RGU_SW_PWDN_CTRL__EN_SWPWDN__Msk);
    reg = (reg >> RGU_SW_PWDN_CTRL__EN_SWPWDN__Pos);
    return (uint32_t)reg;
}

/* -------------------------------------------------------------------------- */
/*                        HW_PWDN_CTRL member of RGU_t                        */
/* -------------------------------------------------------------------------- */

/** __RGU_HW_PWDN_CTRL__ADDRESS returns the address of member HW_PWDN_CTRL.
 *
 * As indicated by the __ prefix, this is not intended for use by the FW. It is
 * here for readability only.
 *
 * @return address of HW_PWDN_CTRL
 */
__RGU_INLINE uint32_t* __RGU_HW_PWDN_CTRL__ADDRESS(void)
{
    return (uint32_t*)((uint32_t)__RGU_BASE_PTR() + (uint32_t)(offsetof(RGU_t, HW_PWDN_CTRL)));
}

/** RGU_HW_PWDN_CTRL__SET() sets HW_PWDN_CTRL to given value.
 *
 * When writing to HW_PWDN_CTRL, this is mandatory to use.
 *
 * @param value new value for HW_PWDN_CTRL
 */
__RGU_INLINE void RGU_HW_PWDN_CTRL__SET(uint32_t value)
{
    HAL_SET32(__RGU_HW_PWDN_CTRL__ADDRESS(), value);
}

/** RGU_HW_PWDN_CTRL__GET() gets HW_PWDN_CTRL's current value.
 *
 * When reading from HW_PWDN_CTRL, this is mandatory to use.
 *
 * @return current value of HW_PWDN_CTRL
 */
__RGU_INLINE uint32_t RGU_HW_PWDN_CTRL__GET(void)
{
    return HAL_GET32(__RGU_HW_PWDN_CTRL__ADDRESS());
}

/* ----------------------- RGU.HW_PWDN_CTRL.EN_HWPWDN ----------------------- */

/**
<pre>
  RGU.HW_PWDN_CTRL.EN_HWPWDN:

    1: RAM/ROM can be powered down by using CPUS_EN signal

</pre> */

#define RGU_HW_PWDN_CTRL__EN_HWPWDN__Pos                        0                                                                      /*!< Right-most bit position of EN_HWPWDN in RGU.HW_PWDN_CTRL */
#define RGU_HW_PWDN_CTRL__EN_HWPWDN__Msk                        (0x00000001UL << RGU_HW_PWDN_CTRL__EN_HWPWDN__Pos)                     /*!< Mask for EN_HWPWDN in RGU.HW_PWDN_CTRL */
#define RGU_HW_PWDN_CTRL__EN_HWPWDN__Shift(v)                   (((v) << RGU_HW_PWDN_CTRL__EN_HWPWDN__Pos) & RGU_HW_PWDN_CTRL__EN_HWPWDN__Msk) /*!< Shift value 'v' into EN_HWPWDN and mask 'v' to fit it into EN_HWPWDN field */

/** RGU_HW_PWDN_CTRL__EN_HWPWDN__SET() sets HW_PWDN_CTRL.EN_HWPWDN to given value.
 *
 * When writing to HW_PWDN_CTRL.EN_HWPWDN, this is recommended to use.
 *
 * @param bf_value new value for HW_PWDN_CTRL.EN_HWPWDN
 */
__RGU_INLINE void RGU_HW_PWDN_CTRL__EN_HWPWDN__SET(uint32_t bf_value)
{
    uint32_t reg = RGU_HW_PWDN_CTRL__GET();
    reg = (reg & ~RGU_HW_PWDN_CTRL__EN_HWPWDN__Msk);
    reg = (reg | (RGU_HW_PWDN_CTRL__EN_HWPWDN__Shift((uint32_t)bf_value)));
    RGU_HW_PWDN_CTRL__SET(reg);
}

/** RGU_HW_PWDN_CTRL__EN_HWPWDN__GET() gets HW_PWDN_CTRL.EN_HWPWDN's current value.
 *
 * When reading from HW_PWDN_CTRL.EN_HWPWDN, this is recommended to use.
 *
 * @return current value of HW_PWDN_CTRL.EN_HWPWDN
 */
__RGU_INLINE uint32_t RGU_HW_PWDN_CTRL__EN_HWPWDN__GET(void)
{
    uint32_t reg = RGU_HW_PWDN_CTRL__GET();
    reg = (reg & RGU_HW_PWDN_CTRL__EN_HWPWDN__Msk);
    reg = (reg >> RGU_HW_PWDN_CTRL__EN_HWPWDN__Pos);
    return (uint32_t)reg;
}

/** RGU_HW_PWDN_CTRL__EN_HWPWDN__MODIFY() modifies HW_PWDN_CTRL.EN_HWPWDN.
 *
 * This is recommended to use when setting more than one bitfield of RGU.HW_PWDN_CTRL.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of RGU.HW_PWDN_CTRL
 * @param bf_value new value for HW_PWDN_CTRL.EN_HWPWDN
 * @return new value of RGU.HW_PWDN_CTRL
 */
__RGU_INLINE uint32_t RGU_HW_PWDN_CTRL__EN_HWPWDN__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~RGU_HW_PWDN_CTRL__EN_HWPWDN__Msk);
    reg = (reg | (RGU_HW_PWDN_CTRL__EN_HWPWDN__Shift((uint32_t)bf_value)));
    return reg;
}

/** RGU_HW_PWDN_CTRL__EN_HWPWDN__EXTRACT() extracts HW_PWDN_CTRL.EN_HWPWDN.
 *
 * This is recommended to use when extracting more than one bitfield from RGU.HW_PWDN_CTRL.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of RGU.HW_PWDN_CTRL
 * @return current value of HW_PWDN_CTRL.EN_HWPWDN
 */
__RGU_INLINE uint32_t RGU_HW_PWDN_CTRL__EN_HWPWDN__EXTRACT(uint32_t reg)
{
    reg = (reg & RGU_HW_PWDN_CTRL__EN_HWPWDN__Msk);
    reg = (reg >> RGU_HW_PWDN_CTRL__EN_HWPWDN__Pos);
    return (uint32_t)reg;
}

/* -------------------------------------------------------------------------- */
/*                          SPARE_FF member of RGU_t                          */
/* -------------------------------------------------------------------------- */

/** __RGU_SPARE_FF__ADDRESS returns the address of member SPARE_FF.
 *
 * As indicated by the __ prefix, this is not intended for use by the FW. It is
 * here for readability only.
 *
 * @return address of SPARE_FF
 */
__RGU_INLINE uint32_t* __RGU_SPARE_FF__ADDRESS(void)
{
    return (uint32_t*)((uint32_t)__RGU_BASE_PTR() + (uint32_t)(offsetof(RGU_t, SPARE_FF)));
}

/** RGU_SPARE_FF__SET() sets SPARE_FF to given value.
 *
 * When writing to SPARE_FF, this is mandatory to use.
 *
 * @param value new value for SPARE_FF
 */
__RGU_INLINE void RGU_SPARE_FF__SET(uint32_t value)
{
    HAL_SET32(__RGU_SPARE_FF__ADDRESS(), value);
}

/** RGU_SPARE_FF__GET() gets SPARE_FF's current value.
 *
 * When reading from SPARE_FF, this is mandatory to use.
 *
 * @return current value of SPARE_FF
 */
__RGU_INLINE uint32_t RGU_SPARE_FF__GET(void)
{
    return HAL_GET32(__RGU_SPARE_FF__ADDRESS());
}

/* ------------------------- RGU.SPARE_FF.SPARE_FF ------------------------- */

/**
<pre>
  RGU.SPARE_FF.SPARE_FF:

    Spare Register

</pre> */

#define RGU_SPARE_FF__SPARE_FF__Pos                             0                                                                      /*!< Right-most bit position of SPARE_FF in RGU.SPARE_FF */
#define RGU_SPARE_FF__SPARE_FF__Msk                             (0xFFFFFFFFUL << RGU_SPARE_FF__SPARE_FF__Pos)                          /*!< Mask for SPARE_FF in RGU.SPARE_FF */
#define RGU_SPARE_FF__SPARE_FF__Shift(v)                        (((v) << RGU_SPARE_FF__SPARE_FF__Pos) & RGU_SPARE_FF__SPARE_FF__Msk)   /*!< Shift value 'v' into SPARE_FF and mask 'v' to fit it into SPARE_FF field */

/** RGU_SPARE_FF__SPARE_FF__SET() sets SPARE_FF.SPARE_FF to given value.
 *
 * When writing to SPARE_FF.SPARE_FF, this is recommended to use.
 *
 * @param bf_value new value for SPARE_FF.SPARE_FF
 */
__RGU_INLINE void RGU_SPARE_FF__SPARE_FF__SET(uint32_t bf_value)
{
    uint32_t reg = RGU_SPARE_FF__GET();
    reg = (reg & ~RGU_SPARE_FF__SPARE_FF__Msk);
    reg = (reg | (RGU_SPARE_FF__SPARE_FF__Shift((uint32_t)bf_value)));
    RGU_SPARE_FF__SET(reg);
}

/** RGU_SPARE_FF__SPARE_FF__GET() gets SPARE_FF.SPARE_FF's current value.
 *
 * When reading from SPARE_FF.SPARE_FF, this is recommended to use.
 *
 * @return current value of SPARE_FF.SPARE_FF
 */
__RGU_INLINE uint32_t RGU_SPARE_FF__SPARE_FF__GET(void)
{
    uint32_t reg = RGU_SPARE_FF__GET();
    reg = (reg & RGU_SPARE_FF__SPARE_FF__Msk);
    reg = (reg >> RGU_SPARE_FF__SPARE_FF__Pos);
    return (uint32_t)reg;
}

/** RGU_SPARE_FF__SPARE_FF__MODIFY() modifies SPARE_FF.SPARE_FF.
 *
 * This is recommended to use when setting more than one bitfield of RGU.SPARE_FF.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of RGU.SPARE_FF
 * @param bf_value new value for SPARE_FF.SPARE_FF
 * @return new value of RGU.SPARE_FF
 */
__RGU_INLINE uint32_t RGU_SPARE_FF__SPARE_FF__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~RGU_SPARE_FF__SPARE_FF__Msk);
    reg = (reg | (RGU_SPARE_FF__SPARE_FF__Shift((uint32_t)bf_value)));
    return reg;
}

/** RGU_SPARE_FF__SPARE_FF__EXTRACT() extracts SPARE_FF.SPARE_FF.
 *
 * This is recommended to use when extracting more than one bitfield from RGU.SPARE_FF.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of RGU.SPARE_FF
 * @return current value of SPARE_FF.SPARE_FF
 */
__RGU_INLINE uint32_t RGU_SPARE_FF__SPARE_FF__EXTRACT(uint32_t reg)
{
    reg = (reg & RGU_SPARE_FF__SPARE_FF__Msk);
    reg = (reg >> RGU_SPARE_FF__SPARE_FF__Pos);
    return (uint32_t)reg;
}

/* -------------------------------------------------------------------------- */
/*                        RSTMODS_SET member of RGU_t                        */
/* -------------------------------------------------------------------------- */

/** __RGU_RSTMODS_SET__ADDRESS returns the address of member RSTMODS_SET.
 *
 * As indicated by the __ prefix, this is not intended for use by the FW. It is
 * here for readability only.
 *
 * @return address of RSTMODS_SET
 */
__RGU_INLINE uint32_t* __RGU_RSTMODS_SET__ADDRESS(void)
{
    return (uint32_t*)((uint32_t)__RGU_BASE_PTR() + (uint32_t)(offsetof(RGU_t, RSTMODS_SET)));
}

/** RGU_RSTMODS_SET__SET() sets RSTMODS_SET to given value.
 *
 * When writing to RSTMODS_SET, this is mandatory to use.
 *
 * @param value new value for RSTMODS_SET
 */
__RGU_INLINE void RGU_RSTMODS_SET__SET(uint32_t value)
{
    HAL_SET32(__RGU_RSTMODS_SET__ADDRESS(), value);
}


/* ------------------------ RGU.RSTMODS_SET.GPIO1RST ------------------------ */

/**
<pre>
  RGU.RSTMODS_SET.GPIO1RST:

    1: Performs a reset of the GPIO1 block.

</pre> */

#define RGU_RSTMODS_SET__GPIO1RST__Pos                          16                                                                     /*!< Right-most bit position of GPIO1RST in RGU.RSTMODS_SET */
#define RGU_RSTMODS_SET__GPIO1RST__Msk                          (0x00000001UL << RGU_RSTMODS_SET__GPIO1RST__Pos)                       /*!< Mask for GPIO1RST in RGU.RSTMODS_SET */
#define RGU_RSTMODS_SET__GPIO1RST__Shift(v)                     (((v) << RGU_RSTMODS_SET__GPIO1RST__Pos) & RGU_RSTMODS_SET__GPIO1RST__Msk) /*!< Shift value 'v' into GPIO1RST and mask 'v' to fit it into GPIO1RST field */

/** RGU_RSTMODS_SET__GPIO1RST__SET() sets RSTMODS_SET.GPIO1RST to given value.
 *
 * When writing to RSTMODS_SET.GPIO1RST, this is recommended to use.
 *
 * @param bf_value new value for RSTMODS_SET.GPIO1RST
 */
__RGU_INLINE void RGU_RSTMODS_SET__GPIO1RST__SET(uint32_t bf_value)
{
    uint32_t reg = RGU_RSTMODS_SET__GPIO1RST__Shift((uint32_t)bf_value);
    RGU_RSTMODS_SET__SET(reg);
}


/** RGU_RSTMODS_SET__GPIO1RST__MODIFY() modifies RSTMODS_SET.GPIO1RST.
 *
 * This is recommended to use when setting more than one bitfield of RGU.RSTMODS_SET.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of RGU.RSTMODS_SET
 * @param bf_value new value for RSTMODS_SET.GPIO1RST
 * @return new value of RGU.RSTMODS_SET
 */
__RGU_INLINE uint32_t RGU_RSTMODS_SET__GPIO1RST__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~RGU_RSTMODS_SET__GPIO1RST__Msk);
    reg = (reg | (RGU_RSTMODS_SET__GPIO1RST__Shift((uint32_t)bf_value)));
    return reg;
}

/** RGU_RSTMODS_SET__GPIO1RST__EXTRACT() extracts RSTMODS_SET.GPIO1RST.
 *
 * This is recommended to use when extracting more than one bitfield from RGU.RSTMODS_SET.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of RGU.RSTMODS_SET
 * @return current value of RSTMODS_SET.GPIO1RST
 */
__RGU_INLINE uint32_t RGU_RSTMODS_SET__GPIO1RST__EXTRACT(uint32_t reg)
{
    reg = (reg & RGU_RSTMODS_SET__GPIO1RST__Msk);
    reg = (reg >> RGU_RSTMODS_SET__GPIO1RST__Pos);
    return (uint32_t)reg;
}

/* ------------------------ RGU.RSTMODS_SET.GPIO0RST ------------------------ */

/**
<pre>
  RGU.RSTMODS_SET.GPIO0RST:

    1: Performs a reset of the GPIO0 block.

</pre> */

#define RGU_RSTMODS_SET__GPIO0RST__Pos                          15                                                                     /*!< Right-most bit position of GPIO0RST in RGU.RSTMODS_SET */
#define RGU_RSTMODS_SET__GPIO0RST__Msk                          (0x00000001UL << RGU_RSTMODS_SET__GPIO0RST__Pos)                       /*!< Mask for GPIO0RST in RGU.RSTMODS_SET */
#define RGU_RSTMODS_SET__GPIO0RST__Shift(v)                     (((v) << RGU_RSTMODS_SET__GPIO0RST__Pos) & RGU_RSTMODS_SET__GPIO0RST__Msk) /*!< Shift value 'v' into GPIO0RST and mask 'v' to fit it into GPIO0RST field */

/** RGU_RSTMODS_SET__GPIO0RST__SET() sets RSTMODS_SET.GPIO0RST to given value.
 *
 * When writing to RSTMODS_SET.GPIO0RST, this is recommended to use.
 *
 * @param bf_value new value for RSTMODS_SET.GPIO0RST
 */
__RGU_INLINE void RGU_RSTMODS_SET__GPIO0RST__SET(uint32_t bf_value)
{
    uint32_t reg = RGU_RSTMODS_SET__GPIO0RST__Shift((uint32_t)bf_value);
    RGU_RSTMODS_SET__SET(reg);
}


/** RGU_RSTMODS_SET__GPIO0RST__MODIFY() modifies RSTMODS_SET.GPIO0RST.
 *
 * This is recommended to use when setting more than one bitfield of RGU.RSTMODS_SET.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of RGU.RSTMODS_SET
 * @param bf_value new value for RSTMODS_SET.GPIO0RST
 * @return new value of RGU.RSTMODS_SET
 */
__RGU_INLINE uint32_t RGU_RSTMODS_SET__GPIO0RST__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~RGU_RSTMODS_SET__GPIO0RST__Msk);
    reg = (reg | (RGU_RSTMODS_SET__GPIO0RST__Shift((uint32_t)bf_value)));
    return reg;
}

/** RGU_RSTMODS_SET__GPIO0RST__EXTRACT() extracts RSTMODS_SET.GPIO0RST.
 *
 * This is recommended to use when extracting more than one bitfield from RGU.RSTMODS_SET.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of RGU.RSTMODS_SET
 * @return current value of RSTMODS_SET.GPIO0RST
 */
__RGU_INLINE uint32_t RGU_RSTMODS_SET__GPIO0RST__EXTRACT(uint32_t reg)
{
    reg = (reg & RGU_RSTMODS_SET__GPIO0RST__Msk);
    reg = (reg >> RGU_RSTMODS_SET__GPIO0RST__Pos);
    return (uint32_t)reg;
}

/* ------------------------ RGU.RSTMODS_SET.WDTIFRST ------------------------ */

/**
<pre>
  RGU.RSTMODS_SET.WDTIFRST:

    1: Performs a reset of the WDT IF block.

</pre> */

#define RGU_RSTMODS_SET__WDTIFRST__Pos                          14                                                                     /*!< Right-most bit position of WDTIFRST in RGU.RSTMODS_SET */
#define RGU_RSTMODS_SET__WDTIFRST__Msk                          (0x00000001UL << RGU_RSTMODS_SET__WDTIFRST__Pos)                       /*!< Mask for WDTIFRST in RGU.RSTMODS_SET */
#define RGU_RSTMODS_SET__WDTIFRST__Shift(v)                     (((v) << RGU_RSTMODS_SET__WDTIFRST__Pos) & RGU_RSTMODS_SET__WDTIFRST__Msk) /*!< Shift value 'v' into WDTIFRST and mask 'v' to fit it into WDTIFRST field */

/** RGU_RSTMODS_SET__WDTIFRST__SET() sets RSTMODS_SET.WDTIFRST to given value.
 *
 * When writing to RSTMODS_SET.WDTIFRST, this is recommended to use.
 *
 * @param bf_value new value for RSTMODS_SET.WDTIFRST
 */
__RGU_INLINE void RGU_RSTMODS_SET__WDTIFRST__SET(uint32_t bf_value)
{
    uint32_t reg = RGU_RSTMODS_SET__WDTIFRST__Shift((uint32_t)bf_value);
    RGU_RSTMODS_SET__SET(reg);
}


/** RGU_RSTMODS_SET__WDTIFRST__MODIFY() modifies RSTMODS_SET.WDTIFRST.
 *
 * This is recommended to use when setting more than one bitfield of RGU.RSTMODS_SET.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of RGU.RSTMODS_SET
 * @param bf_value new value for RSTMODS_SET.WDTIFRST
 * @return new value of RGU.RSTMODS_SET
 */
__RGU_INLINE uint32_t RGU_RSTMODS_SET__WDTIFRST__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~RGU_RSTMODS_SET__WDTIFRST__Msk);
    reg = (reg | (RGU_RSTMODS_SET__WDTIFRST__Shift((uint32_t)bf_value)));
    return reg;
}

/** RGU_RSTMODS_SET__WDTIFRST__EXTRACT() extracts RSTMODS_SET.WDTIFRST.
 *
 * This is recommended to use when extracting more than one bitfield from RGU.RSTMODS_SET.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of RGU.RSTMODS_SET
 * @return current value of RSTMODS_SET.WDTIFRST
 */
__RGU_INLINE uint32_t RGU_RSTMODS_SET__WDTIFRST__EXTRACT(uint32_t reg)
{
    reg = (reg & RGU_RSTMODS_SET__WDTIFRST__Msk);
    reg = (reg >> RGU_RSTMODS_SET__WDTIFRST__Pos);
    return (uint32_t)reg;
}

/* ----------------------- RGU.RSTMODS_SET.DTIMER3RST ----------------------- */

/**
<pre>
  RGU.RSTMODS_SET.DTIMER3RST:

    1: Performs a reset of the DTIMER2 block.

</pre> */

#define RGU_RSTMODS_SET__DTIMER3RST__Pos                        13                                                                     /*!< Right-most bit position of DTIMER3RST in RGU.RSTMODS_SET */
#define RGU_RSTMODS_SET__DTIMER3RST__Msk                        (0x00000001UL << RGU_RSTMODS_SET__DTIMER3RST__Pos)                     /*!< Mask for DTIMER3RST in RGU.RSTMODS_SET */
#define RGU_RSTMODS_SET__DTIMER3RST__Shift(v)                   (((v) << RGU_RSTMODS_SET__DTIMER3RST__Pos) & RGU_RSTMODS_SET__DTIMER3RST__Msk) /*!< Shift value 'v' into DTIMER3RST and mask 'v' to fit it into DTIMER3RST field */

/** RGU_RSTMODS_SET__DTIMER3RST__SET() sets RSTMODS_SET.DTIMER3RST to given value.
 *
 * When writing to RSTMODS_SET.DTIMER3RST, this is recommended to use.
 *
 * @param bf_value new value for RSTMODS_SET.DTIMER3RST
 */
__RGU_INLINE void RGU_RSTMODS_SET__DTIMER3RST__SET(uint32_t bf_value)
{
    uint32_t reg = RGU_RSTMODS_SET__DTIMER3RST__Shift((uint32_t)bf_value);
    RGU_RSTMODS_SET__SET(reg);
}


/** RGU_RSTMODS_SET__DTIMER3RST__MODIFY() modifies RSTMODS_SET.DTIMER3RST.
 *
 * This is recommended to use when setting more than one bitfield of RGU.RSTMODS_SET.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of RGU.RSTMODS_SET
 * @param bf_value new value for RSTMODS_SET.DTIMER3RST
 * @return new value of RGU.RSTMODS_SET
 */
__RGU_INLINE uint32_t RGU_RSTMODS_SET__DTIMER3RST__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~RGU_RSTMODS_SET__DTIMER3RST__Msk);
    reg = (reg | (RGU_RSTMODS_SET__DTIMER3RST__Shift((uint32_t)bf_value)));
    return reg;
}

/** RGU_RSTMODS_SET__DTIMER3RST__EXTRACT() extracts RSTMODS_SET.DTIMER3RST.
 *
 * This is recommended to use when extracting more than one bitfield from RGU.RSTMODS_SET.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of RGU.RSTMODS_SET
 * @return current value of RSTMODS_SET.DTIMER3RST
 */
__RGU_INLINE uint32_t RGU_RSTMODS_SET__DTIMER3RST__EXTRACT(uint32_t reg)
{
    reg = (reg & RGU_RSTMODS_SET__DTIMER3RST__Msk);
    reg = (reg >> RGU_RSTMODS_SET__DTIMER3RST__Pos);
    return (uint32_t)reg;
}

/* ----------------------- RGU.RSTMODS_SET.DTIMER2RST ----------------------- */

/**
<pre>
  RGU.RSTMODS_SET.DTIMER2RST:

    1: Performs a reset of the DTIMER2 block.

</pre> */

#define RGU_RSTMODS_SET__DTIMER2RST__Pos                        12                                                                     /*!< Right-most bit position of DTIMER2RST in RGU.RSTMODS_SET */
#define RGU_RSTMODS_SET__DTIMER2RST__Msk                        (0x00000001UL << RGU_RSTMODS_SET__DTIMER2RST__Pos)                     /*!< Mask for DTIMER2RST in RGU.RSTMODS_SET */
#define RGU_RSTMODS_SET__DTIMER2RST__Shift(v)                   (((v) << RGU_RSTMODS_SET__DTIMER2RST__Pos) & RGU_RSTMODS_SET__DTIMER2RST__Msk) /*!< Shift value 'v' into DTIMER2RST and mask 'v' to fit it into DTIMER2RST field */

/** RGU_RSTMODS_SET__DTIMER2RST__SET() sets RSTMODS_SET.DTIMER2RST to given value.
 *
 * When writing to RSTMODS_SET.DTIMER2RST, this is recommended to use.
 *
 * @param bf_value new value for RSTMODS_SET.DTIMER2RST
 */
__RGU_INLINE void RGU_RSTMODS_SET__DTIMER2RST__SET(uint32_t bf_value)
{
    uint32_t reg = RGU_RSTMODS_SET__DTIMER2RST__Shift((uint32_t)bf_value);
    RGU_RSTMODS_SET__SET(reg);
}


/** RGU_RSTMODS_SET__DTIMER2RST__MODIFY() modifies RSTMODS_SET.DTIMER2RST.
 *
 * This is recommended to use when setting more than one bitfield of RGU.RSTMODS_SET.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of RGU.RSTMODS_SET
 * @param bf_value new value for RSTMODS_SET.DTIMER2RST
 * @return new value of RGU.RSTMODS_SET
 */
__RGU_INLINE uint32_t RGU_RSTMODS_SET__DTIMER2RST__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~RGU_RSTMODS_SET__DTIMER2RST__Msk);
    reg = (reg | (RGU_RSTMODS_SET__DTIMER2RST__Shift((uint32_t)bf_value)));
    return reg;
}

/** RGU_RSTMODS_SET__DTIMER2RST__EXTRACT() extracts RSTMODS_SET.DTIMER2RST.
 *
 * This is recommended to use when extracting more than one bitfield from RGU.RSTMODS_SET.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of RGU.RSTMODS_SET
 * @return current value of RSTMODS_SET.DTIMER2RST
 */
__RGU_INLINE uint32_t RGU_RSTMODS_SET__DTIMER2RST__EXTRACT(uint32_t reg)
{
    reg = (reg & RGU_RSTMODS_SET__DTIMER2RST__Msk);
    reg = (reg >> RGU_RSTMODS_SET__DTIMER2RST__Pos);
    return (uint32_t)reg;
}

/* ----------------------- RGU.RSTMODS_SET.DTIMER1RST ----------------------- */

/**
<pre>
  RGU.RSTMODS_SET.DTIMER1RST:

    1: Performs a reset of the DTIMER block.

</pre> */

#define RGU_RSTMODS_SET__DTIMER1RST__Pos                        11                                                                     /*!< Right-most bit position of DTIMER1RST in RGU.RSTMODS_SET */
#define RGU_RSTMODS_SET__DTIMER1RST__Msk                        (0x00000001UL << RGU_RSTMODS_SET__DTIMER1RST__Pos)                     /*!< Mask for DTIMER1RST in RGU.RSTMODS_SET */
#define RGU_RSTMODS_SET__DTIMER1RST__Shift(v)                   (((v) << RGU_RSTMODS_SET__DTIMER1RST__Pos) & RGU_RSTMODS_SET__DTIMER1RST__Msk) /*!< Shift value 'v' into DTIMER1RST and mask 'v' to fit it into DTIMER1RST field */

/** RGU_RSTMODS_SET__DTIMER1RST__SET() sets RSTMODS_SET.DTIMER1RST to given value.
 *
 * When writing to RSTMODS_SET.DTIMER1RST, this is recommended to use.
 *
 * @param bf_value new value for RSTMODS_SET.DTIMER1RST
 */
__RGU_INLINE void RGU_RSTMODS_SET__DTIMER1RST__SET(uint32_t bf_value)
{
    uint32_t reg = RGU_RSTMODS_SET__DTIMER1RST__Shift((uint32_t)bf_value);
    RGU_RSTMODS_SET__SET(reg);
}


/** RGU_RSTMODS_SET__DTIMER1RST__MODIFY() modifies RSTMODS_SET.DTIMER1RST.
 *
 * This is recommended to use when setting more than one bitfield of RGU.RSTMODS_SET.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of RGU.RSTMODS_SET
 * @param bf_value new value for RSTMODS_SET.DTIMER1RST
 * @return new value of RGU.RSTMODS_SET
 */
__RGU_INLINE uint32_t RGU_RSTMODS_SET__DTIMER1RST__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~RGU_RSTMODS_SET__DTIMER1RST__Msk);
    reg = (reg | (RGU_RSTMODS_SET__DTIMER1RST__Shift((uint32_t)bf_value)));
    return reg;
}

/** RGU_RSTMODS_SET__DTIMER1RST__EXTRACT() extracts RSTMODS_SET.DTIMER1RST.
 *
 * This is recommended to use when extracting more than one bitfield from RGU.RSTMODS_SET.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of RGU.RSTMODS_SET
 * @return current value of RSTMODS_SET.DTIMER1RST
 */
__RGU_INLINE uint32_t RGU_RSTMODS_SET__DTIMER1RST__EXTRACT(uint32_t reg)
{
    reg = (reg & RGU_RSTMODS_SET__DTIMER1RST__Msk);
    reg = (reg >> RGU_RSTMODS_SET__DTIMER1RST__Pos);
    return (uint32_t)reg;
}

/* --------------------- RGU.RSTMODS_SET.BIFPERUARTRST --------------------- */

/**
<pre>
  RGU.RSTMODS_SET.BIFPERUARTRST:

    1: Performs a reset of the BIF UART IF.

</pre> */

#define RGU_RSTMODS_SET__BIFPERUARTRST__Pos                     9                                                                      /*!< Right-most bit position of BIFPERUARTRST in RGU.RSTMODS_SET */
#define RGU_RSTMODS_SET__BIFPERUARTRST__Msk                     (0x00000001UL << RGU_RSTMODS_SET__BIFPERUARTRST__Pos)                  /*!< Mask for BIFPERUARTRST in RGU.RSTMODS_SET */
#define RGU_RSTMODS_SET__BIFPERUARTRST__Shift(v)                (((v) << RGU_RSTMODS_SET__BIFPERUARTRST__Pos) & RGU_RSTMODS_SET__BIFPERUARTRST__Msk) /*!< Shift value 'v' into BIFPERUARTRST and mask 'v' to fit it into BIFPERUARTRST field */

/** RGU_RSTMODS_SET__BIFPERUARTRST__SET() sets RSTMODS_SET.BIFPERUARTRST to given value.
 *
 * When writing to RSTMODS_SET.BIFPERUARTRST, this is recommended to use.
 *
 * @param bf_value new value for RSTMODS_SET.BIFPERUARTRST
 */
__RGU_INLINE void RGU_RSTMODS_SET__BIFPERUARTRST__SET(uint32_t bf_value)
{
    uint32_t reg = RGU_RSTMODS_SET__BIFPERUARTRST__Shift((uint32_t)bf_value);
    RGU_RSTMODS_SET__SET(reg);
}


/** RGU_RSTMODS_SET__BIFPERUARTRST__MODIFY() modifies RSTMODS_SET.BIFPERUARTRST.
 *
 * This is recommended to use when setting more than one bitfield of RGU.RSTMODS_SET.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of RGU.RSTMODS_SET
 * @param bf_value new value for RSTMODS_SET.BIFPERUARTRST
 * @return new value of RGU.RSTMODS_SET
 */
__RGU_INLINE uint32_t RGU_RSTMODS_SET__BIFPERUARTRST__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~RGU_RSTMODS_SET__BIFPERUARTRST__Msk);
    reg = (reg | (RGU_RSTMODS_SET__BIFPERUARTRST__Shift((uint32_t)bf_value)));
    return reg;
}

/** RGU_RSTMODS_SET__BIFPERUARTRST__EXTRACT() extracts RSTMODS_SET.BIFPERUARTRST.
 *
 * This is recommended to use when extracting more than one bitfield from RGU.RSTMODS_SET.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of RGU.RSTMODS_SET
 * @return current value of RSTMODS_SET.BIFPERUARTRST
 */
__RGU_INLINE uint32_t RGU_RSTMODS_SET__BIFPERUARTRST__EXTRACT(uint32_t reg)
{
    reg = (reg & RGU_RSTMODS_SET__BIFPERUARTRST__Msk);
    reg = (reg >> RGU_RSTMODS_SET__BIFPERUARTRST__Pos);
    return (uint32_t)reg;
}

/* ---------------------- RGU.RSTMODS_SET.BIFPERI2CRST ---------------------- */

/**
<pre>
  RGU.RSTMODS_SET.BIFPERI2CRST:

    1: Performs a reset of the BIF I2C IF.

</pre> */

#define RGU_RSTMODS_SET__BIFPERI2CRST__Pos                      8                                                                      /*!< Right-most bit position of BIFPERI2CRST in RGU.RSTMODS_SET */
#define RGU_RSTMODS_SET__BIFPERI2CRST__Msk                      (0x00000001UL << RGU_RSTMODS_SET__BIFPERI2CRST__Pos)                   /*!< Mask for BIFPERI2CRST in RGU.RSTMODS_SET */
#define RGU_RSTMODS_SET__BIFPERI2CRST__Shift(v)                 (((v) << RGU_RSTMODS_SET__BIFPERI2CRST__Pos) & RGU_RSTMODS_SET__BIFPERI2CRST__Msk) /*!< Shift value 'v' into BIFPERI2CRST and mask 'v' to fit it into BIFPERI2CRST field */

/** RGU_RSTMODS_SET__BIFPERI2CRST__SET() sets RSTMODS_SET.BIFPERI2CRST to given value.
 *
 * When writing to RSTMODS_SET.BIFPERI2CRST, this is recommended to use.
 *
 * @param bf_value new value for RSTMODS_SET.BIFPERI2CRST
 */
__RGU_INLINE void RGU_RSTMODS_SET__BIFPERI2CRST__SET(uint32_t bf_value)
{
    uint32_t reg = RGU_RSTMODS_SET__BIFPERI2CRST__Shift((uint32_t)bf_value);
    RGU_RSTMODS_SET__SET(reg);
}


/** RGU_RSTMODS_SET__BIFPERI2CRST__MODIFY() modifies RSTMODS_SET.BIFPERI2CRST.
 *
 * This is recommended to use when setting more than one bitfield of RGU.RSTMODS_SET.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of RGU.RSTMODS_SET
 * @param bf_value new value for RSTMODS_SET.BIFPERI2CRST
 * @return new value of RGU.RSTMODS_SET
 */
__RGU_INLINE uint32_t RGU_RSTMODS_SET__BIFPERI2CRST__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~RGU_RSTMODS_SET__BIFPERI2CRST__Msk);
    reg = (reg | (RGU_RSTMODS_SET__BIFPERI2CRST__Shift((uint32_t)bf_value)));
    return reg;
}

/** RGU_RSTMODS_SET__BIFPERI2CRST__EXTRACT() extracts RSTMODS_SET.BIFPERI2CRST.
 *
 * This is recommended to use when extracting more than one bitfield from RGU.RSTMODS_SET.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of RGU.RSTMODS_SET
 * @return current value of RSTMODS_SET.BIFPERI2CRST
 */
__RGU_INLINE uint32_t RGU_RSTMODS_SET__BIFPERI2CRST__EXTRACT(uint32_t reg)
{
    reg = (reg & RGU_RSTMODS_SET__BIFPERI2CRST__Msk);
    reg = (reg >> RGU_RSTMODS_SET__BIFPERI2CRST__Pos);
    return (uint32_t)reg;
}

/* ---------------------- RGU.RSTMODS_SET.BIFPERSSPRST ---------------------- */

/**
<pre>
  RGU.RSTMODS_SET.BIFPERSSPRST:

    1: Performs a reset of the BIF SSP IF.

</pre> */

#define RGU_RSTMODS_SET__BIFPERSSPRST__Pos                      7                                                                      /*!< Right-most bit position of BIFPERSSPRST in RGU.RSTMODS_SET */
#define RGU_RSTMODS_SET__BIFPERSSPRST__Msk                      (0x00000001UL << RGU_RSTMODS_SET__BIFPERSSPRST__Pos)                   /*!< Mask for BIFPERSSPRST in RGU.RSTMODS_SET */
#define RGU_RSTMODS_SET__BIFPERSSPRST__Shift(v)                 (((v) << RGU_RSTMODS_SET__BIFPERSSPRST__Pos) & RGU_RSTMODS_SET__BIFPERSSPRST__Msk) /*!< Shift value 'v' into BIFPERSSPRST and mask 'v' to fit it into BIFPERSSPRST field */

/** RGU_RSTMODS_SET__BIFPERSSPRST__SET() sets RSTMODS_SET.BIFPERSSPRST to given value.
 *
 * When writing to RSTMODS_SET.BIFPERSSPRST, this is recommended to use.
 *
 * @param bf_value new value for RSTMODS_SET.BIFPERSSPRST
 */
__RGU_INLINE void RGU_RSTMODS_SET__BIFPERSSPRST__SET(uint32_t bf_value)
{
    uint32_t reg = RGU_RSTMODS_SET__BIFPERSSPRST__Shift((uint32_t)bf_value);
    RGU_RSTMODS_SET__SET(reg);
}


/** RGU_RSTMODS_SET__BIFPERSSPRST__MODIFY() modifies RSTMODS_SET.BIFPERSSPRST.
 *
 * This is recommended to use when setting more than one bitfield of RGU.RSTMODS_SET.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of RGU.RSTMODS_SET
 * @param bf_value new value for RSTMODS_SET.BIFPERSSPRST
 * @return new value of RGU.RSTMODS_SET
 */
__RGU_INLINE uint32_t RGU_RSTMODS_SET__BIFPERSSPRST__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~RGU_RSTMODS_SET__BIFPERSSPRST__Msk);
    reg = (reg | (RGU_RSTMODS_SET__BIFPERSSPRST__Shift((uint32_t)bf_value)));
    return reg;
}

/** RGU_RSTMODS_SET__BIFPERSSPRST__EXTRACT() extracts RSTMODS_SET.BIFPERSSPRST.
 *
 * This is recommended to use when extracting more than one bitfield from RGU.RSTMODS_SET.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of RGU.RSTMODS_SET
 * @return current value of RSTMODS_SET.BIFPERSSPRST
 */
__RGU_INLINE uint32_t RGU_RSTMODS_SET__BIFPERSSPRST__EXTRACT(uint32_t reg)
{
    reg = (reg & RGU_RSTMODS_SET__BIFPERSSPRST__Msk);
    reg = (reg >> RGU_RSTMODS_SET__BIFPERSSPRST__Pos);
    return (uint32_t)reg;
}

/* --------------------- RGU.RSTMODS_SET.BIFPERPMBUSRST --------------------- */

/**
<pre>
  RGU.RSTMODS_SET.BIFPERPMBUSRST:

    1: Performs a reset of the BIF PMBUS IF.

</pre> */

#define RGU_RSTMODS_SET__BIFPERPMBUSRST__Pos                    6                                                                      /*!< Right-most bit position of BIFPERPMBUSRST in RGU.RSTMODS_SET */
#define RGU_RSTMODS_SET__BIFPERPMBUSRST__Msk                    (0x00000001UL << RGU_RSTMODS_SET__BIFPERPMBUSRST__Pos)                 /*!< Mask for BIFPERPMBUSRST in RGU.RSTMODS_SET */
#define RGU_RSTMODS_SET__BIFPERPMBUSRST__Shift(v)               (((v) << RGU_RSTMODS_SET__BIFPERPMBUSRST__Pos) & RGU_RSTMODS_SET__BIFPERPMBUSRST__Msk) /*!< Shift value 'v' into BIFPERPMBUSRST and mask 'v' to fit it into BIFPERPMBUSRST field */

/** RGU_RSTMODS_SET__BIFPERPMBUSRST__SET() sets RSTMODS_SET.BIFPERPMBUSRST to given value.
 *
 * When writing to RSTMODS_SET.BIFPERPMBUSRST, this is recommended to use.
 *
 * @param bf_value new value for RSTMODS_SET.BIFPERPMBUSRST
 */
__RGU_INLINE void RGU_RSTMODS_SET__BIFPERPMBUSRST__SET(uint32_t bf_value)
{
    uint32_t reg = RGU_RSTMODS_SET__BIFPERPMBUSRST__Shift((uint32_t)bf_value);
    RGU_RSTMODS_SET__SET(reg);
}


/** RGU_RSTMODS_SET__BIFPERPMBUSRST__MODIFY() modifies RSTMODS_SET.BIFPERPMBUSRST.
 *
 * This is recommended to use when setting more than one bitfield of RGU.RSTMODS_SET.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of RGU.RSTMODS_SET
 * @param bf_value new value for RSTMODS_SET.BIFPERPMBUSRST
 * @return new value of RGU.RSTMODS_SET
 */
__RGU_INLINE uint32_t RGU_RSTMODS_SET__BIFPERPMBUSRST__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~RGU_RSTMODS_SET__BIFPERPMBUSRST__Msk);
    reg = (reg | (RGU_RSTMODS_SET__BIFPERPMBUSRST__Shift((uint32_t)bf_value)));
    return reg;
}

/** RGU_RSTMODS_SET__BIFPERPMBUSRST__EXTRACT() extracts RSTMODS_SET.BIFPERPMBUSRST.
 *
 * This is recommended to use when extracting more than one bitfield from RGU.RSTMODS_SET.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of RGU.RSTMODS_SET
 * @return current value of RSTMODS_SET.BIFPERPMBUSRST
 */
__RGU_INLINE uint32_t RGU_RSTMODS_SET__BIFPERPMBUSRST__EXTRACT(uint32_t reg)
{
    reg = (reg & RGU_RSTMODS_SET__BIFPERPMBUSRST__Msk);
    reg = (reg >> RGU_RSTMODS_SET__BIFPERPMBUSRST__Pos);
    return (uint32_t)reg;
}

/* --------------------- RGU.RSTMODS_SET.BIFPERSVIDRST --------------------- */

/**
<pre>
  RGU.RSTMODS_SET.BIFPERSVIDRST:

    1: Performs a reset of the BIF SVID IF.

</pre> */

#define RGU_RSTMODS_SET__BIFPERSVIDRST__Pos                     5                                                                      /*!< Right-most bit position of BIFPERSVIDRST in RGU.RSTMODS_SET */
#define RGU_RSTMODS_SET__BIFPERSVIDRST__Msk                     (0x00000001UL << RGU_RSTMODS_SET__BIFPERSVIDRST__Pos)                  /*!< Mask for BIFPERSVIDRST in RGU.RSTMODS_SET */
#define RGU_RSTMODS_SET__BIFPERSVIDRST__Shift(v)                (((v) << RGU_RSTMODS_SET__BIFPERSVIDRST__Pos) & RGU_RSTMODS_SET__BIFPERSVIDRST__Msk) /*!< Shift value 'v' into BIFPERSVIDRST and mask 'v' to fit it into BIFPERSVIDRST field */

/** RGU_RSTMODS_SET__BIFPERSVIDRST__SET() sets RSTMODS_SET.BIFPERSVIDRST to given value.
 *
 * When writing to RSTMODS_SET.BIFPERSVIDRST, this is recommended to use.
 *
 * @param bf_value new value for RSTMODS_SET.BIFPERSVIDRST
 */
__RGU_INLINE void RGU_RSTMODS_SET__BIFPERSVIDRST__SET(uint32_t bf_value)
{
    uint32_t reg = RGU_RSTMODS_SET__BIFPERSVIDRST__Shift((uint32_t)bf_value);
    RGU_RSTMODS_SET__SET(reg);
}


/** RGU_RSTMODS_SET__BIFPERSVIDRST__MODIFY() modifies RSTMODS_SET.BIFPERSVIDRST.
 *
 * This is recommended to use when setting more than one bitfield of RGU.RSTMODS_SET.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of RGU.RSTMODS_SET
 * @param bf_value new value for RSTMODS_SET.BIFPERSVIDRST
 * @return new value of RGU.RSTMODS_SET
 */
__RGU_INLINE uint32_t RGU_RSTMODS_SET__BIFPERSVIDRST__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~RGU_RSTMODS_SET__BIFPERSVIDRST__Msk);
    reg = (reg | (RGU_RSTMODS_SET__BIFPERSVIDRST__Shift((uint32_t)bf_value)));
    return reg;
}

/** RGU_RSTMODS_SET__BIFPERSVIDRST__EXTRACT() extracts RSTMODS_SET.BIFPERSVIDRST.
 *
 * This is recommended to use when extracting more than one bitfield from RGU.RSTMODS_SET.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of RGU.RSTMODS_SET
 * @return current value of RSTMODS_SET.BIFPERSVIDRST
 */
__RGU_INLINE uint32_t RGU_RSTMODS_SET__BIFPERSVIDRST__EXTRACT(uint32_t reg)
{
    reg = (reg & RGU_RSTMODS_SET__BIFPERSVIDRST__Msk);
    reg = (reg >> RGU_RSTMODS_SET__BIFPERSVIDRST__Pos);
    return (uint32_t)reg;
}

/* ----------------------- RGU.RSTMODS_SET.BIFREGRST ----------------------- */

/**
<pre>
  RGU.RSTMODS_SET.BIFREGRST:

    1: BIFREG Reset Signal set to 1.

</pre> */

#define RGU_RSTMODS_SET__BIFREGRST__Pos                         4                                                                      /*!< Right-most bit position of BIFREGRST in RGU.RSTMODS_SET */
#define RGU_RSTMODS_SET__BIFREGRST__Msk                         (0x00000001UL << RGU_RSTMODS_SET__BIFREGRST__Pos)                      /*!< Mask for BIFREGRST in RGU.RSTMODS_SET */
#define RGU_RSTMODS_SET__BIFREGRST__Shift(v)                    (((v) << RGU_RSTMODS_SET__BIFREGRST__Pos) & RGU_RSTMODS_SET__BIFREGRST__Msk) /*!< Shift value 'v' into BIFREGRST and mask 'v' to fit it into BIFREGRST field */

/** RGU_RSTMODS_SET__BIFREGRST__SET() sets RSTMODS_SET.BIFREGRST to given value.
 *
 * When writing to RSTMODS_SET.BIFREGRST, this is recommended to use.
 *
 * @param bf_value new value for RSTMODS_SET.BIFREGRST
 */
__RGU_INLINE void RGU_RSTMODS_SET__BIFREGRST__SET(uint32_t bf_value)
{
    uint32_t reg = RGU_RSTMODS_SET__BIFREGRST__Shift((uint32_t)bf_value);
    RGU_RSTMODS_SET__SET(reg);
}


/** RGU_RSTMODS_SET__BIFREGRST__MODIFY() modifies RSTMODS_SET.BIFREGRST.
 *
 * This is recommended to use when setting more than one bitfield of RGU.RSTMODS_SET.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of RGU.RSTMODS_SET
 * @param bf_value new value for RSTMODS_SET.BIFREGRST
 * @return new value of RGU.RSTMODS_SET
 */
__RGU_INLINE uint32_t RGU_RSTMODS_SET__BIFREGRST__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~RGU_RSTMODS_SET__BIFREGRST__Msk);
    reg = (reg | (RGU_RSTMODS_SET__BIFREGRST__Shift((uint32_t)bf_value)));
    return reg;
}

/** RGU_RSTMODS_SET__BIFREGRST__EXTRACT() extracts RSTMODS_SET.BIFREGRST.
 *
 * This is recommended to use when extracting more than one bitfield from RGU.RSTMODS_SET.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of RGU.RSTMODS_SET
 * @return current value of RSTMODS_SET.BIFREGRST
 */
__RGU_INLINE uint32_t RGU_RSTMODS_SET__BIFREGRST__EXTRACT(uint32_t reg)
{
    reg = (reg & RGU_RSTMODS_SET__BIFREGRST__Msk);
    reg = (reg >> RGU_RSTMODS_SET__BIFREGRST__Pos);
    return (uint32_t)reg;
}

/* ---------------------- RGU.RSTMODS_SET.CNFGOTP1WRST ---------------------- */

/**
<pre>
  RGU.RSTMODS_SET.CNFGOTP1WRST:

    1: Performs a reset of the OTP1 Wrapper.

</pre> */

#define RGU_RSTMODS_SET__CNFGOTP1WRST__Pos                      2                                                                      /*!< Right-most bit position of CNFGOTP1WRST in RGU.RSTMODS_SET */
#define RGU_RSTMODS_SET__CNFGOTP1WRST__Msk                      (0x00000001UL << RGU_RSTMODS_SET__CNFGOTP1WRST__Pos)                   /*!< Mask for CNFGOTP1WRST in RGU.RSTMODS_SET */
#define RGU_RSTMODS_SET__CNFGOTP1WRST__Shift(v)                 (((v) << RGU_RSTMODS_SET__CNFGOTP1WRST__Pos) & RGU_RSTMODS_SET__CNFGOTP1WRST__Msk) /*!< Shift value 'v' into CNFGOTP1WRST and mask 'v' to fit it into CNFGOTP1WRST field */

/** RGU_RSTMODS_SET__CNFGOTP1WRST__SET() sets RSTMODS_SET.CNFGOTP1WRST to given value.
 *
 * When writing to RSTMODS_SET.CNFGOTP1WRST, this is recommended to use.
 *
 * @param bf_value new value for RSTMODS_SET.CNFGOTP1WRST
 */
__RGU_INLINE void RGU_RSTMODS_SET__CNFGOTP1WRST__SET(uint32_t bf_value)
{
    uint32_t reg = RGU_RSTMODS_SET__CNFGOTP1WRST__Shift((uint32_t)bf_value);
    RGU_RSTMODS_SET__SET(reg);
}


/** RGU_RSTMODS_SET__CNFGOTP1WRST__MODIFY() modifies RSTMODS_SET.CNFGOTP1WRST.
 *
 * This is recommended to use when setting more than one bitfield of RGU.RSTMODS_SET.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of RGU.RSTMODS_SET
 * @param bf_value new value for RSTMODS_SET.CNFGOTP1WRST
 * @return new value of RGU.RSTMODS_SET
 */
__RGU_INLINE uint32_t RGU_RSTMODS_SET__CNFGOTP1WRST__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~RGU_RSTMODS_SET__CNFGOTP1WRST__Msk);
    reg = (reg | (RGU_RSTMODS_SET__CNFGOTP1WRST__Shift((uint32_t)bf_value)));
    return reg;
}

/** RGU_RSTMODS_SET__CNFGOTP1WRST__EXTRACT() extracts RSTMODS_SET.CNFGOTP1WRST.
 *
 * This is recommended to use when extracting more than one bitfield from RGU.RSTMODS_SET.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of RGU.RSTMODS_SET
 * @return current value of RSTMODS_SET.CNFGOTP1WRST
 */
__RGU_INLINE uint32_t RGU_RSTMODS_SET__CNFGOTP1WRST__EXTRACT(uint32_t reg)
{
    reg = (reg & RGU_RSTMODS_SET__CNFGOTP1WRST__Msk);
    reg = (reg >> RGU_RSTMODS_SET__CNFGOTP1WRST__Pos);
    return (uint32_t)reg;
}

/* ------------------------- RGU.RSTMODS_SET.DMARST ------------------------- */

/**
<pre>
  RGU.RSTMODS_SET.DMARST:

    1: Performs a reset of the DMA.

</pre> */

#define RGU_RSTMODS_SET__DMARST__Pos                            1                                                                      /*!< Right-most bit position of DMARST in RGU.RSTMODS_SET */
#define RGU_RSTMODS_SET__DMARST__Msk                            (0x00000001UL << RGU_RSTMODS_SET__DMARST__Pos)                         /*!< Mask for DMARST in RGU.RSTMODS_SET */
#define RGU_RSTMODS_SET__DMARST__Shift(v)                       (((v) << RGU_RSTMODS_SET__DMARST__Pos) & RGU_RSTMODS_SET__DMARST__Msk) /*!< Shift value 'v' into DMARST and mask 'v' to fit it into DMARST field */

/** RGU_RSTMODS_SET__DMARST__SET() sets RSTMODS_SET.DMARST to given value.
 *
 * When writing to RSTMODS_SET.DMARST, this is recommended to use.
 *
 * @param bf_value new value for RSTMODS_SET.DMARST
 */
__RGU_INLINE void RGU_RSTMODS_SET__DMARST__SET(uint32_t bf_value)
{
    uint32_t reg = RGU_RSTMODS_SET__DMARST__Shift((uint32_t)bf_value);
    RGU_RSTMODS_SET__SET(reg);
}


/** RGU_RSTMODS_SET__DMARST__MODIFY() modifies RSTMODS_SET.DMARST.
 *
 * This is recommended to use when setting more than one bitfield of RGU.RSTMODS_SET.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of RGU.RSTMODS_SET
 * @param bf_value new value for RSTMODS_SET.DMARST
 * @return new value of RGU.RSTMODS_SET
 */
__RGU_INLINE uint32_t RGU_RSTMODS_SET__DMARST__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~RGU_RSTMODS_SET__DMARST__Msk);
    reg = (reg | (RGU_RSTMODS_SET__DMARST__Shift((uint32_t)bf_value)));
    return reg;
}

/** RGU_RSTMODS_SET__DMARST__EXTRACT() extracts RSTMODS_SET.DMARST.
 *
 * This is recommended to use when extracting more than one bitfield from RGU.RSTMODS_SET.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of RGU.RSTMODS_SET
 * @return current value of RSTMODS_SET.DMARST
 */
__RGU_INLINE uint32_t RGU_RSTMODS_SET__DMARST__EXTRACT(uint32_t reg)
{
    reg = (reg & RGU_RSTMODS_SET__DMARST__Msk);
    reg = (reg >> RGU_RSTMODS_SET__DMARST__Pos);
    return (uint32_t)reg;
}

/* ------------------------- RGU.RSTMODS_SET.SWRST ------------------------- */

/**
<pre>
  RGU.RSTMODS_SET.SWRST:

    1: Enable Software Reset (CPU Subsystem reset enable).

</pre> */

#define RGU_RSTMODS_SET__SWRST__Pos                             0                                                                      /*!< Right-most bit position of SWRST in RGU.RSTMODS_SET */
#define RGU_RSTMODS_SET__SWRST__Msk                             (0x00000001UL << RGU_RSTMODS_SET__SWRST__Pos)                          /*!< Mask for SWRST in RGU.RSTMODS_SET */
#define RGU_RSTMODS_SET__SWRST__Shift(v)                        (((v) << RGU_RSTMODS_SET__SWRST__Pos) & RGU_RSTMODS_SET__SWRST__Msk)   /*!< Shift value 'v' into SWRST and mask 'v' to fit it into SWRST field */

/** RGU_RSTMODS_SET__SWRST__SET() sets RSTMODS_SET.SWRST to given value.
 *
 * When writing to RSTMODS_SET.SWRST, this is recommended to use.
 *
 * @param bf_value new value for RSTMODS_SET.SWRST
 */
__RGU_INLINE void RGU_RSTMODS_SET__SWRST__SET(uint32_t bf_value)
{
    uint32_t reg = RGU_RSTMODS_SET__SWRST__Shift((uint32_t)bf_value);
    RGU_RSTMODS_SET__SET(reg);
}


/** RGU_RSTMODS_SET__SWRST__MODIFY() modifies RSTMODS_SET.SWRST.
 *
 * This is recommended to use when setting more than one bitfield of RGU.RSTMODS_SET.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of RGU.RSTMODS_SET
 * @param bf_value new value for RSTMODS_SET.SWRST
 * @return new value of RGU.RSTMODS_SET
 */
__RGU_INLINE uint32_t RGU_RSTMODS_SET__SWRST__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~RGU_RSTMODS_SET__SWRST__Msk);
    reg = (reg | (RGU_RSTMODS_SET__SWRST__Shift((uint32_t)bf_value)));
    return reg;
}

/** RGU_RSTMODS_SET__SWRST__EXTRACT() extracts RSTMODS_SET.SWRST.
 *
 * This is recommended to use when extracting more than one bitfield from RGU.RSTMODS_SET.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of RGU.RSTMODS_SET
 * @return current value of RSTMODS_SET.SWRST
 */
__RGU_INLINE uint32_t RGU_RSTMODS_SET__SWRST__EXTRACT(uint32_t reg)
{
    reg = (reg & RGU_RSTMODS_SET__SWRST__Msk);
    reg = (reg >> RGU_RSTMODS_SET__SWRST__Pos);
    return (uint32_t)reg;
}

/* -------------------------------------------------------------------------- */
/*                        RSTMODS_CLR member of RGU_t                        */
/* -------------------------------------------------------------------------- */

/** __RGU_RSTMODS_CLR__ADDRESS returns the address of member RSTMODS_CLR.
 *
 * As indicated by the __ prefix, this is not intended for use by the FW. It is
 * here for readability only.
 *
 * @return address of RSTMODS_CLR
 */
__RGU_INLINE uint32_t* __RGU_RSTMODS_CLR__ADDRESS(void)
{
    return (uint32_t*)((uint32_t)__RGU_BASE_PTR() + (uint32_t)(offsetof(RGU_t, RSTMODS_CLR)));
}

/** RGU_RSTMODS_CLR__SET() sets RSTMODS_CLR to given value.
 *
 * When writing to RSTMODS_CLR, this is mandatory to use.
 *
 * @param value new value for RSTMODS_CLR
 */
__RGU_INLINE void RGU_RSTMODS_CLR__SET(uint32_t value)
{
    HAL_SET32(__RGU_RSTMODS_CLR__ADDRESS(), value);
}


/* ------------------------ RGU.RSTMODS_CLR.GPIO1RST ------------------------ */

/**
<pre>
  RGU.RSTMODS_CLR.GPIO1RST:

    1: Performs a reset of the GPIO1 block.

</pre> */

#define RGU_RSTMODS_CLR__GPIO1RST__Pos                          16                                                                     /*!< Right-most bit position of GPIO1RST in RGU.RSTMODS_CLR */
#define RGU_RSTMODS_CLR__GPIO1RST__Msk                          (0x00000001UL << RGU_RSTMODS_CLR__GPIO1RST__Pos)                       /*!< Mask for GPIO1RST in RGU.RSTMODS_CLR */
#define RGU_RSTMODS_CLR__GPIO1RST__Shift(v)                     (((v) << RGU_RSTMODS_CLR__GPIO1RST__Pos) & RGU_RSTMODS_CLR__GPIO1RST__Msk) /*!< Shift value 'v' into GPIO1RST and mask 'v' to fit it into GPIO1RST field */

/** RGU_RSTMODS_CLR__GPIO1RST__SET() sets RSTMODS_CLR.GPIO1RST to given value.
 *
 * When writing to RSTMODS_CLR.GPIO1RST, this is recommended to use.
 *
 * @param bf_value new value for RSTMODS_CLR.GPIO1RST
 */
__RGU_INLINE void RGU_RSTMODS_CLR__GPIO1RST__SET(uint32_t bf_value)
{
    uint32_t reg = RGU_RSTMODS_CLR__GPIO1RST__Shift((uint32_t)bf_value);
    RGU_RSTMODS_CLR__SET(reg);
}


/** RGU_RSTMODS_CLR__GPIO1RST__MODIFY() modifies RSTMODS_CLR.GPIO1RST.
 *
 * This is recommended to use when setting more than one bitfield of RGU.RSTMODS_CLR.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of RGU.RSTMODS_CLR
 * @param bf_value new value for RSTMODS_CLR.GPIO1RST
 * @return new value of RGU.RSTMODS_CLR
 */
__RGU_INLINE uint32_t RGU_RSTMODS_CLR__GPIO1RST__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~RGU_RSTMODS_CLR__GPIO1RST__Msk);
    reg = (reg | (RGU_RSTMODS_CLR__GPIO1RST__Shift((uint32_t)bf_value)));
    return reg;
}

/** RGU_RSTMODS_CLR__GPIO1RST__EXTRACT() extracts RSTMODS_CLR.GPIO1RST.
 *
 * This is recommended to use when extracting more than one bitfield from RGU.RSTMODS_CLR.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of RGU.RSTMODS_CLR
 * @return current value of RSTMODS_CLR.GPIO1RST
 */
__RGU_INLINE uint32_t RGU_RSTMODS_CLR__GPIO1RST__EXTRACT(uint32_t reg)
{
    reg = (reg & RGU_RSTMODS_CLR__GPIO1RST__Msk);
    reg = (reg >> RGU_RSTMODS_CLR__GPIO1RST__Pos);
    return (uint32_t)reg;
}

/* ------------------------ RGU.RSTMODS_CLR.GPIO0RST ------------------------ */

/**
<pre>
  RGU.RSTMODS_CLR.GPIO0RST:

    1: Performs a reset of the GPIO0 block.

</pre> */

#define RGU_RSTMODS_CLR__GPIO0RST__Pos                          15                                                                     /*!< Right-most bit position of GPIO0RST in RGU.RSTMODS_CLR */
#define RGU_RSTMODS_CLR__GPIO0RST__Msk                          (0x00000001UL << RGU_RSTMODS_CLR__GPIO0RST__Pos)                       /*!< Mask for GPIO0RST in RGU.RSTMODS_CLR */
#define RGU_RSTMODS_CLR__GPIO0RST__Shift(v)                     (((v) << RGU_RSTMODS_CLR__GPIO0RST__Pos) & RGU_RSTMODS_CLR__GPIO0RST__Msk) /*!< Shift value 'v' into GPIO0RST and mask 'v' to fit it into GPIO0RST field */

/** RGU_RSTMODS_CLR__GPIO0RST__SET() sets RSTMODS_CLR.GPIO0RST to given value.
 *
 * When writing to RSTMODS_CLR.GPIO0RST, this is recommended to use.
 *
 * @param bf_value new value for RSTMODS_CLR.GPIO0RST
 */
__RGU_INLINE void RGU_RSTMODS_CLR__GPIO0RST__SET(uint32_t bf_value)
{
    uint32_t reg = RGU_RSTMODS_CLR__GPIO0RST__Shift((uint32_t)bf_value);
    RGU_RSTMODS_CLR__SET(reg);
}


/** RGU_RSTMODS_CLR__GPIO0RST__MODIFY() modifies RSTMODS_CLR.GPIO0RST.
 *
 * This is recommended to use when setting more than one bitfield of RGU.RSTMODS_CLR.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of RGU.RSTMODS_CLR
 * @param bf_value new value for RSTMODS_CLR.GPIO0RST
 * @return new value of RGU.RSTMODS_CLR
 */
__RGU_INLINE uint32_t RGU_RSTMODS_CLR__GPIO0RST__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~RGU_RSTMODS_CLR__GPIO0RST__Msk);
    reg = (reg | (RGU_RSTMODS_CLR__GPIO0RST__Shift((uint32_t)bf_value)));
    return reg;
}

/** RGU_RSTMODS_CLR__GPIO0RST__EXTRACT() extracts RSTMODS_CLR.GPIO0RST.
 *
 * This is recommended to use when extracting more than one bitfield from RGU.RSTMODS_CLR.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of RGU.RSTMODS_CLR
 * @return current value of RSTMODS_CLR.GPIO0RST
 */
__RGU_INLINE uint32_t RGU_RSTMODS_CLR__GPIO0RST__EXTRACT(uint32_t reg)
{
    reg = (reg & RGU_RSTMODS_CLR__GPIO0RST__Msk);
    reg = (reg >> RGU_RSTMODS_CLR__GPIO0RST__Pos);
    return (uint32_t)reg;
}

/* ------------------------ RGU.RSTMODS_CLR.WDTIFRST ------------------------ */

/**
<pre>
  RGU.RSTMODS_CLR.WDTIFRST:

    1: Performs a reset of the WDT IF block.

</pre> */

#define RGU_RSTMODS_CLR__WDTIFRST__Pos                          14                                                                     /*!< Right-most bit position of WDTIFRST in RGU.RSTMODS_CLR */
#define RGU_RSTMODS_CLR__WDTIFRST__Msk                          (0x00000001UL << RGU_RSTMODS_CLR__WDTIFRST__Pos)                       /*!< Mask for WDTIFRST in RGU.RSTMODS_CLR */
#define RGU_RSTMODS_CLR__WDTIFRST__Shift(v)                     (((v) << RGU_RSTMODS_CLR__WDTIFRST__Pos) & RGU_RSTMODS_CLR__WDTIFRST__Msk) /*!< Shift value 'v' into WDTIFRST and mask 'v' to fit it into WDTIFRST field */

/** RGU_RSTMODS_CLR__WDTIFRST__SET() sets RSTMODS_CLR.WDTIFRST to given value.
 *
 * When writing to RSTMODS_CLR.WDTIFRST, this is recommended to use.
 *
 * @param bf_value new value for RSTMODS_CLR.WDTIFRST
 */
__RGU_INLINE void RGU_RSTMODS_CLR__WDTIFRST__SET(uint32_t bf_value)
{
    uint32_t reg = RGU_RSTMODS_CLR__WDTIFRST__Shift((uint32_t)bf_value);
    RGU_RSTMODS_CLR__SET(reg);
}


/** RGU_RSTMODS_CLR__WDTIFRST__MODIFY() modifies RSTMODS_CLR.WDTIFRST.
 *
 * This is recommended to use when setting more than one bitfield of RGU.RSTMODS_CLR.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of RGU.RSTMODS_CLR
 * @param bf_value new value for RSTMODS_CLR.WDTIFRST
 * @return new value of RGU.RSTMODS_CLR
 */
__RGU_INLINE uint32_t RGU_RSTMODS_CLR__WDTIFRST__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~RGU_RSTMODS_CLR__WDTIFRST__Msk);
    reg = (reg | (RGU_RSTMODS_CLR__WDTIFRST__Shift((uint32_t)bf_value)));
    return reg;
}

/** RGU_RSTMODS_CLR__WDTIFRST__EXTRACT() extracts RSTMODS_CLR.WDTIFRST.
 *
 * This is recommended to use when extracting more than one bitfield from RGU.RSTMODS_CLR.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of RGU.RSTMODS_CLR
 * @return current value of RSTMODS_CLR.WDTIFRST
 */
__RGU_INLINE uint32_t RGU_RSTMODS_CLR__WDTIFRST__EXTRACT(uint32_t reg)
{
    reg = (reg & RGU_RSTMODS_CLR__WDTIFRST__Msk);
    reg = (reg >> RGU_RSTMODS_CLR__WDTIFRST__Pos);
    return (uint32_t)reg;
}

/* ----------------------- RGU.RSTMODS_CLR.DTIMER3RST ----------------------- */

/**
<pre>
  RGU.RSTMODS_CLR.DTIMER3RST:

    1: Performs a reset of the DTIMER2 block.

</pre> */

#define RGU_RSTMODS_CLR__DTIMER3RST__Pos                        13                                                                     /*!< Right-most bit position of DTIMER3RST in RGU.RSTMODS_CLR */
#define RGU_RSTMODS_CLR__DTIMER3RST__Msk                        (0x00000001UL << RGU_RSTMODS_CLR__DTIMER3RST__Pos)                     /*!< Mask for DTIMER3RST in RGU.RSTMODS_CLR */
#define RGU_RSTMODS_CLR__DTIMER3RST__Shift(v)                   (((v) << RGU_RSTMODS_CLR__DTIMER3RST__Pos) & RGU_RSTMODS_CLR__DTIMER3RST__Msk) /*!< Shift value 'v' into DTIMER3RST and mask 'v' to fit it into DTIMER3RST field */

/** RGU_RSTMODS_CLR__DTIMER3RST__SET() sets RSTMODS_CLR.DTIMER3RST to given value.
 *
 * When writing to RSTMODS_CLR.DTIMER3RST, this is recommended to use.
 *
 * @param bf_value new value for RSTMODS_CLR.DTIMER3RST
 */
__RGU_INLINE void RGU_RSTMODS_CLR__DTIMER3RST__SET(uint32_t bf_value)
{
    uint32_t reg = RGU_RSTMODS_CLR__DTIMER3RST__Shift((uint32_t)bf_value);
    RGU_RSTMODS_CLR__SET(reg);
}


/** RGU_RSTMODS_CLR__DTIMER3RST__MODIFY() modifies RSTMODS_CLR.DTIMER3RST.
 *
 * This is recommended to use when setting more than one bitfield of RGU.RSTMODS_CLR.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of RGU.RSTMODS_CLR
 * @param bf_value new value for RSTMODS_CLR.DTIMER3RST
 * @return new value of RGU.RSTMODS_CLR
 */
__RGU_INLINE uint32_t RGU_RSTMODS_CLR__DTIMER3RST__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~RGU_RSTMODS_CLR__DTIMER3RST__Msk);
    reg = (reg | (RGU_RSTMODS_CLR__DTIMER3RST__Shift((uint32_t)bf_value)));
    return reg;
}

/** RGU_RSTMODS_CLR__DTIMER3RST__EXTRACT() extracts RSTMODS_CLR.DTIMER3RST.
 *
 * This is recommended to use when extracting more than one bitfield from RGU.RSTMODS_CLR.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of RGU.RSTMODS_CLR
 * @return current value of RSTMODS_CLR.DTIMER3RST
 */
__RGU_INLINE uint32_t RGU_RSTMODS_CLR__DTIMER3RST__EXTRACT(uint32_t reg)
{
    reg = (reg & RGU_RSTMODS_CLR__DTIMER3RST__Msk);
    reg = (reg >> RGU_RSTMODS_CLR__DTIMER3RST__Pos);
    return (uint32_t)reg;
}

/* ----------------------- RGU.RSTMODS_CLR.DTIMER2RST ----------------------- */

/**
<pre>
  RGU.RSTMODS_CLR.DTIMER2RST:

    1: Performs a reset of the DTIMER2 block.

</pre> */

#define RGU_RSTMODS_CLR__DTIMER2RST__Pos                        12                                                                     /*!< Right-most bit position of DTIMER2RST in RGU.RSTMODS_CLR */
#define RGU_RSTMODS_CLR__DTIMER2RST__Msk                        (0x00000001UL << RGU_RSTMODS_CLR__DTIMER2RST__Pos)                     /*!< Mask for DTIMER2RST in RGU.RSTMODS_CLR */
#define RGU_RSTMODS_CLR__DTIMER2RST__Shift(v)                   (((v) << RGU_RSTMODS_CLR__DTIMER2RST__Pos) & RGU_RSTMODS_CLR__DTIMER2RST__Msk) /*!< Shift value 'v' into DTIMER2RST and mask 'v' to fit it into DTIMER2RST field */

/** RGU_RSTMODS_CLR__DTIMER2RST__SET() sets RSTMODS_CLR.DTIMER2RST to given value.
 *
 * When writing to RSTMODS_CLR.DTIMER2RST, this is recommended to use.
 *
 * @param bf_value new value for RSTMODS_CLR.DTIMER2RST
 */
__RGU_INLINE void RGU_RSTMODS_CLR__DTIMER2RST__SET(uint32_t bf_value)
{
    uint32_t reg = RGU_RSTMODS_CLR__DTIMER2RST__Shift((uint32_t)bf_value);
    RGU_RSTMODS_CLR__SET(reg);
}


/** RGU_RSTMODS_CLR__DTIMER2RST__MODIFY() modifies RSTMODS_CLR.DTIMER2RST.
 *
 * This is recommended to use when setting more than one bitfield of RGU.RSTMODS_CLR.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of RGU.RSTMODS_CLR
 * @param bf_value new value for RSTMODS_CLR.DTIMER2RST
 * @return new value of RGU.RSTMODS_CLR
 */
__RGU_INLINE uint32_t RGU_RSTMODS_CLR__DTIMER2RST__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~RGU_RSTMODS_CLR__DTIMER2RST__Msk);
    reg = (reg | (RGU_RSTMODS_CLR__DTIMER2RST__Shift((uint32_t)bf_value)));
    return reg;
}

/** RGU_RSTMODS_CLR__DTIMER2RST__EXTRACT() extracts RSTMODS_CLR.DTIMER2RST.
 *
 * This is recommended to use when extracting more than one bitfield from RGU.RSTMODS_CLR.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of RGU.RSTMODS_CLR
 * @return current value of RSTMODS_CLR.DTIMER2RST
 */
__RGU_INLINE uint32_t RGU_RSTMODS_CLR__DTIMER2RST__EXTRACT(uint32_t reg)
{
    reg = (reg & RGU_RSTMODS_CLR__DTIMER2RST__Msk);
    reg = (reg >> RGU_RSTMODS_CLR__DTIMER2RST__Pos);
    return (uint32_t)reg;
}

/* ----------------------- RGU.RSTMODS_CLR.DTIMER1RST ----------------------- */

/**
<pre>
  RGU.RSTMODS_CLR.DTIMER1RST:

    1: Performs a reset of the DTIMER block.

</pre> */

#define RGU_RSTMODS_CLR__DTIMER1RST__Pos                        11                                                                     /*!< Right-most bit position of DTIMER1RST in RGU.RSTMODS_CLR */
#define RGU_RSTMODS_CLR__DTIMER1RST__Msk                        (0x00000001UL << RGU_RSTMODS_CLR__DTIMER1RST__Pos)                     /*!< Mask for DTIMER1RST in RGU.RSTMODS_CLR */
#define RGU_RSTMODS_CLR__DTIMER1RST__Shift(v)                   (((v) << RGU_RSTMODS_CLR__DTIMER1RST__Pos) & RGU_RSTMODS_CLR__DTIMER1RST__Msk) /*!< Shift value 'v' into DTIMER1RST and mask 'v' to fit it into DTIMER1RST field */

/** RGU_RSTMODS_CLR__DTIMER1RST__SET() sets RSTMODS_CLR.DTIMER1RST to given value.
 *
 * When writing to RSTMODS_CLR.DTIMER1RST, this is recommended to use.
 *
 * @param bf_value new value for RSTMODS_CLR.DTIMER1RST
 */
__RGU_INLINE void RGU_RSTMODS_CLR__DTIMER1RST__SET(uint32_t bf_value)
{
    uint32_t reg = RGU_RSTMODS_CLR__DTIMER1RST__Shift((uint32_t)bf_value);
    RGU_RSTMODS_CLR__SET(reg);
}


/** RGU_RSTMODS_CLR__DTIMER1RST__MODIFY() modifies RSTMODS_CLR.DTIMER1RST.
 *
 * This is recommended to use when setting more than one bitfield of RGU.RSTMODS_CLR.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of RGU.RSTMODS_CLR
 * @param bf_value new value for RSTMODS_CLR.DTIMER1RST
 * @return new value of RGU.RSTMODS_CLR
 */
__RGU_INLINE uint32_t RGU_RSTMODS_CLR__DTIMER1RST__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~RGU_RSTMODS_CLR__DTIMER1RST__Msk);
    reg = (reg | (RGU_RSTMODS_CLR__DTIMER1RST__Shift((uint32_t)bf_value)));
    return reg;
}

/** RGU_RSTMODS_CLR__DTIMER1RST__EXTRACT() extracts RSTMODS_CLR.DTIMER1RST.
 *
 * This is recommended to use when extracting more than one bitfield from RGU.RSTMODS_CLR.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of RGU.RSTMODS_CLR
 * @return current value of RSTMODS_CLR.DTIMER1RST
 */
__RGU_INLINE uint32_t RGU_RSTMODS_CLR__DTIMER1RST__EXTRACT(uint32_t reg)
{
    reg = (reg & RGU_RSTMODS_CLR__DTIMER1RST__Msk);
    reg = (reg >> RGU_RSTMODS_CLR__DTIMER1RST__Pos);
    return (uint32_t)reg;
}

/* --------------------- RGU.RSTMODS_CLR.BIFPERUARTRST --------------------- */

/**
<pre>
  RGU.RSTMODS_CLR.BIFPERUARTRST:

    1: Performs a reset of the BIF UART IF.

</pre> */

#define RGU_RSTMODS_CLR__BIFPERUARTRST__Pos                     9                                                                      /*!< Right-most bit position of BIFPERUARTRST in RGU.RSTMODS_CLR */
#define RGU_RSTMODS_CLR__BIFPERUARTRST__Msk                     (0x00000001UL << RGU_RSTMODS_CLR__BIFPERUARTRST__Pos)                  /*!< Mask for BIFPERUARTRST in RGU.RSTMODS_CLR */
#define RGU_RSTMODS_CLR__BIFPERUARTRST__Shift(v)                (((v) << RGU_RSTMODS_CLR__BIFPERUARTRST__Pos) & RGU_RSTMODS_CLR__BIFPERUARTRST__Msk) /*!< Shift value 'v' into BIFPERUARTRST and mask 'v' to fit it into BIFPERUARTRST field */

/** RGU_RSTMODS_CLR__BIFPERUARTRST__SET() sets RSTMODS_CLR.BIFPERUARTRST to given value.
 *
 * When writing to RSTMODS_CLR.BIFPERUARTRST, this is recommended to use.
 *
 * @param bf_value new value for RSTMODS_CLR.BIFPERUARTRST
 */
__RGU_INLINE void RGU_RSTMODS_CLR__BIFPERUARTRST__SET(uint32_t bf_value)
{
    uint32_t reg = RGU_RSTMODS_CLR__BIFPERUARTRST__Shift((uint32_t)bf_value);
    RGU_RSTMODS_CLR__SET(reg);
}


/** RGU_RSTMODS_CLR__BIFPERUARTRST__MODIFY() modifies RSTMODS_CLR.BIFPERUARTRST.
 *
 * This is recommended to use when setting more than one bitfield of RGU.RSTMODS_CLR.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of RGU.RSTMODS_CLR
 * @param bf_value new value for RSTMODS_CLR.BIFPERUARTRST
 * @return new value of RGU.RSTMODS_CLR
 */
__RGU_INLINE uint32_t RGU_RSTMODS_CLR__BIFPERUARTRST__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~RGU_RSTMODS_CLR__BIFPERUARTRST__Msk);
    reg = (reg | (RGU_RSTMODS_CLR__BIFPERUARTRST__Shift((uint32_t)bf_value)));
    return reg;
}

/** RGU_RSTMODS_CLR__BIFPERUARTRST__EXTRACT() extracts RSTMODS_CLR.BIFPERUARTRST.
 *
 * This is recommended to use when extracting more than one bitfield from RGU.RSTMODS_CLR.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of RGU.RSTMODS_CLR
 * @return current value of RSTMODS_CLR.BIFPERUARTRST
 */
__RGU_INLINE uint32_t RGU_RSTMODS_CLR__BIFPERUARTRST__EXTRACT(uint32_t reg)
{
    reg = (reg & RGU_RSTMODS_CLR__BIFPERUARTRST__Msk);
    reg = (reg >> RGU_RSTMODS_CLR__BIFPERUARTRST__Pos);
    return (uint32_t)reg;
}

/* ---------------------- RGU.RSTMODS_CLR.BIFPERI2CRST ---------------------- */

/**
<pre>
  RGU.RSTMODS_CLR.BIFPERI2CRST:

    1: Performs a reset of the BIF I2C IF.

</pre> */

#define RGU_RSTMODS_CLR__BIFPERI2CRST__Pos                      8                                                                      /*!< Right-most bit position of BIFPERI2CRST in RGU.RSTMODS_CLR */
#define RGU_RSTMODS_CLR__BIFPERI2CRST__Msk                      (0x00000001UL << RGU_RSTMODS_CLR__BIFPERI2CRST__Pos)                   /*!< Mask for BIFPERI2CRST in RGU.RSTMODS_CLR */
#define RGU_RSTMODS_CLR__BIFPERI2CRST__Shift(v)                 (((v) << RGU_RSTMODS_CLR__BIFPERI2CRST__Pos) & RGU_RSTMODS_CLR__BIFPERI2CRST__Msk) /*!< Shift value 'v' into BIFPERI2CRST and mask 'v' to fit it into BIFPERI2CRST field */

/** RGU_RSTMODS_CLR__BIFPERI2CRST__SET() sets RSTMODS_CLR.BIFPERI2CRST to given value.
 *
 * When writing to RSTMODS_CLR.BIFPERI2CRST, this is recommended to use.
 *
 * @param bf_value new value for RSTMODS_CLR.BIFPERI2CRST
 */
__RGU_INLINE void RGU_RSTMODS_CLR__BIFPERI2CRST__SET(uint32_t bf_value)
{
    uint32_t reg = RGU_RSTMODS_CLR__BIFPERI2CRST__Shift((uint32_t)bf_value);
    RGU_RSTMODS_CLR__SET(reg);
}


/** RGU_RSTMODS_CLR__BIFPERI2CRST__MODIFY() modifies RSTMODS_CLR.BIFPERI2CRST.
 *
 * This is recommended to use when setting more than one bitfield of RGU.RSTMODS_CLR.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of RGU.RSTMODS_CLR
 * @param bf_value new value for RSTMODS_CLR.BIFPERI2CRST
 * @return new value of RGU.RSTMODS_CLR
 */
__RGU_INLINE uint32_t RGU_RSTMODS_CLR__BIFPERI2CRST__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~RGU_RSTMODS_CLR__BIFPERI2CRST__Msk);
    reg = (reg | (RGU_RSTMODS_CLR__BIFPERI2CRST__Shift((uint32_t)bf_value)));
    return reg;
}

/** RGU_RSTMODS_CLR__BIFPERI2CRST__EXTRACT() extracts RSTMODS_CLR.BIFPERI2CRST.
 *
 * This is recommended to use when extracting more than one bitfield from RGU.RSTMODS_CLR.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of RGU.RSTMODS_CLR
 * @return current value of RSTMODS_CLR.BIFPERI2CRST
 */
__RGU_INLINE uint32_t RGU_RSTMODS_CLR__BIFPERI2CRST__EXTRACT(uint32_t reg)
{
    reg = (reg & RGU_RSTMODS_CLR__BIFPERI2CRST__Msk);
    reg = (reg >> RGU_RSTMODS_CLR__BIFPERI2CRST__Pos);
    return (uint32_t)reg;
}

/* ---------------------- RGU.RSTMODS_CLR.BIFPERSSPRST ---------------------- */

/**
<pre>
  RGU.RSTMODS_CLR.BIFPERSSPRST:

    1: Performs a reset of the BIF SSP IF.

</pre> */

#define RGU_RSTMODS_CLR__BIFPERSSPRST__Pos                      7                                                                      /*!< Right-most bit position of BIFPERSSPRST in RGU.RSTMODS_CLR */
#define RGU_RSTMODS_CLR__BIFPERSSPRST__Msk                      (0x00000001UL << RGU_RSTMODS_CLR__BIFPERSSPRST__Pos)                   /*!< Mask for BIFPERSSPRST in RGU.RSTMODS_CLR */
#define RGU_RSTMODS_CLR__BIFPERSSPRST__Shift(v)                 (((v) << RGU_RSTMODS_CLR__BIFPERSSPRST__Pos) & RGU_RSTMODS_CLR__BIFPERSSPRST__Msk) /*!< Shift value 'v' into BIFPERSSPRST and mask 'v' to fit it into BIFPERSSPRST field */

/** RGU_RSTMODS_CLR__BIFPERSSPRST__SET() sets RSTMODS_CLR.BIFPERSSPRST to given value.
 *
 * When writing to RSTMODS_CLR.BIFPERSSPRST, this is recommended to use.
 *
 * @param bf_value new value for RSTMODS_CLR.BIFPERSSPRST
 */
__RGU_INLINE void RGU_RSTMODS_CLR__BIFPERSSPRST__SET(uint32_t bf_value)
{
    uint32_t reg = RGU_RSTMODS_CLR__BIFPERSSPRST__Shift((uint32_t)bf_value);
    RGU_RSTMODS_CLR__SET(reg);
}


/** RGU_RSTMODS_CLR__BIFPERSSPRST__MODIFY() modifies RSTMODS_CLR.BIFPERSSPRST.
 *
 * This is recommended to use when setting more than one bitfield of RGU.RSTMODS_CLR.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of RGU.RSTMODS_CLR
 * @param bf_value new value for RSTMODS_CLR.BIFPERSSPRST
 * @return new value of RGU.RSTMODS_CLR
 */
__RGU_INLINE uint32_t RGU_RSTMODS_CLR__BIFPERSSPRST__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~RGU_RSTMODS_CLR__BIFPERSSPRST__Msk);
    reg = (reg | (RGU_RSTMODS_CLR__BIFPERSSPRST__Shift((uint32_t)bf_value)));
    return reg;
}

/** RGU_RSTMODS_CLR__BIFPERSSPRST__EXTRACT() extracts RSTMODS_CLR.BIFPERSSPRST.
 *
 * This is recommended to use when extracting more than one bitfield from RGU.RSTMODS_CLR.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of RGU.RSTMODS_CLR
 * @return current value of RSTMODS_CLR.BIFPERSSPRST
 */
__RGU_INLINE uint32_t RGU_RSTMODS_CLR__BIFPERSSPRST__EXTRACT(uint32_t reg)
{
    reg = (reg & RGU_RSTMODS_CLR__BIFPERSSPRST__Msk);
    reg = (reg >> RGU_RSTMODS_CLR__BIFPERSSPRST__Pos);
    return (uint32_t)reg;
}

/* --------------------- RGU.RSTMODS_CLR.BIFPERPMBUSRST --------------------- */

/**
<pre>
  RGU.RSTMODS_CLR.BIFPERPMBUSRST:

    1: Performs a reset of the BIF PMBUS IF.

</pre> */

#define RGU_RSTMODS_CLR__BIFPERPMBUSRST__Pos                    6                                                                      /*!< Right-most bit position of BIFPERPMBUSRST in RGU.RSTMODS_CLR */
#define RGU_RSTMODS_CLR__BIFPERPMBUSRST__Msk                    (0x00000001UL << RGU_RSTMODS_CLR__BIFPERPMBUSRST__Pos)                 /*!< Mask for BIFPERPMBUSRST in RGU.RSTMODS_CLR */
#define RGU_RSTMODS_CLR__BIFPERPMBUSRST__Shift(v)               (((v) << RGU_RSTMODS_CLR__BIFPERPMBUSRST__Pos) & RGU_RSTMODS_CLR__BIFPERPMBUSRST__Msk) /*!< Shift value 'v' into BIFPERPMBUSRST and mask 'v' to fit it into BIFPERPMBUSRST field */

/** RGU_RSTMODS_CLR__BIFPERPMBUSRST__SET() sets RSTMODS_CLR.BIFPERPMBUSRST to given value.
 *
 * When writing to RSTMODS_CLR.BIFPERPMBUSRST, this is recommended to use.
 *
 * @param bf_value new value for RSTMODS_CLR.BIFPERPMBUSRST
 */
__RGU_INLINE void RGU_RSTMODS_CLR__BIFPERPMBUSRST__SET(uint32_t bf_value)
{
    uint32_t reg = RGU_RSTMODS_CLR__BIFPERPMBUSRST__Shift((uint32_t)bf_value);
    RGU_RSTMODS_CLR__SET(reg);
}


/** RGU_RSTMODS_CLR__BIFPERPMBUSRST__MODIFY() modifies RSTMODS_CLR.BIFPERPMBUSRST.
 *
 * This is recommended to use when setting more than one bitfield of RGU.RSTMODS_CLR.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of RGU.RSTMODS_CLR
 * @param bf_value new value for RSTMODS_CLR.BIFPERPMBUSRST
 * @return new value of RGU.RSTMODS_CLR
 */
__RGU_INLINE uint32_t RGU_RSTMODS_CLR__BIFPERPMBUSRST__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~RGU_RSTMODS_CLR__BIFPERPMBUSRST__Msk);
    reg = (reg | (RGU_RSTMODS_CLR__BIFPERPMBUSRST__Shift((uint32_t)bf_value)));
    return reg;
}

/** RGU_RSTMODS_CLR__BIFPERPMBUSRST__EXTRACT() extracts RSTMODS_CLR.BIFPERPMBUSRST.
 *
 * This is recommended to use when extracting more than one bitfield from RGU.RSTMODS_CLR.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of RGU.RSTMODS_CLR
 * @return current value of RSTMODS_CLR.BIFPERPMBUSRST
 */
__RGU_INLINE uint32_t RGU_RSTMODS_CLR__BIFPERPMBUSRST__EXTRACT(uint32_t reg)
{
    reg = (reg & RGU_RSTMODS_CLR__BIFPERPMBUSRST__Msk);
    reg = (reg >> RGU_RSTMODS_CLR__BIFPERPMBUSRST__Pos);
    return (uint32_t)reg;
}

/* --------------------- RGU.RSTMODS_CLR.BIFPERSVIDRST --------------------- */

/**
<pre>
  RGU.RSTMODS_CLR.BIFPERSVIDRST:

    1: Performs a reset of the BIF SVID IF.

</pre> */

#define RGU_RSTMODS_CLR__BIFPERSVIDRST__Pos                     5                                                                      /*!< Right-most bit position of BIFPERSVIDRST in RGU.RSTMODS_CLR */
#define RGU_RSTMODS_CLR__BIFPERSVIDRST__Msk                     (0x00000001UL << RGU_RSTMODS_CLR__BIFPERSVIDRST__Pos)                  /*!< Mask for BIFPERSVIDRST in RGU.RSTMODS_CLR */
#define RGU_RSTMODS_CLR__BIFPERSVIDRST__Shift(v)                (((v) << RGU_RSTMODS_CLR__BIFPERSVIDRST__Pos) & RGU_RSTMODS_CLR__BIFPERSVIDRST__Msk) /*!< Shift value 'v' into BIFPERSVIDRST and mask 'v' to fit it into BIFPERSVIDRST field */

/** RGU_RSTMODS_CLR__BIFPERSVIDRST__SET() sets RSTMODS_CLR.BIFPERSVIDRST to given value.
 *
 * When writing to RSTMODS_CLR.BIFPERSVIDRST, this is recommended to use.
 *
 * @param bf_value new value for RSTMODS_CLR.BIFPERSVIDRST
 */
__RGU_INLINE void RGU_RSTMODS_CLR__BIFPERSVIDRST__SET(uint32_t bf_value)
{
    uint32_t reg = RGU_RSTMODS_CLR__BIFPERSVIDRST__Shift((uint32_t)bf_value);
    RGU_RSTMODS_CLR__SET(reg);
}


/** RGU_RSTMODS_CLR__BIFPERSVIDRST__MODIFY() modifies RSTMODS_CLR.BIFPERSVIDRST.
 *
 * This is recommended to use when setting more than one bitfield of RGU.RSTMODS_CLR.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of RGU.RSTMODS_CLR
 * @param bf_value new value for RSTMODS_CLR.BIFPERSVIDRST
 * @return new value of RGU.RSTMODS_CLR
 */
__RGU_INLINE uint32_t RGU_RSTMODS_CLR__BIFPERSVIDRST__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~RGU_RSTMODS_CLR__BIFPERSVIDRST__Msk);
    reg = (reg | (RGU_RSTMODS_CLR__BIFPERSVIDRST__Shift((uint32_t)bf_value)));
    return reg;
}

/** RGU_RSTMODS_CLR__BIFPERSVIDRST__EXTRACT() extracts RSTMODS_CLR.BIFPERSVIDRST.
 *
 * This is recommended to use when extracting more than one bitfield from RGU.RSTMODS_CLR.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of RGU.RSTMODS_CLR
 * @return current value of RSTMODS_CLR.BIFPERSVIDRST
 */
__RGU_INLINE uint32_t RGU_RSTMODS_CLR__BIFPERSVIDRST__EXTRACT(uint32_t reg)
{
    reg = (reg & RGU_RSTMODS_CLR__BIFPERSVIDRST__Msk);
    reg = (reg >> RGU_RSTMODS_CLR__BIFPERSVIDRST__Pos);
    return (uint32_t)reg;
}

/* ----------------------- RGU.RSTMODS_CLR.BIFREGRST ----------------------- */

/**
<pre>
  RGU.RSTMODS_CLR.BIFREGRST:

    1: BIFREG Reset Signal set to 1.

</pre> */

#define RGU_RSTMODS_CLR__BIFREGRST__Pos                         4                                                                      /*!< Right-most bit position of BIFREGRST in RGU.RSTMODS_CLR */
#define RGU_RSTMODS_CLR__BIFREGRST__Msk                         (0x00000001UL << RGU_RSTMODS_CLR__BIFREGRST__Pos)                      /*!< Mask for BIFREGRST in RGU.RSTMODS_CLR */
#define RGU_RSTMODS_CLR__BIFREGRST__Shift(v)                    (((v) << RGU_RSTMODS_CLR__BIFREGRST__Pos) & RGU_RSTMODS_CLR__BIFREGRST__Msk) /*!< Shift value 'v' into BIFREGRST and mask 'v' to fit it into BIFREGRST field */

/** RGU_RSTMODS_CLR__BIFREGRST__SET() sets RSTMODS_CLR.BIFREGRST to given value.
 *
 * When writing to RSTMODS_CLR.BIFREGRST, this is recommended to use.
 *
 * @param bf_value new value for RSTMODS_CLR.BIFREGRST
 */
__RGU_INLINE void RGU_RSTMODS_CLR__BIFREGRST__SET(uint32_t bf_value)
{
    uint32_t reg = RGU_RSTMODS_CLR__BIFREGRST__Shift((uint32_t)bf_value);
    RGU_RSTMODS_CLR__SET(reg);
}


/** RGU_RSTMODS_CLR__BIFREGRST__MODIFY() modifies RSTMODS_CLR.BIFREGRST.
 *
 * This is recommended to use when setting more than one bitfield of RGU.RSTMODS_CLR.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of RGU.RSTMODS_CLR
 * @param bf_value new value for RSTMODS_CLR.BIFREGRST
 * @return new value of RGU.RSTMODS_CLR
 */
__RGU_INLINE uint32_t RGU_RSTMODS_CLR__BIFREGRST__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~RGU_RSTMODS_CLR__BIFREGRST__Msk);
    reg = (reg | (RGU_RSTMODS_CLR__BIFREGRST__Shift((uint32_t)bf_value)));
    return reg;
}

/** RGU_RSTMODS_CLR__BIFREGRST__EXTRACT() extracts RSTMODS_CLR.BIFREGRST.
 *
 * This is recommended to use when extracting more than one bitfield from RGU.RSTMODS_CLR.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of RGU.RSTMODS_CLR
 * @return current value of RSTMODS_CLR.BIFREGRST
 */
__RGU_INLINE uint32_t RGU_RSTMODS_CLR__BIFREGRST__EXTRACT(uint32_t reg)
{
    reg = (reg & RGU_RSTMODS_CLR__BIFREGRST__Msk);
    reg = (reg >> RGU_RSTMODS_CLR__BIFREGRST__Pos);
    return (uint32_t)reg;
}

/* ---------------------- RGU.RSTMODS_CLR.CNFGOTP1WRST ---------------------- */

/**
<pre>
  RGU.RSTMODS_CLR.CNFGOTP1WRST:

    1: Performs a reset of the OTP1 Wrapper.

</pre> */

#define RGU_RSTMODS_CLR__CNFGOTP1WRST__Pos                      2                                                                      /*!< Right-most bit position of CNFGOTP1WRST in RGU.RSTMODS_CLR */
#define RGU_RSTMODS_CLR__CNFGOTP1WRST__Msk                      (0x00000001UL << RGU_RSTMODS_CLR__CNFGOTP1WRST__Pos)                   /*!< Mask for CNFGOTP1WRST in RGU.RSTMODS_CLR */
#define RGU_RSTMODS_CLR__CNFGOTP1WRST__Shift(v)                 (((v) << RGU_RSTMODS_CLR__CNFGOTP1WRST__Pos) & RGU_RSTMODS_CLR__CNFGOTP1WRST__Msk) /*!< Shift value 'v' into CNFGOTP1WRST and mask 'v' to fit it into CNFGOTP1WRST field */

/** RGU_RSTMODS_CLR__CNFGOTP1WRST__SET() sets RSTMODS_CLR.CNFGOTP1WRST to given value.
 *
 * When writing to RSTMODS_CLR.CNFGOTP1WRST, this is recommended to use.
 *
 * @param bf_value new value for RSTMODS_CLR.CNFGOTP1WRST
 */
__RGU_INLINE void RGU_RSTMODS_CLR__CNFGOTP1WRST__SET(uint32_t bf_value)
{
    uint32_t reg = RGU_RSTMODS_CLR__CNFGOTP1WRST__Shift((uint32_t)bf_value);
    RGU_RSTMODS_CLR__SET(reg);
}


/** RGU_RSTMODS_CLR__CNFGOTP1WRST__MODIFY() modifies RSTMODS_CLR.CNFGOTP1WRST.
 *
 * This is recommended to use when setting more than one bitfield of RGU.RSTMODS_CLR.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of RGU.RSTMODS_CLR
 * @param bf_value new value for RSTMODS_CLR.CNFGOTP1WRST
 * @return new value of RGU.RSTMODS_CLR
 */
__RGU_INLINE uint32_t RGU_RSTMODS_CLR__CNFGOTP1WRST__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~RGU_RSTMODS_CLR__CNFGOTP1WRST__Msk);
    reg = (reg | (RGU_RSTMODS_CLR__CNFGOTP1WRST__Shift((uint32_t)bf_value)));
    return reg;
}

/** RGU_RSTMODS_CLR__CNFGOTP1WRST__EXTRACT() extracts RSTMODS_CLR.CNFGOTP1WRST.
 *
 * This is recommended to use when extracting more than one bitfield from RGU.RSTMODS_CLR.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of RGU.RSTMODS_CLR
 * @return current value of RSTMODS_CLR.CNFGOTP1WRST
 */
__RGU_INLINE uint32_t RGU_RSTMODS_CLR__CNFGOTP1WRST__EXTRACT(uint32_t reg)
{
    reg = (reg & RGU_RSTMODS_CLR__CNFGOTP1WRST__Msk);
    reg = (reg >> RGU_RSTMODS_CLR__CNFGOTP1WRST__Pos);
    return (uint32_t)reg;
}

/* ------------------------- RGU.RSTMODS_CLR.DMARST ------------------------- */

/**
<pre>
  RGU.RSTMODS_CLR.DMARST:

    1: Performs a reset of the DMA.

</pre> */

#define RGU_RSTMODS_CLR__DMARST__Pos                            1                                                                      /*!< Right-most bit position of DMARST in RGU.RSTMODS_CLR */
#define RGU_RSTMODS_CLR__DMARST__Msk                            (0x00000001UL << RGU_RSTMODS_CLR__DMARST__Pos)                         /*!< Mask for DMARST in RGU.RSTMODS_CLR */
#define RGU_RSTMODS_CLR__DMARST__Shift(v)                       (((v) << RGU_RSTMODS_CLR__DMARST__Pos) & RGU_RSTMODS_CLR__DMARST__Msk) /*!< Shift value 'v' into DMARST and mask 'v' to fit it into DMARST field */

/** RGU_RSTMODS_CLR__DMARST__SET() sets RSTMODS_CLR.DMARST to given value.
 *
 * When writing to RSTMODS_CLR.DMARST, this is recommended to use.
 *
 * @param bf_value new value for RSTMODS_CLR.DMARST
 */
__RGU_INLINE void RGU_RSTMODS_CLR__DMARST__SET(uint32_t bf_value)
{
    uint32_t reg = RGU_RSTMODS_CLR__DMARST__Shift((uint32_t)bf_value);
    RGU_RSTMODS_CLR__SET(reg);
}


/** RGU_RSTMODS_CLR__DMARST__MODIFY() modifies RSTMODS_CLR.DMARST.
 *
 * This is recommended to use when setting more than one bitfield of RGU.RSTMODS_CLR.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of RGU.RSTMODS_CLR
 * @param bf_value new value for RSTMODS_CLR.DMARST
 * @return new value of RGU.RSTMODS_CLR
 */
__RGU_INLINE uint32_t RGU_RSTMODS_CLR__DMARST__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~RGU_RSTMODS_CLR__DMARST__Msk);
    reg = (reg | (RGU_RSTMODS_CLR__DMARST__Shift((uint32_t)bf_value)));
    return reg;
}

/** RGU_RSTMODS_CLR__DMARST__EXTRACT() extracts RSTMODS_CLR.DMARST.
 *
 * This is recommended to use when extracting more than one bitfield from RGU.RSTMODS_CLR.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of RGU.RSTMODS_CLR
 * @return current value of RSTMODS_CLR.DMARST
 */
__RGU_INLINE uint32_t RGU_RSTMODS_CLR__DMARST__EXTRACT(uint32_t reg)
{
    reg = (reg & RGU_RSTMODS_CLR__DMARST__Msk);
    reg = (reg >> RGU_RSTMODS_CLR__DMARST__Pos);
    return (uint32_t)reg;
}

/* ------------------------- RGU.RSTMODS_CLR.SWRST ------------------------- */

/**
<pre>
  RGU.RSTMODS_CLR.SWRST:

    1: Enable Software Reset (CPU Subsystem reset enable).

</pre> */

#define RGU_RSTMODS_CLR__SWRST__Pos                             0                                                                      /*!< Right-most bit position of SWRST in RGU.RSTMODS_CLR */
#define RGU_RSTMODS_CLR__SWRST__Msk                             (0x00000001UL << RGU_RSTMODS_CLR__SWRST__Pos)                          /*!< Mask for SWRST in RGU.RSTMODS_CLR */
#define RGU_RSTMODS_CLR__SWRST__Shift(v)                        (((v) << RGU_RSTMODS_CLR__SWRST__Pos) & RGU_RSTMODS_CLR__SWRST__Msk)   /*!< Shift value 'v' into SWRST and mask 'v' to fit it into SWRST field */

/** RGU_RSTMODS_CLR__SWRST__SET() sets RSTMODS_CLR.SWRST to given value.
 *
 * When writing to RSTMODS_CLR.SWRST, this is recommended to use.
 *
 * @param bf_value new value for RSTMODS_CLR.SWRST
 */
__RGU_INLINE void RGU_RSTMODS_CLR__SWRST__SET(uint32_t bf_value)
{
    uint32_t reg = RGU_RSTMODS_CLR__SWRST__Shift((uint32_t)bf_value);
    RGU_RSTMODS_CLR__SET(reg);
}


/** RGU_RSTMODS_CLR__SWRST__MODIFY() modifies RSTMODS_CLR.SWRST.
 *
 * This is recommended to use when setting more than one bitfield of RGU.RSTMODS_CLR.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of RGU.RSTMODS_CLR
 * @param bf_value new value for RSTMODS_CLR.SWRST
 * @return new value of RGU.RSTMODS_CLR
 */
__RGU_INLINE uint32_t RGU_RSTMODS_CLR__SWRST__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~RGU_RSTMODS_CLR__SWRST__Msk);
    reg = (reg | (RGU_RSTMODS_CLR__SWRST__Shift((uint32_t)bf_value)));
    return reg;
}

/** RGU_RSTMODS_CLR__SWRST__EXTRACT() extracts RSTMODS_CLR.SWRST.
 *
 * This is recommended to use when extracting more than one bitfield from RGU.RSTMODS_CLR.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of RGU.RSTMODS_CLR
 * @return current value of RSTMODS_CLR.SWRST
 */
__RGU_INLINE uint32_t RGU_RSTMODS_CLR__SWRST__EXTRACT(uint32_t reg)
{
    reg = (reg & RGU_RSTMODS_CLR__SWRST__Msk);
    reg = (reg >> RGU_RSTMODS_CLR__SWRST__Pos);
    return (uint32_t)reg;
}

/** @} */ /* End of group rgu block */


/** @} */ /* End of group SHASTA */

/** @} */ /* End of group Infineon */

#endif /* _SHASTA_HAL_RGU_H_ */
