/**
 * @file     shasta_hal_wdt.h
 *
 * @brief    Definitions for the SHASTA Hardware Access Layer (HAL).
 *
 * @version  v0.0
 * @date     2015-11-16
 *
 * @note
 */

/* ============================================================================
** Copyright (C) 2016 Infineon. All rights reserved.
**               Infineon Technologies, PMM SYS / DES
** ============================================================================
**
** ============================================================================
** This document contains proprietary information. Passing on and
** copying of this document, and communication of its contents is not
** permitted without prior written authorisation.
** ============================================================================
*
*/
/* This file is automatically generated. Do not edit! */
/*lint -save -e960 */


#ifndef _SHASTA_HAL_WDT_H_
#define _SHASTA_HAL_WDT_H_

#include    <stdint.h>

#include    <stddef.h>
#include    "fw_config.h"
#include    "hal_api.h"

/** @addtogroup Infineon
 * @{
 */

/** @addtogroup SHASTA
 * @{
 */


/** @addtogroup wdt
 * @{
 */

#if defined ( __CC_ARM )
#define __WDT_INLINE  static __inline __attribute__((always_inline))
#elif defined ( __GNUC__ )
#define __WDT_INLINE  static inline __attribute__((always_inline))
#else
#warning Unsupported Compiler
#define __WDT_INLINE  static inline
#endif

/** register file of the wdt block.
 */
typedef struct _WDT_s
{
    volatile        uint32_t        WDOGLOAD                    ; /*!< (@0x00000000) Watchdog Load Register */
    volatile        uint32_t        WDOGVALUE                   ; /*!< (@0x00000004) Watchdog Value Register */
    volatile        uint32_t        WDOGCONTROL                 ; /*!< (@0x00000008) Watchdog Control Register */
    volatile        uint32_t        WDOGINTCLR                  ; /*!< (@0x0000000C) Watchdog Clear Interrupt Register */
    volatile        uint32_t        WDOGRIS                     ; /*!< (@0x00000010) Watchdog Raw Interrupt Status Register */
    volatile        uint32_t        WDOGMIS                     ; /*!< (@0x00000014) Watchdog Masked Interrupt Status Register */
    volatile        uint32_t        REGMEMGAP0[762]             ; /*!< (@0x00000018) gap in address space */
    volatile        uint32_t        WDOGLOCK                    ; /*!< (@0x00000C00) Wacthdog Lock Register */
    volatile        uint32_t        REGMEMGAP1[191]             ; /*!< (@0x00000C04) gap in address space */
    volatile        uint32_t        WDOGITCR                    ; /*!< (@0x00000F00) Watchdog Integration Test Control Register */
    volatile        uint32_t        WDOGITOP                    ; /*!< (@0x00000F04) Watchdog Integration Test Output Set Register */
    volatile        uint32_t        REGMEMGAP2[54]              ; /*!< (@0x00000F08) gap in address space */
    volatile        uint32_t        WDOGPERIPHID0               ; /*!< (@0x00000FE0) WDT Identification Register 0 */
    volatile        uint32_t        WDOGPERIPHID1               ; /*!< (@0x00000FE4) WDT Identification Register 1 */
    volatile        uint32_t        WDOGPERIPHID2               ; /*!< (@0x00000FE8) WDT Identification Register 2 */
    volatile        uint32_t        WDOGPERIPHID3               ; /*!< (@0x00000FEC) WDT Identification Register 3 */
    volatile        uint32_t        WDOGPCELLID0                ; /*!< (@0x00000FF0) PrimeCell Identification Register 0 */
    volatile        uint32_t        WDOGPCELLID1                ; /*!< (@0x00000FF4) PrimeCell Identification Register 1 */
    volatile        uint32_t        WDOGPCELLID2                ; /*!< (@0x00000FF8) PrimeCell Identification Register 2 */
    volatile        uint32_t        WDOGPCELLID3                ; /*!< (@0x00000FFC) PrimeCell Identification Register 3 */
} WDT_t;


#define WDT_BASE (0x60000000u)                                                          /*!< wdt base address */

/** __WDT_BASE_PTR returns the base address of the peripheral.
 *
 * @return base address of peripheral's instance
 */
__WDT_INLINE uint32_t* __WDT_BASE_PTR(void)
{
    return (uint32_t*)(WDT_BASE);
}


/* -------------------------------------------------------------------------- */
/*                          WDOGLOAD member of WDT_t                          */
/* -------------------------------------------------------------------------- */

/** __WDT_WDOGLOAD__ADDRESS returns the address of member WDOGLOAD.
 *
 * As indicated by the __ prefix, this is not intended for use by the FW. It is
 * here for readability only.
 *
 * @return address of WDOGLOAD
 */
__WDT_INLINE uint32_t* __WDT_WDOGLOAD__ADDRESS(void)
{
    return (uint32_t*)((uint32_t)__WDT_BASE_PTR() + (uint32_t)(offsetof(WDT_t, WDOGLOAD)));
}

/** WDT_WDOGLOAD__SET() sets WDOGLOAD to given value.
 *
 * When writing to WDOGLOAD, this is mandatory to use.
 *
 * @param value new value for WDOGLOAD
 */
__WDT_INLINE void WDT_WDOGLOAD__SET(uint32_t value)
{
    HAL_SET32(__WDT_WDOGLOAD__ADDRESS(), value);
}

/** WDT_WDOGLOAD__GET() gets WDOGLOAD's current value.
 *
 * When reading from WDOGLOAD, this is mandatory to use.
 *
 * @return current value of WDOGLOAD
 */
__WDT_INLINE uint32_t WDT_WDOGLOAD__GET(void)
{
    return HAL_GET32(__WDT_WDOGLOAD__ADDRESS());
}

/* --------------------------- WDT.WDOGLOAD.LOAD --------------------------- */

/**
<pre>
  WDT.WDOGLOAD.LOAD:

    Load Counter Value

</pre> */

#define WDT_WDOGLOAD__LOAD__Pos                                 0                                                                      /*!< Right-most bit position of LOAD in WDT.WDOGLOAD */
#define WDT_WDOGLOAD__LOAD__Msk                                 (0xFFFFFFFFUL << WDT_WDOGLOAD__LOAD__Pos)                              /*!< Mask for LOAD in WDT.WDOGLOAD */
#define WDT_WDOGLOAD__LOAD__Shift(v)                            (((v) << WDT_WDOGLOAD__LOAD__Pos) & WDT_WDOGLOAD__LOAD__Msk)           /*!< Shift value 'v' into LOAD and mask 'v' to fit it into LOAD field */

/** WDT_WDOGLOAD__LOAD__SET() sets WDOGLOAD.LOAD to given value.
 *
 * When writing to WDOGLOAD.LOAD, this is recommended to use.
 *
 * @param bf_value new value for WDOGLOAD.LOAD
 */
__WDT_INLINE void WDT_WDOGLOAD__LOAD__SET(uint32_t bf_value)
{
    uint32_t reg = WDT_WDOGLOAD__GET();
    reg = (reg & ~WDT_WDOGLOAD__LOAD__Msk);
    reg = (reg | (WDT_WDOGLOAD__LOAD__Shift((uint32_t)bf_value)));
    WDT_WDOGLOAD__SET(reg);
}

/** WDT_WDOGLOAD__LOAD__GET() gets WDOGLOAD.LOAD's current value.
 *
 * When reading from WDOGLOAD.LOAD, this is recommended to use.
 *
 * @return current value of WDOGLOAD.LOAD
 */
__WDT_INLINE uint32_t WDT_WDOGLOAD__LOAD__GET(void)
{
    uint32_t reg = WDT_WDOGLOAD__GET();
    reg = (reg & WDT_WDOGLOAD__LOAD__Msk);
    reg = (reg >> WDT_WDOGLOAD__LOAD__Pos);
    return (uint32_t)reg;
}

/** WDT_WDOGLOAD__LOAD__MODIFY() modifies WDOGLOAD.LOAD.
 *
 * This is recommended to use when setting more than one bitfield of WDT.WDOGLOAD.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of WDT.WDOGLOAD
 * @param bf_value new value for WDOGLOAD.LOAD
 * @return new value of WDT.WDOGLOAD
 */
__WDT_INLINE uint32_t WDT_WDOGLOAD__LOAD__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~WDT_WDOGLOAD__LOAD__Msk);
    reg = (reg | (WDT_WDOGLOAD__LOAD__Shift((uint32_t)bf_value)));
    return reg;
}

/** WDT_WDOGLOAD__LOAD__EXTRACT() extracts WDOGLOAD.LOAD.
 *
 * This is recommended to use when extracting more than one bitfield from WDT.WDOGLOAD.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of WDT.WDOGLOAD
 * @return current value of WDOGLOAD.LOAD
 */
__WDT_INLINE uint32_t WDT_WDOGLOAD__LOAD__EXTRACT(uint32_t reg)
{
    reg = (reg & WDT_WDOGLOAD__LOAD__Msk);
    reg = (reg >> WDT_WDOGLOAD__LOAD__Pos);
    return (uint32_t)reg;
}

/* -------------------------------------------------------------------------- */
/*                         WDOGVALUE member of WDT_t                         */
/* -------------------------------------------------------------------------- */

/** __WDT_WDOGVALUE__ADDRESS returns the address of member WDOGVALUE.
 *
 * As indicated by the __ prefix, this is not intended for use by the FW. It is
 * here for readability only.
 *
 * @return address of WDOGVALUE
 */
__WDT_INLINE uint32_t* __WDT_WDOGVALUE__ADDRESS(void)
{
    return (uint32_t*)((uint32_t)__WDT_BASE_PTR() + (uint32_t)(offsetof(WDT_t, WDOGVALUE)));
}

/** WDT_WDOGVALUE__GET() gets WDOGVALUE's current value.
 *
 * When reading from WDOGVALUE, this is mandatory to use.
 *
 * @return current value of WDOGVALUE
 */
__WDT_INLINE uint32_t WDT_WDOGVALUE__GET(void)
{
    return HAL_GET32(__WDT_WDOGVALUE__ADDRESS());
}

/* -------------------------- WDT.WDOGVALUE.VALUE -------------------------- */

/**
<pre>
  WDT.WDOGVALUE.VALUE:

    Current Counter Value

</pre> */

#define WDT_WDOGVALUE__VALUE__Pos                               0                                                                      /*!< Right-most bit position of VALUE in WDT.WDOGVALUE */
#define WDT_WDOGVALUE__VALUE__Msk                               (0xFFFFFFFFUL << WDT_WDOGVALUE__VALUE__Pos)                            /*!< Mask for VALUE in WDT.WDOGVALUE */
#define WDT_WDOGVALUE__VALUE__Shift(v)                          (((v) << WDT_WDOGVALUE__VALUE__Pos) & WDT_WDOGVALUE__VALUE__Msk)       /*!< Shift value 'v' into VALUE and mask 'v' to fit it into VALUE field */

/** WDT_WDOGVALUE__VALUE__GET() gets WDOGVALUE.VALUE's current value.
 *
 * When reading from WDOGVALUE.VALUE, this is recommended to use.
 *
 * @return current value of WDOGVALUE.VALUE
 */
__WDT_INLINE uint32_t WDT_WDOGVALUE__VALUE__GET(void)
{
    uint32_t reg = WDT_WDOGVALUE__GET();
    reg = (reg & WDT_WDOGVALUE__VALUE__Msk);
    reg = (reg >> WDT_WDOGVALUE__VALUE__Pos);
    return (uint32_t)reg;
}

/** WDT_WDOGVALUE__VALUE__EXTRACT() extracts WDOGVALUE.VALUE.
 *
 * This is recommended to use when extracting more than one bitfield from WDT.WDOGVALUE.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of WDT.WDOGVALUE
 * @return current value of WDOGVALUE.VALUE
 */
__WDT_INLINE uint32_t WDT_WDOGVALUE__VALUE__EXTRACT(uint32_t reg)
{
    reg = (reg & WDT_WDOGVALUE__VALUE__Msk);
    reg = (reg >> WDT_WDOGVALUE__VALUE__Pos);
    return (uint32_t)reg;
}

/* -------------------------------------------------------------------------- */
/*                        WDOGCONTROL member of WDT_t                        */
/* -------------------------------------------------------------------------- */

/** __WDT_WDOGCONTROL__ADDRESS returns the address of member WDOGCONTROL.
 *
 * As indicated by the __ prefix, this is not intended for use by the FW. It is
 * here for readability only.
 *
 * @return address of WDOGCONTROL
 */
__WDT_INLINE uint32_t* __WDT_WDOGCONTROL__ADDRESS(void)
{
    return (uint32_t*)((uint32_t)__WDT_BASE_PTR() + (uint32_t)(offsetof(WDT_t, WDOGCONTROL)));
}

/** WDT_WDOGCONTROL__SET() sets WDOGCONTROL to given value.
 *
 * When writing to WDOGCONTROL, this is mandatory to use.
 *
 * @param value new value for WDOGCONTROL
 */
__WDT_INLINE void WDT_WDOGCONTROL__SET(uint32_t value)
{
    HAL_SET32(__WDT_WDOGCONTROL__ADDRESS(), value);
}

/** WDT_WDOGCONTROL__GET() gets WDOGCONTROL's current value.
 *
 * When reading from WDOGCONTROL, this is mandatory to use.
 *
 * @return current value of WDOGCONTROL
 */
__WDT_INLINE uint32_t WDT_WDOGCONTROL__GET(void)
{
    return HAL_GET32(__WDT_WDOGCONTROL__ADDRESS());
}

/* ------------------------- WDT.WDOGCONTROL.RESEN ------------------------- */

/**
<pre>
  WDT.WDOGCONTROL.RESEN:

    Watchdog Reset Output Enable

</pre> */

/*lint -parent(uint32_t, wdt_wdogcontrol__resen_t) -strong(AJX)*/
typedef enum wdt_wdogcontrol__resen_e                                                                                                  /*!< Watchdog Reset Output Enable */
{
    wdt_wdogcontrol__resen_s0 = 0u,                                                                                                    /*!<      Disable Reset Output */
    wdt_wdogcontrol__resen_s1 = 1u                                                                                                     /*!<      Enable Reset Output */
} wdt_wdogcontrol__resen_t;

#define WDT_WDOGCONTROL__RESEN__Pos                             1                                                                      /*!< Right-most bit position of RESEN in WDT.WDOGCONTROL */
#define WDT_WDOGCONTROL__RESEN__Msk                             (0x00000001UL << WDT_WDOGCONTROL__RESEN__Pos)                          /*!< Mask for RESEN in WDT.WDOGCONTROL */
#define WDT_WDOGCONTROL__RESEN__Shift(v)                        (((v) << WDT_WDOGCONTROL__RESEN__Pos) & WDT_WDOGCONTROL__RESEN__Msk)   /*!< Shift value 'v' into RESEN and mask 'v' to fit it into RESEN field */

/** WDT_WDOGCONTROL__RESEN__SET() sets WDOGCONTROL.RESEN to given value.
 *
 * When writing to WDOGCONTROL.RESEN, this is recommended to use.
 *
 * @param bf_value new value for WDOGCONTROL.RESEN
 */
__WDT_INLINE void WDT_WDOGCONTROL__RESEN__SET(wdt_wdogcontrol__resen_t bf_value)
{
    uint32_t reg = WDT_WDOGCONTROL__GET();
    reg = (reg & ~WDT_WDOGCONTROL__RESEN__Msk);
    reg = (reg | (WDT_WDOGCONTROL__RESEN__Shift((uint32_t)bf_value)));
    WDT_WDOGCONTROL__SET(reg);
}

/** WDT_WDOGCONTROL__RESEN__GET() gets WDOGCONTROL.RESEN's current value.
 *
 * When reading from WDOGCONTROL.RESEN, this is recommended to use.
 *
 * @return current value of WDOGCONTROL.RESEN
 */
__WDT_INLINE wdt_wdogcontrol__resen_t WDT_WDOGCONTROL__RESEN__GET(void)
{
    uint32_t reg = WDT_WDOGCONTROL__GET();
    reg = (reg & WDT_WDOGCONTROL__RESEN__Msk);
    reg = (reg >> WDT_WDOGCONTROL__RESEN__Pos);
    return (wdt_wdogcontrol__resen_t)reg;
}

/** WDT_WDOGCONTROL__RESEN__MODIFY() modifies WDOGCONTROL.RESEN.
 *
 * This is recommended to use when setting more than one bitfield of WDT.WDOGCONTROL.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of WDT.WDOGCONTROL
 * @param bf_value new value for WDOGCONTROL.RESEN
 * @return new value of WDT.WDOGCONTROL
 */
__WDT_INLINE uint32_t WDT_WDOGCONTROL__RESEN__MODIFY(uint32_t reg, wdt_wdogcontrol__resen_t bf_value)
{
    reg = (reg & ~WDT_WDOGCONTROL__RESEN__Msk);
    reg = (reg | (WDT_WDOGCONTROL__RESEN__Shift((uint32_t)bf_value)));
    return reg;
}

/** WDT_WDOGCONTROL__RESEN__EXTRACT() extracts WDOGCONTROL.RESEN.
 *
 * This is recommended to use when extracting more than one bitfield from WDT.WDOGCONTROL.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of WDT.WDOGCONTROL
 * @return current value of WDOGCONTROL.RESEN
 */
__WDT_INLINE wdt_wdogcontrol__resen_t WDT_WDOGCONTROL__RESEN__EXTRACT(uint32_t reg)
{
    reg = (reg & WDT_WDOGCONTROL__RESEN__Msk);
    reg = (reg >> WDT_WDOGCONTROL__RESEN__Pos);
    return (wdt_wdogcontrol__resen_t)reg;
}

/* ------------------------- WDT.WDOGCONTROL.INTEN ------------------------- */

/**
<pre>
  WDT.WDOGCONTROL.INTEN:

    Interrupt Enable

</pre> */

/*lint -parent(uint32_t, wdt_wdogcontrol__inten_t) -strong(AJX)*/
typedef enum wdt_wdogcontrol__inten_e                                                                                                  /*!< Interrupt Enable */
{
    wdt_wdogcontrol__inten_s0 = 0u,                                                                                                    /*!<      Disable the decrement counter and the interrupt */
    wdt_wdogcontrol__inten_s1 = 1u                                                                                                     /*!<      Enable the decrement counter and the interrupt */
} wdt_wdogcontrol__inten_t;

#define WDT_WDOGCONTROL__INTEN__Pos                             0                                                                      /*!< Right-most bit position of INTEN in WDT.WDOGCONTROL */
#define WDT_WDOGCONTROL__INTEN__Msk                             (0x00000001UL << WDT_WDOGCONTROL__INTEN__Pos)                          /*!< Mask for INTEN in WDT.WDOGCONTROL */
#define WDT_WDOGCONTROL__INTEN__Shift(v)                        (((v) << WDT_WDOGCONTROL__INTEN__Pos) & WDT_WDOGCONTROL__INTEN__Msk)   /*!< Shift value 'v' into INTEN and mask 'v' to fit it into INTEN field */

/** WDT_WDOGCONTROL__INTEN__SET() sets WDOGCONTROL.INTEN to given value.
 *
 * When writing to WDOGCONTROL.INTEN, this is recommended to use.
 *
 * @param bf_value new value for WDOGCONTROL.INTEN
 */
__WDT_INLINE void WDT_WDOGCONTROL__INTEN__SET(wdt_wdogcontrol__inten_t bf_value)
{
    uint32_t reg = WDT_WDOGCONTROL__GET();
    reg = (reg & ~WDT_WDOGCONTROL__INTEN__Msk);
    reg = (reg | (WDT_WDOGCONTROL__INTEN__Shift((uint32_t)bf_value)));
    WDT_WDOGCONTROL__SET(reg);
}

/** WDT_WDOGCONTROL__INTEN__GET() gets WDOGCONTROL.INTEN's current value.
 *
 * When reading from WDOGCONTROL.INTEN, this is recommended to use.
 *
 * @return current value of WDOGCONTROL.INTEN
 */
__WDT_INLINE wdt_wdogcontrol__inten_t WDT_WDOGCONTROL__INTEN__GET(void)
{
    uint32_t reg = WDT_WDOGCONTROL__GET();
    reg = (reg & WDT_WDOGCONTROL__INTEN__Msk);
    reg = (reg >> WDT_WDOGCONTROL__INTEN__Pos);
    return (wdt_wdogcontrol__inten_t)reg;
}

/** WDT_WDOGCONTROL__INTEN__MODIFY() modifies WDOGCONTROL.INTEN.
 *
 * This is recommended to use when setting more than one bitfield of WDT.WDOGCONTROL.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of WDT.WDOGCONTROL
 * @param bf_value new value for WDOGCONTROL.INTEN
 * @return new value of WDT.WDOGCONTROL
 */
__WDT_INLINE uint32_t WDT_WDOGCONTROL__INTEN__MODIFY(uint32_t reg, wdt_wdogcontrol__inten_t bf_value)
{
    reg = (reg & ~WDT_WDOGCONTROL__INTEN__Msk);
    reg = (reg | (WDT_WDOGCONTROL__INTEN__Shift((uint32_t)bf_value)));
    return reg;
}

/** WDT_WDOGCONTROL__INTEN__EXTRACT() extracts WDOGCONTROL.INTEN.
 *
 * This is recommended to use when extracting more than one bitfield from WDT.WDOGCONTROL.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of WDT.WDOGCONTROL
 * @return current value of WDOGCONTROL.INTEN
 */
__WDT_INLINE wdt_wdogcontrol__inten_t WDT_WDOGCONTROL__INTEN__EXTRACT(uint32_t reg)
{
    reg = (reg & WDT_WDOGCONTROL__INTEN__Msk);
    reg = (reg >> WDT_WDOGCONTROL__INTEN__Pos);
    return (wdt_wdogcontrol__inten_t)reg;
}

/* -------------------------------------------------------------------------- */
/*                         WDOGINTCLR member of WDT_t                         */
/* -------------------------------------------------------------------------- */

/** __WDT_WDOGINTCLR__ADDRESS returns the address of member WDOGINTCLR.
 *
 * As indicated by the __ prefix, this is not intended for use by the FW. It is
 * here for readability only.
 *
 * @return address of WDOGINTCLR
 */
__WDT_INLINE uint32_t* __WDT_WDOGINTCLR__ADDRESS(void)
{
    return (uint32_t*)((uint32_t)__WDT_BASE_PTR() + (uint32_t)(offsetof(WDT_t, WDOGINTCLR)));
}

/** WDT_WDOGINTCLR__SET() sets WDOGINTCLR to given value.
 *
 * When writing to WDOGINTCLR, this is mandatory to use.
 *
 * @param value new value for WDOGINTCLR
 */
__WDT_INLINE void WDT_WDOGINTCLR__SET(uint32_t value)
{
    HAL_SET32(__WDT_WDOGINTCLR__ADDRESS(), value);
}


/* ------------------------- WDT.WDOGINTCLR.INTCLR ------------------------- */

/**
<pre>
  WDT.WDOGINTCLR.INTCLR:

    Interrupt Clear

</pre> */

#define WDT_WDOGINTCLR__INTCLR__Pos                             0                                                                      /*!< Right-most bit position of INTCLR in WDT.WDOGINTCLR */
#define WDT_WDOGINTCLR__INTCLR__Msk                             (0xFFFFFFFFUL << WDT_WDOGINTCLR__INTCLR__Pos)                          /*!< Mask for INTCLR in WDT.WDOGINTCLR */
#define WDT_WDOGINTCLR__INTCLR__Shift(v)                        (((v) << WDT_WDOGINTCLR__INTCLR__Pos) & WDT_WDOGINTCLR__INTCLR__Msk)   /*!< Shift value 'v' into INTCLR and mask 'v' to fit it into INTCLR field */

/** WDT_WDOGINTCLR__INTCLR__SET() sets WDOGINTCLR.INTCLR to given value.
 *
 * When writing to WDOGINTCLR.INTCLR, this is recommended to use.
 *
 * @param bf_value new value for WDOGINTCLR.INTCLR
 */
__WDT_INLINE void WDT_WDOGINTCLR__INTCLR__SET(uint32_t bf_value)
{
    uint32_t reg = WDT_WDOGINTCLR__INTCLR__Shift((uint32_t)bf_value);
    WDT_WDOGINTCLR__SET(reg);
}


/** WDT_WDOGINTCLR__INTCLR__MODIFY() modifies WDOGINTCLR.INTCLR.
 *
 * This is recommended to use when setting more than one bitfield of WDT.WDOGINTCLR.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of WDT.WDOGINTCLR
 * @param bf_value new value for WDOGINTCLR.INTCLR
 * @return new value of WDT.WDOGINTCLR
 */
__WDT_INLINE uint32_t WDT_WDOGINTCLR__INTCLR__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~WDT_WDOGINTCLR__INTCLR__Msk);
    reg = (reg | (WDT_WDOGINTCLR__INTCLR__Shift((uint32_t)bf_value)));
    return reg;
}

/** WDT_WDOGINTCLR__INTCLR__EXTRACT() extracts WDOGINTCLR.INTCLR.
 *
 * This is recommended to use when extracting more than one bitfield from WDT.WDOGINTCLR.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of WDT.WDOGINTCLR
 * @return current value of WDOGINTCLR.INTCLR
 */
__WDT_INLINE uint32_t WDT_WDOGINTCLR__INTCLR__EXTRACT(uint32_t reg)
{
    reg = (reg & WDT_WDOGINTCLR__INTCLR__Msk);
    reg = (reg >> WDT_WDOGINTCLR__INTCLR__Pos);
    return (uint32_t)reg;
}

/* -------------------------------------------------------------------------- */
/*                          WDOGRIS member of WDT_t                          */
/* -------------------------------------------------------------------------- */

/** __WDT_WDOGRIS__ADDRESS returns the address of member WDOGRIS.
 *
 * As indicated by the __ prefix, this is not intended for use by the FW. It is
 * here for readability only.
 *
 * @return address of WDOGRIS
 */
__WDT_INLINE uint32_t* __WDT_WDOGRIS__ADDRESS(void)
{
    return (uint32_t*)((uint32_t)__WDT_BASE_PTR() + (uint32_t)(offsetof(WDT_t, WDOGRIS)));
}

/** WDT_WDOGRIS__GET() gets WDOGRIS's current value.
 *
 * When reading from WDOGRIS, this is mandatory to use.
 *
 * @return current value of WDOGRIS
 */
__WDT_INLINE uint32_t WDT_WDOGRIS__GET(void)
{
    return HAL_GET32(__WDT_WDOGRIS__ADDRESS());
}

/** WDT_WDOGRIS__GETB0() gets byte 0 of WDOGRIS's current value.
 *
 * When reading from byte 0 of WDOGRIS, this is mandatory to use.
 *
 * @return current value of byte 0 of WDOGRIS
 */
__WDT_INLINE uint8_t WDT_WDOGRIS__GETB0(void)
{
    return HAL_GET8(((uint8_t*)__WDT_WDOGRIS__ADDRESS()) + 0);
}

/* --------------------------- WDT.WDOGRIS.RAWINT --------------------------- */

/**
<pre>
  WDT.WDOGRIS.RAWINT:

    Raw Interrupt Status

</pre> */

/*lint -parent(uint32_t, wdt_wdogris__rawint_t) -strong(AJX)*/
typedef enum wdt_wdogris__rawint_e                                                                                                     /*!< Raw Interrupt Status */
{
    wdt_wdogris__rawint_s0 = 0u,                                                                                                       /*!<      Raw Interrupt from counter has not been generated */
    wdt_wdogris__rawint_s1 = 1u                                                                                                        /*!<      Raw Interrupt from counter has been generated */
} wdt_wdogris__rawint_t;

#define WDT_WDOGRIS__RAWINT__Pos                                0                                                                      /*!< Right-most bit position of RAWINT in WDT.WDOGRIS */
#define WDT_WDOGRIS__RAWINT__Msk                                (0x00000001UL << WDT_WDOGRIS__RAWINT__Pos)                             /*!< Mask for RAWINT in WDT.WDOGRIS */
#define WDT_WDOGRIS__RAWINT__Shift(v)                           (((v) << WDT_WDOGRIS__RAWINT__Pos) & WDT_WDOGRIS__RAWINT__Msk)         /*!< Shift value 'v' into RAWINT and mask 'v' to fit it into RAWINT field */

/** WDT_WDOGRIS__RAWINT__GET() gets WDOGRIS.RAWINT's current value.
 *
 * When reading from WDOGRIS.RAWINT, this is recommended to use.
 *
 * @return current value of WDOGRIS.RAWINT
 */
__WDT_INLINE wdt_wdogris__rawint_t WDT_WDOGRIS__RAWINT__GET(void)
{
    uint8_t reg = WDT_WDOGRIS__GETB0();
    reg = (reg & (uint8_t)0x01);
    return (wdt_wdogris__rawint_t)reg;
}

/** WDT_WDOGRIS__RAWINT__EXTRACT() extracts WDOGRIS.RAWINT.
 *
 * This is recommended to use when extracting more than one bitfield from WDT.WDOGRIS.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of WDT.WDOGRIS
 * @return current value of WDOGRIS.RAWINT
 */
__WDT_INLINE wdt_wdogris__rawint_t WDT_WDOGRIS__RAWINT__EXTRACT(uint32_t reg)
{
    reg = (reg & WDT_WDOGRIS__RAWINT__Msk);
    reg = (reg >> WDT_WDOGRIS__RAWINT__Pos);
    return (wdt_wdogris__rawint_t)reg;
}

/* -------------------------------------------------------------------------- */
/*                          WDOGMIS member of WDT_t                          */
/* -------------------------------------------------------------------------- */

/** __WDT_WDOGMIS__ADDRESS returns the address of member WDOGMIS.
 *
 * As indicated by the __ prefix, this is not intended for use by the FW. It is
 * here for readability only.
 *
 * @return address of WDOGMIS
 */
__WDT_INLINE uint32_t* __WDT_WDOGMIS__ADDRESS(void)
{
    return (uint32_t*)((uint32_t)__WDT_BASE_PTR() + (uint32_t)(offsetof(WDT_t, WDOGMIS)));
}

/** WDT_WDOGMIS__GET() gets WDOGMIS's current value.
 *
 * When reading from WDOGMIS, this is mandatory to use.
 *
 * @return current value of WDOGMIS
 */
__WDT_INLINE uint32_t WDT_WDOGMIS__GET(void)
{
    return HAL_GET32(__WDT_WDOGMIS__ADDRESS());
}

/** WDT_WDOGMIS__GETB0() gets byte 0 of WDOGMIS's current value.
 *
 * When reading from byte 0 of WDOGMIS, this is mandatory to use.
 *
 * @return current value of byte 0 of WDOGMIS
 */
__WDT_INLINE uint8_t WDT_WDOGMIS__GETB0(void)
{
    return HAL_GET8(((uint8_t*)__WDT_WDOGMIS__ADDRESS()) + 0);
}

/* -------------------------- WDT.WDOGMIS.INTMASK -------------------------- */

/**
<pre>
  WDT.WDOGMIS.INTMASK:

    Masked Interrupt Status

</pre> */

/*lint -parent(uint32_t, wdt_wdogmis__intmask_t) -strong(AJX)*/
typedef enum wdt_wdogmis__intmask_e                                                                                                    /*!< Masked Interrupt Status */
{
    wdt_wdogmis__intmask_s0 = 0u,                                                                                                      /*!<      Disable interrupt line. */
    wdt_wdogmis__intmask_s1 = 1u                                                                                                       /*!<      Enable interrupt status from the counter */
} wdt_wdogmis__intmask_t;

#define WDT_WDOGMIS__INTMASK__Pos                               0                                                                      /*!< Right-most bit position of INTMASK in WDT.WDOGMIS */
#define WDT_WDOGMIS__INTMASK__Msk                               (0x00000001UL << WDT_WDOGMIS__INTMASK__Pos)                            /*!< Mask for INTMASK in WDT.WDOGMIS */
#define WDT_WDOGMIS__INTMASK__Shift(v)                          (((v) << WDT_WDOGMIS__INTMASK__Pos) & WDT_WDOGMIS__INTMASK__Msk)       /*!< Shift value 'v' into INTMASK and mask 'v' to fit it into INTMASK field */

/** WDT_WDOGMIS__INTMASK__GET() gets WDOGMIS.INTMASK's current value.
 *
 * When reading from WDOGMIS.INTMASK, this is recommended to use.
 *
 * @return current value of WDOGMIS.INTMASK
 */
__WDT_INLINE wdt_wdogmis__intmask_t WDT_WDOGMIS__INTMASK__GET(void)
{
    uint8_t reg = WDT_WDOGMIS__GETB0();
    reg = (reg & (uint8_t)0x01);
    return (wdt_wdogmis__intmask_t)reg;
}

/** WDT_WDOGMIS__INTMASK__EXTRACT() extracts WDOGMIS.INTMASK.
 *
 * This is recommended to use when extracting more than one bitfield from WDT.WDOGMIS.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of WDT.WDOGMIS
 * @return current value of WDOGMIS.INTMASK
 */
__WDT_INLINE wdt_wdogmis__intmask_t WDT_WDOGMIS__INTMASK__EXTRACT(uint32_t reg)
{
    reg = (reg & WDT_WDOGMIS__INTMASK__Msk);
    reg = (reg >> WDT_WDOGMIS__INTMASK__Pos);
    return (wdt_wdogmis__intmask_t)reg;
}

/* -------------------------------------------------------------------------- */
/*                          WDOGLOCK member of WDT_t                          */
/* -------------------------------------------------------------------------- */

/** __WDT_WDOGLOCK__ADDRESS returns the address of member WDOGLOCK.
 *
 * As indicated by the __ prefix, this is not intended for use by the FW. It is
 * here for readability only.
 *
 * @return address of WDOGLOCK
 */
__WDT_INLINE uint32_t* __WDT_WDOGLOCK__ADDRESS(void)
{
    return (uint32_t*)((uint32_t)__WDT_BASE_PTR() + (uint32_t)(offsetof(WDT_t, WDOGLOCK)));
}

/** WDT_WDOGLOCK__SET() sets WDOGLOCK to given value.
 *
 * When writing to WDOGLOCK, this is mandatory to use.
 *
 * @param value new value for WDOGLOCK
 */
__WDT_INLINE void WDT_WDOGLOCK__SET(uint32_t value)
{
    HAL_SET32(__WDT_WDOGLOCK__ADDRESS(), value);
}

/** WDT_WDOGLOCK__SETB0() sets byte 0 of WDOGLOCK to given value.
 *
 * When writing to byte 0 of WDOGLOCK, this is mandatory to use.
 *
 * @param value new value for byte 0 of WDOGLOCK
 */
__WDT_INLINE void WDT_WDOGLOCK__SETB0(uint8_t value)
{
    HAL_SET8(((uint8_t*)__WDT_WDOGLOCK__ADDRESS()) + 0, value);
}

/** WDT_WDOGLOCK__GET() gets WDOGLOCK's current value.
 *
 * When reading from WDOGLOCK, this is mandatory to use.
 *
 * @return current value of WDOGLOCK
 */
__WDT_INLINE uint32_t WDT_WDOGLOCK__GET(void)
{
    return HAL_GET32(__WDT_WDOGLOCK__ADDRESS());
}

/** WDT_WDOGLOCK__GETB0() gets byte 0 of WDOGLOCK's current value.
 *
 * When reading from byte 0 of WDOGLOCK, this is mandatory to use.
 *
 * @return current value of byte 0 of WDOGLOCK
 */
__WDT_INLINE uint8_t WDT_WDOGLOCK__GETB0(void)
{
    return HAL_GET8(((uint8_t*)__WDT_WDOGLOCK__ADDRESS()) + 0);
}

/* -------------------------- WDT.WDOGLOCK.LOCKEN -------------------------- */

/**
<pre>
  WDT.WDOGLOCK.LOCKEN:

    Register Write Protection Control

</pre> */

/*lint -parent(uint32_t, wdt_wdoglock__locken_t) -strong(AJX)*/
typedef enum wdt_wdoglock__locken_e                                                                                                    /*!< Register Write Protection Control */
{
    wdt_wdoglock__locken_s0 = 0u,                                                                                                      /*!<      Enable Watchdog registers write access. */
    wdt_wdoglock__locken_s1 = 1u                                                                                                       /*!<      Disable Watchdog registers write access. */
} wdt_wdoglock__locken_t;

#define WDT_WDOGLOCK__LOCKEN__Pos                               0                                                                      /*!< Right-most bit position of LOCKEN in WDT.WDOGLOCK */
#define WDT_WDOGLOCK__LOCKEN__Msk                               (0x00000001UL << WDT_WDOGLOCK__LOCKEN__Pos)                            /*!< Mask for LOCKEN in WDT.WDOGLOCK */
#define WDT_WDOGLOCK__LOCKEN__Shift(v)                          (((v) << WDT_WDOGLOCK__LOCKEN__Pos) & WDT_WDOGLOCK__LOCKEN__Msk)       /*!< Shift value 'v' into LOCKEN and mask 'v' to fit it into LOCKEN field */

/** WDT_WDOGLOCK__LOCKEN__SET() sets WDOGLOCK.LOCKEN to given value.
 *
 * When writing to WDOGLOCK.LOCKEN, this is recommended to use.
 *
 * @param bf_value new value for WDOGLOCK.LOCKEN
 */
__WDT_INLINE void WDT_WDOGLOCK__LOCKEN__SET(wdt_wdoglock__locken_t bf_value)
{
    uint8_t reg = (uint8_t)bf_value & (uint8_t)0x01;
    WDT_WDOGLOCK__SETB0(reg);
}

/** WDT_WDOGLOCK__LOCKEN__GET() gets WDOGLOCK.LOCKEN's current value.
 *
 * When reading from WDOGLOCK.LOCKEN, this is recommended to use.
 *
 * @return current value of WDOGLOCK.LOCKEN
 */
__WDT_INLINE wdt_wdoglock__locken_t WDT_WDOGLOCK__LOCKEN__GET(void)
{
    uint8_t reg = WDT_WDOGLOCK__GETB0();
    reg = (reg & (uint8_t)0x01);
    return (wdt_wdoglock__locken_t)reg;
}

/** WDT_WDOGLOCK__LOCKEN__MODIFY() modifies WDOGLOCK.LOCKEN.
 *
 * This is recommended to use when setting more than one bitfield of WDT.WDOGLOCK.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of WDT.WDOGLOCK
 * @param bf_value new value for WDOGLOCK.LOCKEN
 * @return new value of WDT.WDOGLOCK
 */
__WDT_INLINE uint32_t WDT_WDOGLOCK__LOCKEN__MODIFY(uint32_t reg, wdt_wdoglock__locken_t bf_value)
{
    reg = (reg & ~WDT_WDOGLOCK__LOCKEN__Msk);
    reg = (reg | (WDT_WDOGLOCK__LOCKEN__Shift((uint32_t)bf_value)));
    return reg;
}

/** WDT_WDOGLOCK__LOCKEN__EXTRACT() extracts WDOGLOCK.LOCKEN.
 *
 * This is recommended to use when extracting more than one bitfield from WDT.WDOGLOCK.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of WDT.WDOGLOCK
 * @return current value of WDOGLOCK.LOCKEN
 */
__WDT_INLINE wdt_wdoglock__locken_t WDT_WDOGLOCK__LOCKEN__EXTRACT(uint32_t reg)
{
    reg = (reg & WDT_WDOGLOCK__LOCKEN__Msk);
    reg = (reg >> WDT_WDOGLOCK__LOCKEN__Pos);
    return (wdt_wdoglock__locken_t)reg;
}

/* -------------------------------------------------------------------------- */
/*                          WDOGITCR member of WDT_t                          */
/* -------------------------------------------------------------------------- */

/** __WDT_WDOGITCR__ADDRESS returns the address of member WDOGITCR.
 *
 * As indicated by the __ prefix, this is not intended for use by the FW. It is
 * here for readability only.
 *
 * @return address of WDOGITCR
 */
__WDT_INLINE uint32_t* __WDT_WDOGITCR__ADDRESS(void)
{
    return (uint32_t*)((uint32_t)__WDT_BASE_PTR() + (uint32_t)(offsetof(WDT_t, WDOGITCR)));
}

/** WDT_WDOGITCR__SET() sets WDOGITCR to given value.
 *
 * When writing to WDOGITCR, this is mandatory to use.
 *
 * @param value new value for WDOGITCR
 */
__WDT_INLINE void WDT_WDOGITCR__SET(uint32_t value)
{
    HAL_SET32(__WDT_WDOGITCR__ADDRESS(), value);
}

/** WDT_WDOGITCR__SETB0() sets byte 0 of WDOGITCR to given value.
 *
 * When writing to byte 0 of WDOGITCR, this is mandatory to use.
 *
 * @param value new value for byte 0 of WDOGITCR
 */
__WDT_INLINE void WDT_WDOGITCR__SETB0(uint8_t value)
{
    HAL_SET8(((uint8_t*)__WDT_WDOGITCR__ADDRESS()) + 0, value);
}

/** WDT_WDOGITCR__GET() gets WDOGITCR's current value.
 *
 * When reading from WDOGITCR, this is mandatory to use.
 *
 * @return current value of WDOGITCR
 */
__WDT_INLINE uint32_t WDT_WDOGITCR__GET(void)
{
    return HAL_GET32(__WDT_WDOGITCR__ADDRESS());
}

/** WDT_WDOGITCR__GETB0() gets byte 0 of WDOGITCR's current value.
 *
 * When reading from byte 0 of WDOGITCR, this is mandatory to use.
 *
 * @return current value of byte 0 of WDOGITCR
 */
__WDT_INLINE uint8_t WDT_WDOGITCR__GETB0(void)
{
    return HAL_GET8(((uint8_t*)__WDT_WDOGITCR__ADDRESS()) + 0);
}

/* --------------------------- WDT.WDOGITCR.ITME --------------------------- */

/**
<pre>
  WDT.WDOGITCR.ITME:

    Integration Test Mode Enable

</pre> */

/*lint -parent(uint32_t, wdt_wdogitcr__itme_t) -strong(AJX)*/
typedef enum wdt_wdogitcr__itme_e                                                                                                      /*!< Integration Test Mode Enable */
{
    wdt_wdogitcr__itme_s0 = 0u,                                                                                                        /*!<      Disable Control of masked interrupt and reset signals from T...(more) */
    wdt_wdogitcr__itme_s1 = 1u                                                                                                         /*!<      Enable Control of masked interrupt and reset signals from Te...(more) */
} wdt_wdogitcr__itme_t;

#define WDT_WDOGITCR__ITME__Pos                                 0                                                                      /*!< Right-most bit position of ITME in WDT.WDOGITCR */
#define WDT_WDOGITCR__ITME__Msk                                 (0x00000001UL << WDT_WDOGITCR__ITME__Pos)                              /*!< Mask for ITME in WDT.WDOGITCR */
#define WDT_WDOGITCR__ITME__Shift(v)                            (((v) << WDT_WDOGITCR__ITME__Pos) & WDT_WDOGITCR__ITME__Msk)           /*!< Shift value 'v' into ITME and mask 'v' to fit it into ITME field */

/** WDT_WDOGITCR__ITME__SET() sets WDOGITCR.ITME to given value.
 *
 * When writing to WDOGITCR.ITME, this is recommended to use.
 *
 * @param bf_value new value for WDOGITCR.ITME
 */
__WDT_INLINE void WDT_WDOGITCR__ITME__SET(wdt_wdogitcr__itme_t bf_value)
{
    uint8_t reg = (uint8_t)bf_value & (uint8_t)0x01;
    WDT_WDOGITCR__SETB0(reg);
}

/** WDT_WDOGITCR__ITME__GET() gets WDOGITCR.ITME's current value.
 *
 * When reading from WDOGITCR.ITME, this is recommended to use.
 *
 * @return current value of WDOGITCR.ITME
 */
__WDT_INLINE wdt_wdogitcr__itme_t WDT_WDOGITCR__ITME__GET(void)
{
    uint8_t reg = WDT_WDOGITCR__GETB0();
    reg = (reg & (uint8_t)0x01);
    return (wdt_wdogitcr__itme_t)reg;
}

/** WDT_WDOGITCR__ITME__MODIFY() modifies WDOGITCR.ITME.
 *
 * This is recommended to use when setting more than one bitfield of WDT.WDOGITCR.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of WDT.WDOGITCR
 * @param bf_value new value for WDOGITCR.ITME
 * @return new value of WDT.WDOGITCR
 */
__WDT_INLINE uint32_t WDT_WDOGITCR__ITME__MODIFY(uint32_t reg, wdt_wdogitcr__itme_t bf_value)
{
    reg = (reg & ~WDT_WDOGITCR__ITME__Msk);
    reg = (reg | (WDT_WDOGITCR__ITME__Shift((uint32_t)bf_value)));
    return reg;
}

/** WDT_WDOGITCR__ITME__EXTRACT() extracts WDOGITCR.ITME.
 *
 * This is recommended to use when extracting more than one bitfield from WDT.WDOGITCR.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of WDT.WDOGITCR
 * @return current value of WDOGITCR.ITME
 */
__WDT_INLINE wdt_wdogitcr__itme_t WDT_WDOGITCR__ITME__EXTRACT(uint32_t reg)
{
    reg = (reg & WDT_WDOGITCR__ITME__Msk);
    reg = (reg >> WDT_WDOGITCR__ITME__Pos);
    return (wdt_wdogitcr__itme_t)reg;
}

/* -------------------------------------------------------------------------- */
/*                          WDOGITOP member of WDT_t                          */
/* -------------------------------------------------------------------------- */

/** __WDT_WDOGITOP__ADDRESS returns the address of member WDOGITOP.
 *
 * As indicated by the __ prefix, this is not intended for use by the FW. It is
 * here for readability only.
 *
 * @return address of WDOGITOP
 */
__WDT_INLINE uint32_t* __WDT_WDOGITOP__ADDRESS(void)
{
    return (uint32_t*)((uint32_t)__WDT_BASE_PTR() + (uint32_t)(offsetof(WDT_t, WDOGITOP)));
}

/** WDT_WDOGITOP__SET() sets WDOGITOP to given value.
 *
 * When writing to WDOGITOP, this is mandatory to use.
 *
 * @param value new value for WDOGITOP
 */
__WDT_INLINE void WDT_WDOGITOP__SET(uint32_t value)
{
    HAL_SET32(__WDT_WDOGITOP__ADDRESS(), value);
}

/** WDT_WDOGITOP__GET() gets WDOGITOP's current value.
 *
 * When reading from WDOGITOP, this is mandatory to use.
 *
 * @return current value of WDOGITOP
 */
__WDT_INLINE uint32_t WDT_WDOGITOP__GET(void)
{
    return HAL_GET32(__WDT_WDOGITOP__ADDRESS());
}

/* --------------------------- WDT.WDOGITOP.ITINT --------------------------- */

/**
<pre>
  WDT.WDOGITOP.ITINT:

    Integration Test WDOGINT Value

</pre> */

/*lint -parent(uint32_t, wdt_wdogitop__itint_t) -strong(AJX)*/
typedef enum wdt_wdogitop__itint_e                                                                                                     /*!< Integration Test WDOGINT Value */
{
    wdt_wdogitop__itint_s0 = 0u,                                                                                                       /*!<      Set Low the WDOGINT signal. */
    wdt_wdogitop__itint_s1 = 1u                                                                                                        /*!<      Set High the WDOGINT signal. */
} wdt_wdogitop__itint_t;

#define WDT_WDOGITOP__ITINT__Pos                                1                                                                      /*!< Right-most bit position of ITINT in WDT.WDOGITOP */
#define WDT_WDOGITOP__ITINT__Msk                                (0x00000001UL << WDT_WDOGITOP__ITINT__Pos)                             /*!< Mask for ITINT in WDT.WDOGITOP */
#define WDT_WDOGITOP__ITINT__Shift(v)                           (((v) << WDT_WDOGITOP__ITINT__Pos) & WDT_WDOGITOP__ITINT__Msk)         /*!< Shift value 'v' into ITINT and mask 'v' to fit it into ITINT field */

/** WDT_WDOGITOP__ITINT__SET() sets WDOGITOP.ITINT to given value.
 *
 * When writing to WDOGITOP.ITINT, this is recommended to use.
 *
 * @param bf_value new value for WDOGITOP.ITINT
 */
__WDT_INLINE void WDT_WDOGITOP__ITINT__SET(wdt_wdogitop__itint_t bf_value)
{
    uint32_t reg = WDT_WDOGITOP__ITINT__Shift((uint32_t)bf_value);
    WDT_WDOGITOP__SET(reg);
}


/** WDT_WDOGITOP__ITINT__MODIFY() modifies WDOGITOP.ITINT.
 *
 * This is recommended to use when setting more than one bitfield of WDT.WDOGITOP.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of WDT.WDOGITOP
 * @param bf_value new value for WDOGITOP.ITINT
 * @return new value of WDT.WDOGITOP
 */
__WDT_INLINE uint32_t WDT_WDOGITOP__ITINT__MODIFY(uint32_t reg, wdt_wdogitop__itint_t bf_value)
{
    reg = (reg & ~WDT_WDOGITOP__ITINT__Msk);
    reg = (reg | (WDT_WDOGITOP__ITINT__Shift((uint32_t)bf_value)));
    return reg;
}

/** WDT_WDOGITOP__ITINT__EXTRACT() extracts WDOGITOP.ITINT.
 *
 * This is recommended to use when extracting more than one bitfield from WDT.WDOGITOP.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of WDT.WDOGITOP
 * @return current value of WDOGITOP.ITINT
 */
__WDT_INLINE wdt_wdogitop__itint_t WDT_WDOGITOP__ITINT__EXTRACT(uint32_t reg)
{
    reg = (reg & WDT_WDOGITOP__ITINT__Msk);
    reg = (reg >> WDT_WDOGITOP__ITINT__Pos);
    return (wdt_wdogitop__itint_t)reg;
}

/* --------------------------- WDT.WDOGITOP.ITRES --------------------------- */

/**
<pre>
  WDT.WDOGITOP.ITRES:

    Integration Test WDOGRES Value

</pre> */

/*lint -parent(uint32_t, wdt_wdogitop__itres_t) -strong(AJX)*/
typedef enum wdt_wdogitop__itres_e                                                                                                     /*!< Integration Test WDOGRES Value */
{
    wdt_wdogitop__itres_s0 = 0u,                                                                                                       /*!<      Set Low the WDOGRES signal. */
    wdt_wdogitop__itres_s1 = 1u                                                                                                        /*!<      Set High the WDOGRES signal. */
} wdt_wdogitop__itres_t;

#define WDT_WDOGITOP__ITRES__Pos                                0                                                                      /*!< Right-most bit position of ITRES in WDT.WDOGITOP */
#define WDT_WDOGITOP__ITRES__Msk                                (0x00000001UL << WDT_WDOGITOP__ITRES__Pos)                             /*!< Mask for ITRES in WDT.WDOGITOP */
#define WDT_WDOGITOP__ITRES__Shift(v)                           (((v) << WDT_WDOGITOP__ITRES__Pos) & WDT_WDOGITOP__ITRES__Msk)         /*!< Shift value 'v' into ITRES and mask 'v' to fit it into ITRES field */

/** WDT_WDOGITOP__ITRES__SET() sets WDOGITOP.ITRES to given value.
 *
 * When writing to WDOGITOP.ITRES, this is recommended to use.
 *
 * @param bf_value new value for WDOGITOP.ITRES
 */
__WDT_INLINE void WDT_WDOGITOP__ITRES__SET(wdt_wdogitop__itres_t bf_value)
{
    uint32_t reg = WDT_WDOGITOP__ITRES__Shift((uint32_t)bf_value);
    WDT_WDOGITOP__SET(reg);
}


/** WDT_WDOGITOP__ITRES__MODIFY() modifies WDOGITOP.ITRES.
 *
 * This is recommended to use when setting more than one bitfield of WDT.WDOGITOP.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of WDT.WDOGITOP
 * @param bf_value new value for WDOGITOP.ITRES
 * @return new value of WDT.WDOGITOP
 */
__WDT_INLINE uint32_t WDT_WDOGITOP__ITRES__MODIFY(uint32_t reg, wdt_wdogitop__itres_t bf_value)
{
    reg = (reg & ~WDT_WDOGITOP__ITRES__Msk);
    reg = (reg | (WDT_WDOGITOP__ITRES__Shift((uint32_t)bf_value)));
    return reg;
}

/** WDT_WDOGITOP__ITRES__EXTRACT() extracts WDOGITOP.ITRES.
 *
 * This is recommended to use when extracting more than one bitfield from WDT.WDOGITOP.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of WDT.WDOGITOP
 * @return current value of WDOGITOP.ITRES
 */
__WDT_INLINE wdt_wdogitop__itres_t WDT_WDOGITOP__ITRES__EXTRACT(uint32_t reg)
{
    reg = (reg & WDT_WDOGITOP__ITRES__Msk);
    reg = (reg >> WDT_WDOGITOP__ITRES__Pos);
    return (wdt_wdogitop__itres_t)reg;
}

/* -------------------------------------------------------------------------- */
/*                       WDOGPERIPHID0 member of WDT_t                       */
/* -------------------------------------------------------------------------- */

/** __WDT_WDOGPERIPHID0__ADDRESS returns the address of member WDOGPERIPHID0.
 *
 * As indicated by the __ prefix, this is not intended for use by the FW. It is
 * here for readability only.
 *
 * @return address of WDOGPERIPHID0
 */
__WDT_INLINE uint32_t* __WDT_WDOGPERIPHID0__ADDRESS(void)
{
    return (uint32_t*)((uint32_t)__WDT_BASE_PTR() + (uint32_t)(offsetof(WDT_t, WDOGPERIPHID0)));
}

/** WDT_WDOGPERIPHID0__GET() gets WDOGPERIPHID0's current value.
 *
 * When reading from WDOGPERIPHID0, this is mandatory to use.
 *
 * @return current value of WDOGPERIPHID0
 */
__WDT_INLINE uint32_t WDT_WDOGPERIPHID0__GET(void)
{
    return HAL_GET32(__WDT_WDOGPERIPHID0__ADDRESS());
}

/** WDT_WDOGPERIPHID0__GETB0() gets byte 0 of WDOGPERIPHID0's current value.
 *
 * When reading from byte 0 of WDOGPERIPHID0, this is mandatory to use.
 *
 * @return current value of byte 0 of WDOGPERIPHID0
 */
__WDT_INLINE uint8_t WDT_WDOGPERIPHID0__GETB0(void)
{
    return HAL_GET8(((uint8_t*)__WDT_WDOGPERIPHID0__ADDRESS()) + 0);
}

/* --------------------- WDT.WDOGPERIPHID0.PARTNUMBER0 --------------------- */

/**
<pre>
  WDT.WDOGPERIPHID0.PARTNUMBER0:

    Part Number 0

</pre> */

#define WDT_WDOGPERIPHID0__PARTNUMBER0__Pos                     0                                                                      /*!< Right-most bit position of PartNumber0 in WDT.WDOGPERIPHID0 */
#define WDT_WDOGPERIPHID0__PARTNUMBER0__Msk                     (0x000000FFUL << WDT_WDOGPERIPHID0__PARTNUMBER0__Pos)                  /*!< Mask for PartNumber0 in WDT.WDOGPERIPHID0 */
#define WDT_WDOGPERIPHID0__PARTNUMBER0__Shift(v)                (((v) << WDT_WDOGPERIPHID0__PARTNUMBER0__Pos) & WDT_WDOGPERIPHID0__PARTNUMBER0__Msk) /*!< Shift value 'v' into PartNumber0 and mask 'v' to fit it into PartNumber0 field */

/** WDT_WDOGPERIPHID0__PARTNUMBER0__GET() gets WDOGPERIPHID0.PARTNUMBER0's current value.
 *
 * When reading from WDOGPERIPHID0.PARTNUMBER0, this is recommended to use.
 *
 * @return current value of WDOGPERIPHID0.PARTNUMBER0
 */
__WDT_INLINE uint32_t WDT_WDOGPERIPHID0__PARTNUMBER0__GET(void)
{
    uint8_t reg = WDT_WDOGPERIPHID0__GETB0();
    reg = (reg & (uint8_t)0xFF);
    return (uint32_t)reg;
}

/** WDT_WDOGPERIPHID0__PARTNUMBER0__EXTRACT() extracts WDOGPERIPHID0.PARTNUMBER0.
 *
 * This is recommended to use when extracting more than one bitfield from WDT.WDOGPERIPHID0.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of WDT.WDOGPERIPHID0
 * @return current value of WDOGPERIPHID0.PARTNUMBER0
 */
__WDT_INLINE uint32_t WDT_WDOGPERIPHID0__PARTNUMBER0__EXTRACT(uint32_t reg)
{
    reg = (reg & WDT_WDOGPERIPHID0__PARTNUMBER0__Msk);
    reg = (reg >> WDT_WDOGPERIPHID0__PARTNUMBER0__Pos);
    return (uint32_t)reg;
}

/* -------------------------------------------------------------------------- */
/*                       WDOGPERIPHID1 member of WDT_t                       */
/* -------------------------------------------------------------------------- */

/** __WDT_WDOGPERIPHID1__ADDRESS returns the address of member WDOGPERIPHID1.
 *
 * As indicated by the __ prefix, this is not intended for use by the FW. It is
 * here for readability only.
 *
 * @return address of WDOGPERIPHID1
 */
__WDT_INLINE uint32_t* __WDT_WDOGPERIPHID1__ADDRESS(void)
{
    return (uint32_t*)((uint32_t)__WDT_BASE_PTR() + (uint32_t)(offsetof(WDT_t, WDOGPERIPHID1)));
}

/** WDT_WDOGPERIPHID1__GET() gets WDOGPERIPHID1's current value.
 *
 * When reading from WDOGPERIPHID1, this is mandatory to use.
 *
 * @return current value of WDOGPERIPHID1
 */
__WDT_INLINE uint32_t WDT_WDOGPERIPHID1__GET(void)
{
    return HAL_GET32(__WDT_WDOGPERIPHID1__ADDRESS());
}

/* ---------------------- WDT.WDOGPERIPHID1.DESIGNER0 ---------------------- */

/**
<pre>
  WDT.WDOGPERIPHID1.DESIGNER0:

    Designer Number 0

</pre> */

#define WDT_WDOGPERIPHID1__DESIGNER0__Pos                       4                                                                      /*!< Right-most bit position of Designer0 in WDT.WDOGPERIPHID1 */
#define WDT_WDOGPERIPHID1__DESIGNER0__Msk                       (0x0000000FUL << WDT_WDOGPERIPHID1__DESIGNER0__Pos)                    /*!< Mask for Designer0 in WDT.WDOGPERIPHID1 */
#define WDT_WDOGPERIPHID1__DESIGNER0__Shift(v)                  (((v) << WDT_WDOGPERIPHID1__DESIGNER0__Pos) & WDT_WDOGPERIPHID1__DESIGNER0__Msk) /*!< Shift value 'v' into Designer0 and mask 'v' to fit it into Designer0 field */

/** WDT_WDOGPERIPHID1__DESIGNER0__GET() gets WDOGPERIPHID1.DESIGNER0's current value.
 *
 * When reading from WDOGPERIPHID1.DESIGNER0, this is recommended to use.
 *
 * @return current value of WDOGPERIPHID1.DESIGNER0
 */
__WDT_INLINE uint32_t WDT_WDOGPERIPHID1__DESIGNER0__GET(void)
{
    uint32_t reg = WDT_WDOGPERIPHID1__GET();
    reg = (reg & WDT_WDOGPERIPHID1__DESIGNER0__Msk);
    reg = (reg >> WDT_WDOGPERIPHID1__DESIGNER0__Pos);
    return (uint32_t)reg;
}

/** WDT_WDOGPERIPHID1__DESIGNER0__EXTRACT() extracts WDOGPERIPHID1.DESIGNER0.
 *
 * This is recommended to use when extracting more than one bitfield from WDT.WDOGPERIPHID1.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of WDT.WDOGPERIPHID1
 * @return current value of WDOGPERIPHID1.DESIGNER0
 */
__WDT_INLINE uint32_t WDT_WDOGPERIPHID1__DESIGNER0__EXTRACT(uint32_t reg)
{
    reg = (reg & WDT_WDOGPERIPHID1__DESIGNER0__Msk);
    reg = (reg >> WDT_WDOGPERIPHID1__DESIGNER0__Pos);
    return (uint32_t)reg;
}

/* --------------------- WDT.WDOGPERIPHID1.PARTNUMBER1 --------------------- */

/**
<pre>
  WDT.WDOGPERIPHID1.PARTNUMBER1:

    Part Number 1

</pre> */

#define WDT_WDOGPERIPHID1__PARTNUMBER1__Pos                     0                                                                      /*!< Right-most bit position of PartNumber1 in WDT.WDOGPERIPHID1 */
#define WDT_WDOGPERIPHID1__PARTNUMBER1__Msk                     (0x0000000FUL << WDT_WDOGPERIPHID1__PARTNUMBER1__Pos)                  /*!< Mask for PartNumber1 in WDT.WDOGPERIPHID1 */
#define WDT_WDOGPERIPHID1__PARTNUMBER1__Shift(v)                (((v) << WDT_WDOGPERIPHID1__PARTNUMBER1__Pos) & WDT_WDOGPERIPHID1__PARTNUMBER1__Msk) /*!< Shift value 'v' into PartNumber1 and mask 'v' to fit it into PartNumber1 field */

/** WDT_WDOGPERIPHID1__PARTNUMBER1__GET() gets WDOGPERIPHID1.PARTNUMBER1's current value.
 *
 * When reading from WDOGPERIPHID1.PARTNUMBER1, this is recommended to use.
 *
 * @return current value of WDOGPERIPHID1.PARTNUMBER1
 */
__WDT_INLINE uint32_t WDT_WDOGPERIPHID1__PARTNUMBER1__GET(void)
{
    uint32_t reg = WDT_WDOGPERIPHID1__GET();
    reg = (reg & WDT_WDOGPERIPHID1__PARTNUMBER1__Msk);
    reg = (reg >> WDT_WDOGPERIPHID1__PARTNUMBER1__Pos);
    return (uint32_t)reg;
}

/** WDT_WDOGPERIPHID1__PARTNUMBER1__EXTRACT() extracts WDOGPERIPHID1.PARTNUMBER1.
 *
 * This is recommended to use when extracting more than one bitfield from WDT.WDOGPERIPHID1.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of WDT.WDOGPERIPHID1
 * @return current value of WDOGPERIPHID1.PARTNUMBER1
 */
__WDT_INLINE uint32_t WDT_WDOGPERIPHID1__PARTNUMBER1__EXTRACT(uint32_t reg)
{
    reg = (reg & WDT_WDOGPERIPHID1__PARTNUMBER1__Msk);
    reg = (reg >> WDT_WDOGPERIPHID1__PARTNUMBER1__Pos);
    return (uint32_t)reg;
}

/* -------------------------------------------------------------------------- */
/*                       WDOGPERIPHID2 member of WDT_t                       */
/* -------------------------------------------------------------------------- */

/** __WDT_WDOGPERIPHID2__ADDRESS returns the address of member WDOGPERIPHID2.
 *
 * As indicated by the __ prefix, this is not intended for use by the FW. It is
 * here for readability only.
 *
 * @return address of WDOGPERIPHID2
 */
__WDT_INLINE uint32_t* __WDT_WDOGPERIPHID2__ADDRESS(void)
{
    return (uint32_t*)((uint32_t)__WDT_BASE_PTR() + (uint32_t)(offsetof(WDT_t, WDOGPERIPHID2)));
}

/** WDT_WDOGPERIPHID2__GET() gets WDOGPERIPHID2's current value.
 *
 * When reading from WDOGPERIPHID2, this is mandatory to use.
 *
 * @return current value of WDOGPERIPHID2
 */
__WDT_INLINE uint32_t WDT_WDOGPERIPHID2__GET(void)
{
    return HAL_GET32(__WDT_WDOGPERIPHID2__ADDRESS());
}

/* ----------------------- WDT.WDOGPERIPHID2.REVISION ----------------------- */

/**
<pre>
  WDT.WDOGPERIPHID2.REVISION:

    Revision Number

</pre> */

#define WDT_WDOGPERIPHID2__REVISION__Pos                        4                                                                      /*!< Right-most bit position of Revision in WDT.WDOGPERIPHID2 */
#define WDT_WDOGPERIPHID2__REVISION__Msk                        (0x0000000FUL << WDT_WDOGPERIPHID2__REVISION__Pos)                     /*!< Mask for Revision in WDT.WDOGPERIPHID2 */
#define WDT_WDOGPERIPHID2__REVISION__Shift(v)                   (((v) << WDT_WDOGPERIPHID2__REVISION__Pos) & WDT_WDOGPERIPHID2__REVISION__Msk) /*!< Shift value 'v' into Revision and mask 'v' to fit it into Revision field */

/** WDT_WDOGPERIPHID2__REVISION__GET() gets WDOGPERIPHID2.REVISION's current value.
 *
 * When reading from WDOGPERIPHID2.REVISION, this is recommended to use.
 *
 * @return current value of WDOGPERIPHID2.REVISION
 */
__WDT_INLINE uint32_t WDT_WDOGPERIPHID2__REVISION__GET(void)
{
    uint32_t reg = WDT_WDOGPERIPHID2__GET();
    reg = (reg & WDT_WDOGPERIPHID2__REVISION__Msk);
    reg = (reg >> WDT_WDOGPERIPHID2__REVISION__Pos);
    return (uint32_t)reg;
}

/** WDT_WDOGPERIPHID2__REVISION__EXTRACT() extracts WDOGPERIPHID2.REVISION.
 *
 * This is recommended to use when extracting more than one bitfield from WDT.WDOGPERIPHID2.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of WDT.WDOGPERIPHID2
 * @return current value of WDOGPERIPHID2.REVISION
 */
__WDT_INLINE uint32_t WDT_WDOGPERIPHID2__REVISION__EXTRACT(uint32_t reg)
{
    reg = (reg & WDT_WDOGPERIPHID2__REVISION__Msk);
    reg = (reg >> WDT_WDOGPERIPHID2__REVISION__Pos);
    return (uint32_t)reg;
}

/* ---------------------- WDT.WDOGPERIPHID2.DESIGNER1 ---------------------- */

/**
<pre>
  WDT.WDOGPERIPHID2.DESIGNER1:

    Designer Number 1

</pre> */

#define WDT_WDOGPERIPHID2__DESIGNER1__Pos                       0                                                                      /*!< Right-most bit position of Designer1 in WDT.WDOGPERIPHID2 */
#define WDT_WDOGPERIPHID2__DESIGNER1__Msk                       (0x0000000FUL << WDT_WDOGPERIPHID2__DESIGNER1__Pos)                    /*!< Mask for Designer1 in WDT.WDOGPERIPHID2 */
#define WDT_WDOGPERIPHID2__DESIGNER1__Shift(v)                  (((v) << WDT_WDOGPERIPHID2__DESIGNER1__Pos) & WDT_WDOGPERIPHID2__DESIGNER1__Msk) /*!< Shift value 'v' into Designer1 and mask 'v' to fit it into Designer1 field */

/** WDT_WDOGPERIPHID2__DESIGNER1__GET() gets WDOGPERIPHID2.DESIGNER1's current value.
 *
 * When reading from WDOGPERIPHID2.DESIGNER1, this is recommended to use.
 *
 * @return current value of WDOGPERIPHID2.DESIGNER1
 */
__WDT_INLINE uint32_t WDT_WDOGPERIPHID2__DESIGNER1__GET(void)
{
    uint32_t reg = WDT_WDOGPERIPHID2__GET();
    reg = (reg & WDT_WDOGPERIPHID2__DESIGNER1__Msk);
    reg = (reg >> WDT_WDOGPERIPHID2__DESIGNER1__Pos);
    return (uint32_t)reg;
}

/** WDT_WDOGPERIPHID2__DESIGNER1__EXTRACT() extracts WDOGPERIPHID2.DESIGNER1.
 *
 * This is recommended to use when extracting more than one bitfield from WDT.WDOGPERIPHID2.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of WDT.WDOGPERIPHID2
 * @return current value of WDOGPERIPHID2.DESIGNER1
 */
__WDT_INLINE uint32_t WDT_WDOGPERIPHID2__DESIGNER1__EXTRACT(uint32_t reg)
{
    reg = (reg & WDT_WDOGPERIPHID2__DESIGNER1__Msk);
    reg = (reg >> WDT_WDOGPERIPHID2__DESIGNER1__Pos);
    return (uint32_t)reg;
}

/* -------------------------------------------------------------------------- */
/*                       WDOGPERIPHID3 member of WDT_t                       */
/* -------------------------------------------------------------------------- */

/** __WDT_WDOGPERIPHID3__ADDRESS returns the address of member WDOGPERIPHID3.
 *
 * As indicated by the __ prefix, this is not intended for use by the FW. It is
 * here for readability only.
 *
 * @return address of WDOGPERIPHID3
 */
__WDT_INLINE uint32_t* __WDT_WDOGPERIPHID3__ADDRESS(void)
{
    return (uint32_t*)((uint32_t)__WDT_BASE_PTR() + (uint32_t)(offsetof(WDT_t, WDOGPERIPHID3)));
}

/** WDT_WDOGPERIPHID3__GET() gets WDOGPERIPHID3's current value.
 *
 * When reading from WDOGPERIPHID3, this is mandatory to use.
 *
 * @return current value of WDOGPERIPHID3
 */
__WDT_INLINE uint32_t WDT_WDOGPERIPHID3__GET(void)
{
    return HAL_GET32(__WDT_WDOGPERIPHID3__ADDRESS());
}

/** WDT_WDOGPERIPHID3__GETB0() gets byte 0 of WDOGPERIPHID3's current value.
 *
 * When reading from byte 0 of WDOGPERIPHID3, this is mandatory to use.
 *
 * @return current value of byte 0 of WDOGPERIPHID3
 */
__WDT_INLINE uint8_t WDT_WDOGPERIPHID3__GETB0(void)
{
    return HAL_GET8(((uint8_t*)__WDT_WDOGPERIPHID3__ADDRESS()) + 0);
}

/* -------------------- WDT.WDOGPERIPHID3.CONFIGURATION -------------------- */

/**
<pre>
  WDT.WDOGPERIPHID3.CONFIGURATION:

    Configuration Number

</pre> */

#define WDT_WDOGPERIPHID3__CONFIGURATION__Pos                   0                                                                      /*!< Right-most bit position of Configuration in WDT.WDOGPERIPHID3 */
#define WDT_WDOGPERIPHID3__CONFIGURATION__Msk                   (0x000000FFUL << WDT_WDOGPERIPHID3__CONFIGURATION__Pos)                /*!< Mask for Configuration in WDT.WDOGPERIPHID3 */
#define WDT_WDOGPERIPHID3__CONFIGURATION__Shift(v)              (((v) << WDT_WDOGPERIPHID3__CONFIGURATION__Pos) & WDT_WDOGPERIPHID3__CONFIGURATION__Msk) /*!< Shift value 'v' into Configuration and mask 'v' to fit it into Configuration field */

/** WDT_WDOGPERIPHID3__CONFIGURATION__GET() gets WDOGPERIPHID3.CONFIGURATION's current value.
 *
 * When reading from WDOGPERIPHID3.CONFIGURATION, this is recommended to use.
 *
 * @return current value of WDOGPERIPHID3.CONFIGURATION
 */
__WDT_INLINE uint32_t WDT_WDOGPERIPHID3__CONFIGURATION__GET(void)
{
    uint8_t reg = WDT_WDOGPERIPHID3__GETB0();
    reg = (reg & (uint8_t)0xFF);
    return (uint32_t)reg;
}

/** WDT_WDOGPERIPHID3__CONFIGURATION__EXTRACT() extracts WDOGPERIPHID3.CONFIGURATION.
 *
 * This is recommended to use when extracting more than one bitfield from WDT.WDOGPERIPHID3.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of WDT.WDOGPERIPHID3
 * @return current value of WDOGPERIPHID3.CONFIGURATION
 */
__WDT_INLINE uint32_t WDT_WDOGPERIPHID3__CONFIGURATION__EXTRACT(uint32_t reg)
{
    reg = (reg & WDT_WDOGPERIPHID3__CONFIGURATION__Msk);
    reg = (reg >> WDT_WDOGPERIPHID3__CONFIGURATION__Pos);
    return (uint32_t)reg;
}

/* -------------------------------------------------------------------------- */
/*                        WDOGPCELLID0 member of WDT_t                        */
/* -------------------------------------------------------------------------- */

/** __WDT_WDOGPCELLID0__ADDRESS returns the address of member WDOGPCELLID0.
 *
 * As indicated by the __ prefix, this is not intended for use by the FW. It is
 * here for readability only.
 *
 * @return address of WDOGPCELLID0
 */
__WDT_INLINE uint32_t* __WDT_WDOGPCELLID0__ADDRESS(void)
{
    return (uint32_t*)((uint32_t)__WDT_BASE_PTR() + (uint32_t)(offsetof(WDT_t, WDOGPCELLID0)));
}

/** WDT_WDOGPCELLID0__GET() gets WDOGPCELLID0's current value.
 *
 * When reading from WDOGPCELLID0, this is mandatory to use.
 *
 * @return current value of WDOGPCELLID0
 */
__WDT_INLINE uint32_t WDT_WDOGPCELLID0__GET(void)
{
    return HAL_GET32(__WDT_WDOGPCELLID0__ADDRESS());
}

/** WDT_WDOGPCELLID0__GETB0() gets byte 0 of WDOGPCELLID0's current value.
 *
 * When reading from byte 0 of WDOGPCELLID0, this is mandatory to use.
 *
 * @return current value of byte 0 of WDOGPCELLID0
 */
__WDT_INLINE uint8_t WDT_WDOGPCELLID0__GETB0(void)
{
    return HAL_GET8(((uint8_t*)__WDT_WDOGPCELLID0__ADDRESS()) + 0);
}

/* --------------------- WDT.WDOGPCELLID0.WDOGPCELLID0 --------------------- */

/**
<pre>
  WDT.WDOGPCELLID0.WDOGPCELLID0:

    Cell Identification Number 0

</pre> */

#define WDT_WDOGPCELLID0__WDOGPCELLID0__Pos                     0                                                                      /*!< Right-most bit position of WDOGPCELLID0 in WDT.WDOGPCELLID0 */
#define WDT_WDOGPCELLID0__WDOGPCELLID0__Msk                     (0x000000FFUL << WDT_WDOGPCELLID0__WDOGPCELLID0__Pos)                  /*!< Mask for WDOGPCELLID0 in WDT.WDOGPCELLID0 */
#define WDT_WDOGPCELLID0__WDOGPCELLID0__Shift(v)                (((v) << WDT_WDOGPCELLID0__WDOGPCELLID0__Pos) & WDT_WDOGPCELLID0__WDOGPCELLID0__Msk) /*!< Shift value 'v' into WDOGPCELLID0 and mask 'v' to fit it into WDOGPCELLID0 field */

/** WDT_WDOGPCELLID0__WDOGPCELLID0__GET() gets WDOGPCELLID0.WDOGPCELLID0's current value.
 *
 * When reading from WDOGPCELLID0.WDOGPCELLID0, this is recommended to use.
 *
 * @return current value of WDOGPCELLID0.WDOGPCELLID0
 */
__WDT_INLINE uint32_t WDT_WDOGPCELLID0__WDOGPCELLID0__GET(void)
{
    uint8_t reg = WDT_WDOGPCELLID0__GETB0();
    reg = (reg & (uint8_t)0xFF);
    return (uint32_t)reg;
}

/** WDT_WDOGPCELLID0__WDOGPCELLID0__EXTRACT() extracts WDOGPCELLID0.WDOGPCELLID0.
 *
 * This is recommended to use when extracting more than one bitfield from WDT.WDOGPCELLID0.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of WDT.WDOGPCELLID0
 * @return current value of WDOGPCELLID0.WDOGPCELLID0
 */
__WDT_INLINE uint32_t WDT_WDOGPCELLID0__WDOGPCELLID0__EXTRACT(uint32_t reg)
{
    reg = (reg & WDT_WDOGPCELLID0__WDOGPCELLID0__Msk);
    reg = (reg >> WDT_WDOGPCELLID0__WDOGPCELLID0__Pos);
    return (uint32_t)reg;
}

/* -------------------------------------------------------------------------- */
/*                        WDOGPCELLID1 member of WDT_t                        */
/* -------------------------------------------------------------------------- */

/** __WDT_WDOGPCELLID1__ADDRESS returns the address of member WDOGPCELLID1.
 *
 * As indicated by the __ prefix, this is not intended for use by the FW. It is
 * here for readability only.
 *
 * @return address of WDOGPCELLID1
 */
__WDT_INLINE uint32_t* __WDT_WDOGPCELLID1__ADDRESS(void)
{
    return (uint32_t*)((uint32_t)__WDT_BASE_PTR() + (uint32_t)(offsetof(WDT_t, WDOGPCELLID1)));
}

/** WDT_WDOGPCELLID1__GET() gets WDOGPCELLID1's current value.
 *
 * When reading from WDOGPCELLID1, this is mandatory to use.
 *
 * @return current value of WDOGPCELLID1
 */
__WDT_INLINE uint32_t WDT_WDOGPCELLID1__GET(void)
{
    return HAL_GET32(__WDT_WDOGPCELLID1__ADDRESS());
}

/** WDT_WDOGPCELLID1__GETB0() gets byte 0 of WDOGPCELLID1's current value.
 *
 * When reading from byte 0 of WDOGPCELLID1, this is mandatory to use.
 *
 * @return current value of byte 0 of WDOGPCELLID1
 */
__WDT_INLINE uint8_t WDT_WDOGPCELLID1__GETB0(void)
{
    return HAL_GET8(((uint8_t*)__WDT_WDOGPCELLID1__ADDRESS()) + 0);
}

/* --------------------- WDT.WDOGPCELLID1.WDOGPCELLID1 --------------------- */

/**
<pre>
  WDT.WDOGPCELLID1.WDOGPCELLID1:

    Cell Identification Number 1

</pre> */

#define WDT_WDOGPCELLID1__WDOGPCELLID1__Pos                     0                                                                      /*!< Right-most bit position of WDOGPCELLID1 in WDT.WDOGPCELLID1 */
#define WDT_WDOGPCELLID1__WDOGPCELLID1__Msk                     (0x000000FFUL << WDT_WDOGPCELLID1__WDOGPCELLID1__Pos)                  /*!< Mask for WDOGPCELLID1 in WDT.WDOGPCELLID1 */
#define WDT_WDOGPCELLID1__WDOGPCELLID1__Shift(v)                (((v) << WDT_WDOGPCELLID1__WDOGPCELLID1__Pos) & WDT_WDOGPCELLID1__WDOGPCELLID1__Msk) /*!< Shift value 'v' into WDOGPCELLID1 and mask 'v' to fit it into WDOGPCELLID1 field */

/** WDT_WDOGPCELLID1__WDOGPCELLID1__GET() gets WDOGPCELLID1.WDOGPCELLID1's current value.
 *
 * When reading from WDOGPCELLID1.WDOGPCELLID1, this is recommended to use.
 *
 * @return current value of WDOGPCELLID1.WDOGPCELLID1
 */
__WDT_INLINE uint32_t WDT_WDOGPCELLID1__WDOGPCELLID1__GET(void)
{
    uint8_t reg = WDT_WDOGPCELLID1__GETB0();
    reg = (reg & (uint8_t)0xFF);
    return (uint32_t)reg;
}

/** WDT_WDOGPCELLID1__WDOGPCELLID1__EXTRACT() extracts WDOGPCELLID1.WDOGPCELLID1.
 *
 * This is recommended to use when extracting more than one bitfield from WDT.WDOGPCELLID1.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of WDT.WDOGPCELLID1
 * @return current value of WDOGPCELLID1.WDOGPCELLID1
 */
__WDT_INLINE uint32_t WDT_WDOGPCELLID1__WDOGPCELLID1__EXTRACT(uint32_t reg)
{
    reg = (reg & WDT_WDOGPCELLID1__WDOGPCELLID1__Msk);
    reg = (reg >> WDT_WDOGPCELLID1__WDOGPCELLID1__Pos);
    return (uint32_t)reg;
}

/* -------------------------------------------------------------------------- */
/*                        WDOGPCELLID2 member of WDT_t                        */
/* -------------------------------------------------------------------------- */

/** __WDT_WDOGPCELLID2__ADDRESS returns the address of member WDOGPCELLID2.
 *
 * As indicated by the __ prefix, this is not intended for use by the FW. It is
 * here for readability only.
 *
 * @return address of WDOGPCELLID2
 */
__WDT_INLINE uint32_t* __WDT_WDOGPCELLID2__ADDRESS(void)
{
    return (uint32_t*)((uint32_t)__WDT_BASE_PTR() + (uint32_t)(offsetof(WDT_t, WDOGPCELLID2)));
}

/** WDT_WDOGPCELLID2__GET() gets WDOGPCELLID2's current value.
 *
 * When reading from WDOGPCELLID2, this is mandatory to use.
 *
 * @return current value of WDOGPCELLID2
 */
__WDT_INLINE uint32_t WDT_WDOGPCELLID2__GET(void)
{
    return HAL_GET32(__WDT_WDOGPCELLID2__ADDRESS());
}

/** WDT_WDOGPCELLID2__GETB0() gets byte 0 of WDOGPCELLID2's current value.
 *
 * When reading from byte 0 of WDOGPCELLID2, this is mandatory to use.
 *
 * @return current value of byte 0 of WDOGPCELLID2
 */
__WDT_INLINE uint8_t WDT_WDOGPCELLID2__GETB0(void)
{
    return HAL_GET8(((uint8_t*)__WDT_WDOGPCELLID2__ADDRESS()) + 0);
}

/* --------------------- WDT.WDOGPCELLID2.WDOGPCELLID2 --------------------- */

/**
<pre>
  WDT.WDOGPCELLID2.WDOGPCELLID2:

    Cell Identification Number 2

</pre> */

#define WDT_WDOGPCELLID2__WDOGPCELLID2__Pos                     0                                                                      /*!< Right-most bit position of WDOGPCELLID2 in WDT.WDOGPCELLID2 */
#define WDT_WDOGPCELLID2__WDOGPCELLID2__Msk                     (0x000000FFUL << WDT_WDOGPCELLID2__WDOGPCELLID2__Pos)                  /*!< Mask for WDOGPCELLID2 in WDT.WDOGPCELLID2 */
#define WDT_WDOGPCELLID2__WDOGPCELLID2__Shift(v)                (((v) << WDT_WDOGPCELLID2__WDOGPCELLID2__Pos) & WDT_WDOGPCELLID2__WDOGPCELLID2__Msk) /*!< Shift value 'v' into WDOGPCELLID2 and mask 'v' to fit it into WDOGPCELLID2 field */

/** WDT_WDOGPCELLID2__WDOGPCELLID2__GET() gets WDOGPCELLID2.WDOGPCELLID2's current value.
 *
 * When reading from WDOGPCELLID2.WDOGPCELLID2, this is recommended to use.
 *
 * @return current value of WDOGPCELLID2.WDOGPCELLID2
 */
__WDT_INLINE uint32_t WDT_WDOGPCELLID2__WDOGPCELLID2__GET(void)
{
    uint8_t reg = WDT_WDOGPCELLID2__GETB0();
    reg = (reg & (uint8_t)0xFF);
    return (uint32_t)reg;
}

/** WDT_WDOGPCELLID2__WDOGPCELLID2__EXTRACT() extracts WDOGPCELLID2.WDOGPCELLID2.
 *
 * This is recommended to use when extracting more than one bitfield from WDT.WDOGPCELLID2.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of WDT.WDOGPCELLID2
 * @return current value of WDOGPCELLID2.WDOGPCELLID2
 */
__WDT_INLINE uint32_t WDT_WDOGPCELLID2__WDOGPCELLID2__EXTRACT(uint32_t reg)
{
    reg = (reg & WDT_WDOGPCELLID2__WDOGPCELLID2__Msk);
    reg = (reg >> WDT_WDOGPCELLID2__WDOGPCELLID2__Pos);
    return (uint32_t)reg;
}

/* -------------------------------------------------------------------------- */
/*                        WDOGPCELLID3 member of WDT_t                        */
/* -------------------------------------------------------------------------- */

/** __WDT_WDOGPCELLID3__ADDRESS returns the address of member WDOGPCELLID3.
 *
 * As indicated by the __ prefix, this is not intended for use by the FW. It is
 * here for readability only.
 *
 * @return address of WDOGPCELLID3
 */
__WDT_INLINE uint32_t* __WDT_WDOGPCELLID3__ADDRESS(void)
{
    return (uint32_t*)((uint32_t)__WDT_BASE_PTR() + (uint32_t)(offsetof(WDT_t, WDOGPCELLID3)));
}

/** WDT_WDOGPCELLID3__GET() gets WDOGPCELLID3's current value.
 *
 * When reading from WDOGPCELLID3, this is mandatory to use.
 *
 * @return current value of WDOGPCELLID3
 */
__WDT_INLINE uint32_t WDT_WDOGPCELLID3__GET(void)
{
    return HAL_GET32(__WDT_WDOGPCELLID3__ADDRESS());
}

/** WDT_WDOGPCELLID3__GETB0() gets byte 0 of WDOGPCELLID3's current value.
 *
 * When reading from byte 0 of WDOGPCELLID3, this is mandatory to use.
 *
 * @return current value of byte 0 of WDOGPCELLID3
 */
__WDT_INLINE uint8_t WDT_WDOGPCELLID3__GETB0(void)
{
    return HAL_GET8(((uint8_t*)__WDT_WDOGPCELLID3__ADDRESS()) + 0);
}

/* --------------------- WDT.WDOGPCELLID3.WDOGPCELLID3 --------------------- */

/**
<pre>
  WDT.WDOGPCELLID3.WDOGPCELLID3:

    Cell Identification Number 3

</pre> */

#define WDT_WDOGPCELLID3__WDOGPCELLID3__Pos                     0                                                                      /*!< Right-most bit position of WDOGPCELLID3 in WDT.WDOGPCELLID3 */
#define WDT_WDOGPCELLID3__WDOGPCELLID3__Msk                     (0x000000FFUL << WDT_WDOGPCELLID3__WDOGPCELLID3__Pos)                  /*!< Mask for WDOGPCELLID3 in WDT.WDOGPCELLID3 */
#define WDT_WDOGPCELLID3__WDOGPCELLID3__Shift(v)                (((v) << WDT_WDOGPCELLID3__WDOGPCELLID3__Pos) & WDT_WDOGPCELLID3__WDOGPCELLID3__Msk) /*!< Shift value 'v' into WDOGPCELLID3 and mask 'v' to fit it into WDOGPCELLID3 field */

/** WDT_WDOGPCELLID3__WDOGPCELLID3__GET() gets WDOGPCELLID3.WDOGPCELLID3's current value.
 *
 * When reading from WDOGPCELLID3.WDOGPCELLID3, this is recommended to use.
 *
 * @return current value of WDOGPCELLID3.WDOGPCELLID3
 */
__WDT_INLINE uint32_t WDT_WDOGPCELLID3__WDOGPCELLID3__GET(void)
{
    uint8_t reg = WDT_WDOGPCELLID3__GETB0();
    reg = (reg & (uint8_t)0xFF);
    return (uint32_t)reg;
}

/** WDT_WDOGPCELLID3__WDOGPCELLID3__EXTRACT() extracts WDOGPCELLID3.WDOGPCELLID3.
 *
 * This is recommended to use when extracting more than one bitfield from WDT.WDOGPCELLID3.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of WDT.WDOGPCELLID3
 * @return current value of WDOGPCELLID3.WDOGPCELLID3
 */
__WDT_INLINE uint32_t WDT_WDOGPCELLID3__WDOGPCELLID3__EXTRACT(uint32_t reg)
{
    reg = (reg & WDT_WDOGPCELLID3__WDOGPCELLID3__Msk);
    reg = (reg >> WDT_WDOGPCELLID3__WDOGPCELLID3__Pos);
    return (uint32_t)reg;
}

/** @} */ /* End of group wdt block */


/** @} */ /* End of group SHASTA */

/** @} */ /* End of group Infineon */

#endif /* _SHASTA_HAL_WDT_H_ */
