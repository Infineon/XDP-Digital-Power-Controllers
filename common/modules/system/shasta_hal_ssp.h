/**
 * @file     shasta_hal_ssp.h
 *
 * @brief    Definitions for the SHASTA Hardware Access Layer (HAL).
 *
 * @version  v0.0
 * @date     2015-11-16
 *
 * @note
 */

/* ============================================================================
** Copyright (C) 2016 Infineon. All rights reserved.
**               Infineon Technologies, PMM SYS / DES
** ============================================================================
**
** ============================================================================
** This document contains proprietary information. Passing on and
** copying of this document, and communication of its contents is not
** permitted without prior written authorisation.
** ============================================================================
*
*/
/* This file is automatically generated. Do not edit! */
/*lint -save -e960 */


#ifndef _SHASTA_HAL_SSP_H_
#define _SHASTA_HAL_SSP_H_

#include    <stdint.h>

#include    <stddef.h>
#include    "fw_config.h"
#include    "hal_api.h"

/** @addtogroup Infineon
 * @{
 */

/** @addtogroup SHASTA
 * @{
 */


/** @addtogroup ssp
 * @{
 */

#if defined ( __CC_ARM )
#define __SSP_INLINE  static __inline __attribute__((always_inline))
#elif defined ( __GNUC__ )
#define __SSP_INLINE  static inline __attribute__((always_inline))
#else
#warning Unsupported Compiler
#define __SSP_INLINE  static inline
#endif

/** register file of the ssp block.
 */
typedef struct _SSP_s
{
    volatile        uint32_t        SSPCR0                      ; /*!< (@0x00000000) Control Register 0 */
    volatile        uint32_t        SSPCR1                      ; /*!< (@0x00000004) Control Register 1 */
    volatile        uint32_t        SSPDR                       ; /*!< (@0x00000008) Data Register */
    volatile        uint32_t        SSPSR                       ; /*!< (@0x0000000C) Status Register */
    volatile        uint32_t        SSPCPSR                     ; /*!< (@0x00000010) Clock Prescale Register */
    volatile        uint32_t        SSPIMSC                     ; /*!< (@0x00000014) Interrupt Mask Set or Clear Register */
    volatile        uint32_t        SSPRIS                      ; /*!< (@0x00000018) Raw Interrupt Status Register */
    volatile        uint32_t        SSPMIS                      ; /*!< (@0x0000001C) Masked Interrupt Status Register */
    volatile        uint32_t        SSPICR                      ; /*!< (@0x00000020) Interrupt Clear Register */
    volatile        uint32_t        SSPDMACR                    ; /*!< (@0x00000024) DMA Control Register */
    volatile        uint32_t        REGMEMGAP0[22]              ; /*!< (@0x00000028) gap in address space */
    volatile        uint32_t        SSPTCR                      ; /*!< (@0x00000080) Test Control Register */
    volatile        uint32_t        SSPITIP                     ; /*!< (@0x00000084) Integration Test Input Register */
    volatile        uint32_t        SSPITOP                     ; /*!< (@0x00000088) Integration Test Output Register */
    volatile        uint32_t        SSPTDR                      ; /*!< (@0x0000008C) Test Data Register */
    volatile        uint32_t        REGMEMGAP1[980]             ; /*!< (@0x00000090) gap in address space */
    volatile        uint32_t        SSPPERIPHID0                ; /*!< (@0x00000FE0) Peripheral Identification Register 0 */
    volatile        uint32_t        SSPPERIPHID1                ; /*!< (@0x00000FE4) Peripheral Identification Register 1 */
    volatile        uint32_t        SSPPERIPHID2                ; /*!< (@0x00000FE8) Peripheral Identification Register 2 */
    volatile        uint32_t        SSPPERIPHID3                ; /*!< (@0x00000FEC) Peripheral Identification Register 3 */
    volatile        uint32_t        SSPPCELLID0                 ; /*!< (@0x00000FF0) PrimeCell Identification Register 0 */
    volatile        uint32_t        SSPPCELLID1                 ; /*!< (@0x00000FF4) PrimeCell Identification Register 1 */
    volatile        uint32_t        SSPPCELLID2                 ; /*!< (@0x00000FF8) PrimeCell Identification Register 2 */
    volatile        uint32_t        SSPPCELLID3                 ; /*!< (@0x00000FFC) PrimeCell Identification Register 3 */
} SSP_t;


#define SSP_BASE (0x700A0000u)                                                          /*!< ssp base address */

/** __SSP_BASE_PTR returns the base address of the peripheral.
 *
 * @return base address of peripheral's instance
 */
__SSP_INLINE uint32_t* __SSP_BASE_PTR(void)
{
    return (uint32_t*)(SSP_BASE);
}


/* -------------------------------------------------------------------------- */
/*                           SSPCR0 member of SSP_t                           */
/* -------------------------------------------------------------------------- */

/** __SSP_SSPCR0__ADDRESS returns the address of member SSPCR0.
 *
 * As indicated by the __ prefix, this is not intended for use by the FW. It is
 * here for readability only.
 *
 * @return address of SSPCR0
 */
__SSP_INLINE uint32_t* __SSP_SSPCR0__ADDRESS(void)
{
    return (uint32_t*)((uint32_t)__SSP_BASE_PTR() + (uint32_t)(offsetof(SSP_t, SSPCR0)));
}

/** SSP_SSPCR0__SET() sets SSPCR0 to given value.
 *
 * When writing to SSPCR0, this is mandatory to use.
 *
 * @param value new value for SSPCR0
 */
__SSP_INLINE void SSP_SSPCR0__SET(uint32_t value)
{
    HAL_SET32(__SSP_SSPCR0__ADDRESS(), value);
}

/** SSP_SSPCR0__SETB1() sets byte 1 of SSPCR0 to given value.
 *
 * When writing to byte 1 of SSPCR0, this is mandatory to use.
 *
 * @param value new value for byte 1 of SSPCR0
 */
__SSP_INLINE void SSP_SSPCR0__SETB1(uint8_t value)
{
    HAL_SET8(((uint8_t*)__SSP_SSPCR0__ADDRESS()) + 1, value);
}

/** SSP_SSPCR0__GET() gets SSPCR0's current value.
 *
 * When reading from SSPCR0, this is mandatory to use.
 *
 * @return current value of SSPCR0
 */
__SSP_INLINE uint32_t SSP_SSPCR0__GET(void)
{
    return HAL_GET32(__SSP_SSPCR0__ADDRESS());
}

/** SSP_SSPCR0__GETB1() gets byte 1 of SSPCR0's current value.
 *
 * When reading from byte 1 of SSPCR0, this is mandatory to use.
 *
 * @return current value of byte 1 of SSPCR0
 */
__SSP_INLINE uint8_t SSP_SSPCR0__GETB1(void)
{
    return HAL_GET8(((uint8_t*)__SSP_SSPCR0__ADDRESS()) + 1);
}

/* ----------------------------- SSP.SSPCR0.SCR ----------------------------- */

/**
<pre>
  SSP.SSPCR0.SCR:

    Serial clock rate

</pre> */

#define SSP_SSPCR0__SCR__Pos                                    8                                                                      /*!< Right-most bit position of SCR in SSP.SSPCR0 */
#define SSP_SSPCR0__SCR__Msk                                    (0x000000FFUL << SSP_SSPCR0__SCR__Pos)                                 /*!< Mask for SCR in SSP.SSPCR0 */
#define SSP_SSPCR0__SCR__Shift(v)                               (((v) << SSP_SSPCR0__SCR__Pos) & SSP_SSPCR0__SCR__Msk)                 /*!< Shift value 'v' into SCR and mask 'v' to fit it into SCR field */

/** SSP_SSPCR0__SCR__SET() sets SSPCR0.SCR to given value.
 *
 * When writing to SSPCR0.SCR, this is recommended to use.
 *
 * @param bf_value new value for SSPCR0.SCR
 */
__SSP_INLINE void SSP_SSPCR0__SCR__SET(uint32_t bf_value)
{
    uint8_t reg = (uint8_t)bf_value & (uint8_t)0xFF;
    SSP_SSPCR0__SETB1(reg);
}

/** SSP_SSPCR0__SCR__GET() gets SSPCR0.SCR's current value.
 *
 * When reading from SSPCR0.SCR, this is recommended to use.
 *
 * @return current value of SSPCR0.SCR
 */
__SSP_INLINE uint32_t SSP_SSPCR0__SCR__GET(void)
{
    uint8_t reg = SSP_SSPCR0__GETB1();
    reg = (reg & (uint8_t)0xFF);
    return (uint32_t)reg;
}

/** SSP_SSPCR0__SCR__MODIFY() modifies SSPCR0.SCR.
 *
 * This is recommended to use when setting more than one bitfield of SSP.SSPCR0.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of SSP.SSPCR0
 * @param bf_value new value for SSPCR0.SCR
 * @return new value of SSP.SSPCR0
 */
__SSP_INLINE uint32_t SSP_SSPCR0__SCR__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~SSP_SSPCR0__SCR__Msk);
    reg = (reg | (SSP_SSPCR0__SCR__Shift((uint32_t)bf_value)));
    return reg;
}

/** SSP_SSPCR0__SCR__EXTRACT() extracts SSPCR0.SCR.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPCR0.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPCR0
 * @return current value of SSPCR0.SCR
 */
__SSP_INLINE uint32_t SSP_SSPCR0__SCR__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPCR0__SCR__Msk);
    reg = (reg >> SSP_SSPCR0__SCR__Pos);
    return (uint32_t)reg;
}

/* ----------------------------- SSP.SSPCR0.SPH ----------------------------- */

/**
<pre>
  SSP.SSPCR0.SPH:

    SSPCLKOUT Phase

</pre> */

#define SSP_SSPCR0__SPH__Pos                                    7                                                                      /*!< Right-most bit position of SPH in SSP.SSPCR0 */
#define SSP_SSPCR0__SPH__Msk                                    (0x00000001UL << SSP_SSPCR0__SPH__Pos)                                 /*!< Mask for SPH in SSP.SSPCR0 */
#define SSP_SSPCR0__SPH__Shift(v)                               (((v) << SSP_SSPCR0__SPH__Pos) & SSP_SSPCR0__SPH__Msk)                 /*!< Shift value 'v' into SPH and mask 'v' to fit it into SPH field */

/** SSP_SSPCR0__SPH__SET() sets SSPCR0.SPH to given value.
 *
 * When writing to SSPCR0.SPH, this is recommended to use.
 *
 * @param bf_value new value for SSPCR0.SPH
 */
__SSP_INLINE void SSP_SSPCR0__SPH__SET(uint32_t bf_value)
{
    uint32_t reg = SSP_SSPCR0__GET();
    reg = (reg & ~SSP_SSPCR0__SPH__Msk);
    reg = (reg | (SSP_SSPCR0__SPH__Shift((uint32_t)bf_value)));
    SSP_SSPCR0__SET(reg);
}

/** SSP_SSPCR0__SPH__GET() gets SSPCR0.SPH's current value.
 *
 * When reading from SSPCR0.SPH, this is recommended to use.
 *
 * @return current value of SSPCR0.SPH
 */
__SSP_INLINE uint32_t SSP_SSPCR0__SPH__GET(void)
{
    uint32_t reg = SSP_SSPCR0__GET();
    reg = (reg & SSP_SSPCR0__SPH__Msk);
    reg = (reg >> SSP_SSPCR0__SPH__Pos);
    return (uint32_t)reg;
}

/** SSP_SSPCR0__SPH__MODIFY() modifies SSPCR0.SPH.
 *
 * This is recommended to use when setting more than one bitfield of SSP.SSPCR0.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of SSP.SSPCR0
 * @param bf_value new value for SSPCR0.SPH
 * @return new value of SSP.SSPCR0
 */
__SSP_INLINE uint32_t SSP_SSPCR0__SPH__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~SSP_SSPCR0__SPH__Msk);
    reg = (reg | (SSP_SSPCR0__SPH__Shift((uint32_t)bf_value)));
    return reg;
}

/** SSP_SSPCR0__SPH__EXTRACT() extracts SSPCR0.SPH.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPCR0.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPCR0
 * @return current value of SSPCR0.SPH
 */
__SSP_INLINE uint32_t SSP_SSPCR0__SPH__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPCR0__SPH__Msk);
    reg = (reg >> SSP_SSPCR0__SPH__Pos);
    return (uint32_t)reg;
}

/* ----------------------------- SSP.SSPCR0.SPO ----------------------------- */

/**
<pre>
  SSP.SSPCR0.SPO:

    SSPCLKOUT Polarity

</pre> */

#define SSP_SSPCR0__SPO__Pos                                    6                                                                      /*!< Right-most bit position of SPO in SSP.SSPCR0 */
#define SSP_SSPCR0__SPO__Msk                                    (0x00000001UL << SSP_SSPCR0__SPO__Pos)                                 /*!< Mask for SPO in SSP.SSPCR0 */
#define SSP_SSPCR0__SPO__Shift(v)                               (((v) << SSP_SSPCR0__SPO__Pos) & SSP_SSPCR0__SPO__Msk)                 /*!< Shift value 'v' into SPO and mask 'v' to fit it into SPO field */

/** SSP_SSPCR0__SPO__SET() sets SSPCR0.SPO to given value.
 *
 * When writing to SSPCR0.SPO, this is recommended to use.
 *
 * @param bf_value new value for SSPCR0.SPO
 */
__SSP_INLINE void SSP_SSPCR0__SPO__SET(uint32_t bf_value)
{
    uint32_t reg = SSP_SSPCR0__GET();
    reg = (reg & ~SSP_SSPCR0__SPO__Msk);
    reg = (reg | (SSP_SSPCR0__SPO__Shift((uint32_t)bf_value)));
    SSP_SSPCR0__SET(reg);
}

/** SSP_SSPCR0__SPO__GET() gets SSPCR0.SPO's current value.
 *
 * When reading from SSPCR0.SPO, this is recommended to use.
 *
 * @return current value of SSPCR0.SPO
 */
__SSP_INLINE uint32_t SSP_SSPCR0__SPO__GET(void)
{
    uint32_t reg = SSP_SSPCR0__GET();
    reg = (reg & SSP_SSPCR0__SPO__Msk);
    reg = (reg >> SSP_SSPCR0__SPO__Pos);
    return (uint32_t)reg;
}

/** SSP_SSPCR0__SPO__MODIFY() modifies SSPCR0.SPO.
 *
 * This is recommended to use when setting more than one bitfield of SSP.SSPCR0.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of SSP.SSPCR0
 * @param bf_value new value for SSPCR0.SPO
 * @return new value of SSP.SSPCR0
 */
__SSP_INLINE uint32_t SSP_SSPCR0__SPO__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~SSP_SSPCR0__SPO__Msk);
    reg = (reg | (SSP_SSPCR0__SPO__Shift((uint32_t)bf_value)));
    return reg;
}

/** SSP_SSPCR0__SPO__EXTRACT() extracts SSPCR0.SPO.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPCR0.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPCR0
 * @return current value of SSPCR0.SPO
 */
__SSP_INLINE uint32_t SSP_SSPCR0__SPO__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPCR0__SPO__Msk);
    reg = (reg >> SSP_SSPCR0__SPO__Pos);
    return (uint32_t)reg;
}

/* ----------------------------- SSP.SSPCR0.FRF ----------------------------- */

/**
<pre>
  SSP.SSPCR0.FRF:

    Frame Format

</pre> */

/*lint -parent(uint32_t, ssp_sspcr0__frf_t) -strong(AJX)*/
typedef enum ssp_sspcr0__frf_e                                                                                                         /*!< Frame Format */
{
    ssp_sspcr0__frf_const_0b00 = 0u,                                                                                                   /*!<      Motorola SPI frame format */
    ssp_sspcr0__frf_const_0b01 = 1u,                                                                                                   /*!<      TI synchronous serial frame format */
    ssp_sspcr0__frf_const_0b10 = 2u,                                                                                                   /*!<      National Microwire frame format */
    ssp_sspcr0__frf_const_0b11 = 3u                                                                                                    /*!<      Reserved, undefined operation */
} ssp_sspcr0__frf_t;

#define SSP_SSPCR0__FRF__Pos                                    4                                                                      /*!< Right-most bit position of FRF in SSP.SSPCR0 */
#define SSP_SSPCR0__FRF__Msk                                    (0x00000003UL << SSP_SSPCR0__FRF__Pos)                                 /*!< Mask for FRF in SSP.SSPCR0 */
#define SSP_SSPCR0__FRF__Shift(v)                               (((v) << SSP_SSPCR0__FRF__Pos) & SSP_SSPCR0__FRF__Msk)                 /*!< Shift value 'v' into FRF and mask 'v' to fit it into FRF field */

/** SSP_SSPCR0__FRF__SET() sets SSPCR0.FRF to given value.
 *
 * When writing to SSPCR0.FRF, this is recommended to use.
 *
 * @param bf_value new value for SSPCR0.FRF
 */
__SSP_INLINE void SSP_SSPCR0__FRF__SET(ssp_sspcr0__frf_t bf_value)
{
    uint32_t reg = SSP_SSPCR0__GET();
    reg = (reg & ~SSP_SSPCR0__FRF__Msk);
    reg = (reg | (SSP_SSPCR0__FRF__Shift((uint32_t)bf_value)));
    SSP_SSPCR0__SET(reg);
}

/** SSP_SSPCR0__FRF__GET() gets SSPCR0.FRF's current value.
 *
 * When reading from SSPCR0.FRF, this is recommended to use.
 *
 * @return current value of SSPCR0.FRF
 */
__SSP_INLINE ssp_sspcr0__frf_t SSP_SSPCR0__FRF__GET(void)
{
    uint32_t reg = SSP_SSPCR0__GET();
    reg = (reg & SSP_SSPCR0__FRF__Msk);
    reg = (reg >> SSP_SSPCR0__FRF__Pos);
    return (ssp_sspcr0__frf_t)reg;
}

/** SSP_SSPCR0__FRF__MODIFY() modifies SSPCR0.FRF.
 *
 * This is recommended to use when setting more than one bitfield of SSP.SSPCR0.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of SSP.SSPCR0
 * @param bf_value new value for SSPCR0.FRF
 * @return new value of SSP.SSPCR0
 */
__SSP_INLINE uint32_t SSP_SSPCR0__FRF__MODIFY(uint32_t reg, ssp_sspcr0__frf_t bf_value)
{
    reg = (reg & ~SSP_SSPCR0__FRF__Msk);
    reg = (reg | (SSP_SSPCR0__FRF__Shift((uint32_t)bf_value)));
    return reg;
}

/** SSP_SSPCR0__FRF__EXTRACT() extracts SSPCR0.FRF.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPCR0.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPCR0
 * @return current value of SSPCR0.FRF
 */
__SSP_INLINE ssp_sspcr0__frf_t SSP_SSPCR0__FRF__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPCR0__FRF__Msk);
    reg = (reg >> SSP_SSPCR0__FRF__Pos);
    return (ssp_sspcr0__frf_t)reg;
}

/* ----------------------------- SSP.SSPCR0.DSS ----------------------------- */

/**
<pre>
  SSP.SSPCR0.DSS:

    Data Size Select

</pre> */

/*lint -parent(uint32_t, ssp_sspcr0__dss_t) -strong(AJX)*/
typedef enum ssp_sspcr0__dss_e                                                                                                         /*!< Data Size Select */
{
    ssp_sspcr0__dss_const_0b0000 = 0x0u,                                                                                               /*!<      Reserved, undefined operation */
    ssp_sspcr0__dss_const_0b0001 = 0x1u,                                                                                               /*!<      Reserved, undefined operation */
    ssp_sspcr0__dss_const_0b0010 = 0x2u,                                                                                               /*!<      Reserved, undefined operation */
    ssp_sspcr0__dss_const_0b0011 = 0x3u,                                                                                               /*!<      4-bit data */
    ssp_sspcr0__dss_const_0b0100 = 0x4u,                                                                                               /*!<      5-bit data */
    ssp_sspcr0__dss_const_0b0101 = 0x5u,                                                                                               /*!<      6-bit data */
    ssp_sspcr0__dss_const_0b0110 = 0x6u,                                                                                               /*!<      7-bit data */
    ssp_sspcr0__dss_const_0b0111 = 0x7u,                                                                                               /*!<      8-bit data */
    ssp_sspcr0__dss_const_0b1000 = 0x8u,                                                                                               /*!<      9-bit data */
    ssp_sspcr0__dss_const_0b1001 = 0x9u,                                                                                               /*!<      10-bit data */
    ssp_sspcr0__dss_const_0b1010 = 0xau,                                                                                               /*!<      11-bit data */
    ssp_sspcr0__dss_const_0b1011 = 0xbu,                                                                                               /*!<      12-bit data */
    ssp_sspcr0__dss_const_0b1100 = 0xcu,                                                                                               /*!<      13-bit data */
    ssp_sspcr0__dss_const_0b1101 = 0xdu,                                                                                               /*!<      14-bit data */
    ssp_sspcr0__dss_const_0b1110 = 0xeu,                                                                                               /*!<      15-bit data */
    ssp_sspcr0__dss_const_0b1111 = 0xfu                                                                                                /*!<      16-bit data */
} ssp_sspcr0__dss_t;

#define SSP_SSPCR0__DSS__Pos                                    0                                                                      /*!< Right-most bit position of DSS in SSP.SSPCR0 */
#define SSP_SSPCR0__DSS__Msk                                    (0x0000000FUL << SSP_SSPCR0__DSS__Pos)                                 /*!< Mask for DSS in SSP.SSPCR0 */
#define SSP_SSPCR0__DSS__Shift(v)                               (((v) << SSP_SSPCR0__DSS__Pos) & SSP_SSPCR0__DSS__Msk)                 /*!< Shift value 'v' into DSS and mask 'v' to fit it into DSS field */

/** SSP_SSPCR0__DSS__SET() sets SSPCR0.DSS to given value.
 *
 * When writing to SSPCR0.DSS, this is recommended to use.
 *
 * @param bf_value new value for SSPCR0.DSS
 */
__SSP_INLINE void SSP_SSPCR0__DSS__SET(ssp_sspcr0__dss_t bf_value)
{
    uint32_t reg = SSP_SSPCR0__GET();
    reg = (reg & ~SSP_SSPCR0__DSS__Msk);
    reg = (reg | (SSP_SSPCR0__DSS__Shift((uint32_t)bf_value)));
    SSP_SSPCR0__SET(reg);
}

/** SSP_SSPCR0__DSS__GET() gets SSPCR0.DSS's current value.
 *
 * When reading from SSPCR0.DSS, this is recommended to use.
 *
 * @return current value of SSPCR0.DSS
 */
__SSP_INLINE ssp_sspcr0__dss_t SSP_SSPCR0__DSS__GET(void)
{
    uint32_t reg = SSP_SSPCR0__GET();
    reg = (reg & SSP_SSPCR0__DSS__Msk);
    reg = (reg >> SSP_SSPCR0__DSS__Pos);
    return (ssp_sspcr0__dss_t)reg;
}

/** SSP_SSPCR0__DSS__MODIFY() modifies SSPCR0.DSS.
 *
 * This is recommended to use when setting more than one bitfield of SSP.SSPCR0.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of SSP.SSPCR0
 * @param bf_value new value for SSPCR0.DSS
 * @return new value of SSP.SSPCR0
 */
__SSP_INLINE uint32_t SSP_SSPCR0__DSS__MODIFY(uint32_t reg, ssp_sspcr0__dss_t bf_value)
{
    reg = (reg & ~SSP_SSPCR0__DSS__Msk);
    reg = (reg | (SSP_SSPCR0__DSS__Shift((uint32_t)bf_value)));
    return reg;
}

/** SSP_SSPCR0__DSS__EXTRACT() extracts SSPCR0.DSS.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPCR0.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPCR0
 * @return current value of SSPCR0.DSS
 */
__SSP_INLINE ssp_sspcr0__dss_t SSP_SSPCR0__DSS__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPCR0__DSS__Msk);
    reg = (reg >> SSP_SSPCR0__DSS__Pos);
    return (ssp_sspcr0__dss_t)reg;
}

/* -------------------------------------------------------------------------- */
/*                           SSPCR1 member of SSP_t                           */
/* -------------------------------------------------------------------------- */

/** __SSP_SSPCR1__ADDRESS returns the address of member SSPCR1.
 *
 * As indicated by the __ prefix, this is not intended for use by the FW. It is
 * here for readability only.
 *
 * @return address of SSPCR1
 */
__SSP_INLINE uint32_t* __SSP_SSPCR1__ADDRESS(void)
{
    return (uint32_t*)((uint32_t)__SSP_BASE_PTR() + (uint32_t)(offsetof(SSP_t, SSPCR1)));
}

/** SSP_SSPCR1__SET() sets SSPCR1 to given value.
 *
 * When writing to SSPCR1, this is mandatory to use.
 *
 * @param value new value for SSPCR1
 */
__SSP_INLINE void SSP_SSPCR1__SET(uint32_t value)
{
    HAL_SET32(__SSP_SSPCR1__ADDRESS(), value);
}

/** SSP_SSPCR1__GET() gets SSPCR1's current value.
 *
 * When reading from SSPCR1, this is mandatory to use.
 *
 * @return current value of SSPCR1
 */
__SSP_INLINE uint32_t SSP_SSPCR1__GET(void)
{
    return HAL_GET32(__SSP_SSPCR1__ADDRESS());
}

/* ----------------------------- SSP.SSPCR1.RES ----------------------------- */

/**
<pre>
  SSP.SSPCR1.RES:

    Reserved, read unpredictable, should be written



    as 0.

</pre> */

#define SSP_SSPCR1__RES__Pos                                    4                                                                      /*!< Right-most bit position of RES in SSP.SSPCR1 */
#define SSP_SSPCR1__RES__Msk                                    (0x0FFFFFFFUL << SSP_SSPCR1__RES__Pos)                                 /*!< Mask for RES in SSP.SSPCR1 */
#define SSP_SSPCR1__RES__Shift(v)                               (((v) << SSP_SSPCR1__RES__Pos) & SSP_SSPCR1__RES__Msk)                 /*!< Shift value 'v' into RES and mask 'v' to fit it into RES field */

/** SSP_SSPCR1__RES__GET() gets SSPCR1.RES's current value.
 *
 * When reading from SSPCR1.RES, this is recommended to use.
 *
 * @return current value of SSPCR1.RES
 */
__SSP_INLINE uint32_t SSP_SSPCR1__RES__GET(void)
{
    uint32_t reg = SSP_SSPCR1__GET();
    reg = (reg & SSP_SSPCR1__RES__Msk);
    reg = (reg >> SSP_SSPCR1__RES__Pos);
    return (uint32_t)reg;
}

/** SSP_SSPCR1__RES__EXTRACT() extracts SSPCR1.RES.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPCR1.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPCR1
 * @return current value of SSPCR1.RES
 */
__SSP_INLINE uint32_t SSP_SSPCR1__RES__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPCR1__RES__Msk);
    reg = (reg >> SSP_SSPCR1__RES__Pos);
    return (uint32_t)reg;
}

/* ----------------------------- SSP.SSPCR1.SOD ----------------------------- */

/**
<pre>
  SSP.SSPCR1.SOD:

    Slave-mode output disable

</pre> */

/*lint -parent(uint32_t, ssp_sspcr1__sod_t) -strong(AJX)*/
typedef enum ssp_sspcr1__sod_e                                                                                                         /*!< Slave-mode output disable */
{
    ssp_sspcr1__sod_const_0b0 = 0u,                                                                                                    /*!<      SSP can drive the SSPTXD output in slave mode */
    ssp_sspcr1__sod_const_0b1 = 1u                                                                                                     /*!<      SSP must not drive the SSPTXD output in slave mode */
} ssp_sspcr1__sod_t;

#define SSP_SSPCR1__SOD__Pos                                    3                                                                      /*!< Right-most bit position of SOD in SSP.SSPCR1 */
#define SSP_SSPCR1__SOD__Msk                                    (0x00000001UL << SSP_SSPCR1__SOD__Pos)                                 /*!< Mask for SOD in SSP.SSPCR1 */
#define SSP_SSPCR1__SOD__Shift(v)                               (((v) << SSP_SSPCR1__SOD__Pos) & SSP_SSPCR1__SOD__Msk)                 /*!< Shift value 'v' into SOD and mask 'v' to fit it into SOD field */

/** SSP_SSPCR1__SOD__SET() sets SSPCR1.SOD to given value.
 *
 * When writing to SSPCR1.SOD, this is recommended to use.
 *
 * @param bf_value new value for SSPCR1.SOD
 */
__SSP_INLINE void SSP_SSPCR1__SOD__SET(ssp_sspcr1__sod_t bf_value)
{
    uint32_t reg = SSP_SSPCR1__GET();
    reg = (reg & ~SSP_SSPCR1__SOD__Msk);
    reg = (reg | (SSP_SSPCR1__SOD__Shift((uint32_t)bf_value)));
    SSP_SSPCR1__SET(reg);
}

/** SSP_SSPCR1__SOD__GET() gets SSPCR1.SOD's current value.
 *
 * When reading from SSPCR1.SOD, this is recommended to use.
 *
 * @return current value of SSPCR1.SOD
 */
__SSP_INLINE ssp_sspcr1__sod_t SSP_SSPCR1__SOD__GET(void)
{
    uint32_t reg = SSP_SSPCR1__GET();
    reg = (reg & SSP_SSPCR1__SOD__Msk);
    reg = (reg >> SSP_SSPCR1__SOD__Pos);
    return (ssp_sspcr1__sod_t)reg;
}

/** SSP_SSPCR1__SOD__MODIFY() modifies SSPCR1.SOD.
 *
 * This is recommended to use when setting more than one bitfield of SSP.SSPCR1.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of SSP.SSPCR1
 * @param bf_value new value for SSPCR1.SOD
 * @return new value of SSP.SSPCR1
 */
__SSP_INLINE uint32_t SSP_SSPCR1__SOD__MODIFY(uint32_t reg, ssp_sspcr1__sod_t bf_value)
{
    reg = (reg & ~SSP_SSPCR1__SOD__Msk);
    reg = (reg | (SSP_SSPCR1__SOD__Shift((uint32_t)bf_value)));
    return reg;
}

/** SSP_SSPCR1__SOD__EXTRACT() extracts SSPCR1.SOD.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPCR1.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPCR1
 * @return current value of SSPCR1.SOD
 */
__SSP_INLINE ssp_sspcr1__sod_t SSP_SSPCR1__SOD__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPCR1__SOD__Msk);
    reg = (reg >> SSP_SSPCR1__SOD__Pos);
    return (ssp_sspcr1__sod_t)reg;
}

/* ----------------------------- SSP.SSPCR1.MS ----------------------------- */

/**
<pre>
  SSP.SSPCR1.MS:

    Master or slave mode select

</pre> */

/*lint -parent(uint32_t, ssp_sspcr1__ms_t) -strong(AJX)*/
typedef enum ssp_sspcr1__ms_e                                                                                                          /*!< Master or slave mode select */
{
    ssp_sspcr1__ms_const_0b0 = 0u,                                                                                                     /*!<      device configured as master (default) */
    ssp_sspcr1__ms_const_0b1 = 1u                                                                                                      /*!<      device configured as slave */
} ssp_sspcr1__ms_t;

#define SSP_SSPCR1__MS__Pos                                     2                                                                      /*!< Right-most bit position of MS in SSP.SSPCR1 */
#define SSP_SSPCR1__MS__Msk                                     (0x00000001UL << SSP_SSPCR1__MS__Pos)                                  /*!< Mask for MS in SSP.SSPCR1 */
#define SSP_SSPCR1__MS__Shift(v)                                (((v) << SSP_SSPCR1__MS__Pos) & SSP_SSPCR1__MS__Msk)                   /*!< Shift value 'v' into MS and mask 'v' to fit it into MS field */

/** SSP_SSPCR1__MS__SET() sets SSPCR1.MS to given value.
 *
 * When writing to SSPCR1.MS, this is recommended to use.
 *
 * @param bf_value new value for SSPCR1.MS
 */
__SSP_INLINE void SSP_SSPCR1__MS__SET(ssp_sspcr1__ms_t bf_value)
{
    uint32_t reg = SSP_SSPCR1__GET();
    reg = (reg & ~SSP_SSPCR1__MS__Msk);
    reg = (reg | (SSP_SSPCR1__MS__Shift((uint32_t)bf_value)));
    SSP_SSPCR1__SET(reg);
}

/** SSP_SSPCR1__MS__GET() gets SSPCR1.MS's current value.
 *
 * When reading from SSPCR1.MS, this is recommended to use.
 *
 * @return current value of SSPCR1.MS
 */
__SSP_INLINE ssp_sspcr1__ms_t SSP_SSPCR1__MS__GET(void)
{
    uint32_t reg = SSP_SSPCR1__GET();
    reg = (reg & SSP_SSPCR1__MS__Msk);
    reg = (reg >> SSP_SSPCR1__MS__Pos);
    return (ssp_sspcr1__ms_t)reg;
}

/** SSP_SSPCR1__MS__MODIFY() modifies SSPCR1.MS.
 *
 * This is recommended to use when setting more than one bitfield of SSP.SSPCR1.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of SSP.SSPCR1
 * @param bf_value new value for SSPCR1.MS
 * @return new value of SSP.SSPCR1
 */
__SSP_INLINE uint32_t SSP_SSPCR1__MS__MODIFY(uint32_t reg, ssp_sspcr1__ms_t bf_value)
{
    reg = (reg & ~SSP_SSPCR1__MS__Msk);
    reg = (reg | (SSP_SSPCR1__MS__Shift((uint32_t)bf_value)));
    return reg;
}

/** SSP_SSPCR1__MS__EXTRACT() extracts SSPCR1.MS.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPCR1.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPCR1
 * @return current value of SSPCR1.MS
 */
__SSP_INLINE ssp_sspcr1__ms_t SSP_SSPCR1__MS__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPCR1__MS__Msk);
    reg = (reg >> SSP_SSPCR1__MS__Pos);
    return (ssp_sspcr1__ms_t)reg;
}

/* ----------------------------- SSP.SSPCR1.SSE ----------------------------- */

/**
<pre>
  SSP.SSPCR1.SSE:

    Synchronous serial port enable

</pre> */

/*lint -parent(uint32_t, ssp_sspcr1__sse_t) -strong(AJX)*/
typedef enum ssp_sspcr1__sse_e                                                                                                         /*!< Synchronous serial port enable */
{
    ssp_sspcr1__sse_const_0b0 = 0u,                                                                                                    /*!<      SSP operation disabled */
    ssp_sspcr1__sse_const_0b1 = 1u                                                                                                     /*!<      SSP operation enabled */
} ssp_sspcr1__sse_t;

#define SSP_SSPCR1__SSE__Pos                                    1                                                                      /*!< Right-most bit position of SSE in SSP.SSPCR1 */
#define SSP_SSPCR1__SSE__Msk                                    (0x00000001UL << SSP_SSPCR1__SSE__Pos)                                 /*!< Mask for SSE in SSP.SSPCR1 */
#define SSP_SSPCR1__SSE__Shift(v)                               (((v) << SSP_SSPCR1__SSE__Pos) & SSP_SSPCR1__SSE__Msk)                 /*!< Shift value 'v' into SSE and mask 'v' to fit it into SSE field */

/** SSP_SSPCR1__SSE__SET() sets SSPCR1.SSE to given value.
 *
 * When writing to SSPCR1.SSE, this is recommended to use.
 *
 * @param bf_value new value for SSPCR1.SSE
 */
__SSP_INLINE void SSP_SSPCR1__SSE__SET(ssp_sspcr1__sse_t bf_value)
{
    uint32_t reg = SSP_SSPCR1__GET();
    reg = (reg & ~SSP_SSPCR1__SSE__Msk);
    reg = (reg | (SSP_SSPCR1__SSE__Shift((uint32_t)bf_value)));
    SSP_SSPCR1__SET(reg);
}

/** SSP_SSPCR1__SSE__GET() gets SSPCR1.SSE's current value.
 *
 * When reading from SSPCR1.SSE, this is recommended to use.
 *
 * @return current value of SSPCR1.SSE
 */
__SSP_INLINE ssp_sspcr1__sse_t SSP_SSPCR1__SSE__GET(void)
{
    uint32_t reg = SSP_SSPCR1__GET();
    reg = (reg & SSP_SSPCR1__SSE__Msk);
    reg = (reg >> SSP_SSPCR1__SSE__Pos);
    return (ssp_sspcr1__sse_t)reg;
}

/** SSP_SSPCR1__SSE__MODIFY() modifies SSPCR1.SSE.
 *
 * This is recommended to use when setting more than one bitfield of SSP.SSPCR1.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of SSP.SSPCR1
 * @param bf_value new value for SSPCR1.SSE
 * @return new value of SSP.SSPCR1
 */
__SSP_INLINE uint32_t SSP_SSPCR1__SSE__MODIFY(uint32_t reg, ssp_sspcr1__sse_t bf_value)
{
    reg = (reg & ~SSP_SSPCR1__SSE__Msk);
    reg = (reg | (SSP_SSPCR1__SSE__Shift((uint32_t)bf_value)));
    return reg;
}

/** SSP_SSPCR1__SSE__EXTRACT() extracts SSPCR1.SSE.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPCR1.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPCR1
 * @return current value of SSPCR1.SSE
 */
__SSP_INLINE ssp_sspcr1__sse_t SSP_SSPCR1__SSE__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPCR1__SSE__Msk);
    reg = (reg >> SSP_SSPCR1__SSE__Pos);
    return (ssp_sspcr1__sse_t)reg;
}

/* ----------------------------- SSP.SSPCR1.LBM ----------------------------- */

/**
<pre>
  SSP.SSPCR1.LBM:

    Loop back mode

</pre> */

/*lint -parent(uint32_t, ssp_sspcr1__lbm_t) -strong(AJX)*/
typedef enum ssp_sspcr1__lbm_e                                                                                                         /*!< Loop back mode */
{
    ssp_sspcr1__lbm_const_0b0 = 0u,                                                                                                    /*!<      Normal serial port operation enabled */
    ssp_sspcr1__lbm_const_0b1 = 1u                                                                                                     /*!<      Output of transmit serial shifter is connected to input of r...(more) */
} ssp_sspcr1__lbm_t;

#define SSP_SSPCR1__LBM__Pos                                    0                                                                      /*!< Right-most bit position of LBM in SSP.SSPCR1 */
#define SSP_SSPCR1__LBM__Msk                                    (0x00000001UL << SSP_SSPCR1__LBM__Pos)                                 /*!< Mask for LBM in SSP.SSPCR1 */
#define SSP_SSPCR1__LBM__Shift(v)                               (((v) << SSP_SSPCR1__LBM__Pos) & SSP_SSPCR1__LBM__Msk)                 /*!< Shift value 'v' into LBM and mask 'v' to fit it into LBM field */

/** SSP_SSPCR1__LBM__SET() sets SSPCR1.LBM to given value.
 *
 * When writing to SSPCR1.LBM, this is recommended to use.
 *
 * @param bf_value new value for SSPCR1.LBM
 */
__SSP_INLINE void SSP_SSPCR1__LBM__SET(ssp_sspcr1__lbm_t bf_value)
{
    uint32_t reg = SSP_SSPCR1__GET();
    reg = (reg & ~SSP_SSPCR1__LBM__Msk);
    reg = (reg | (SSP_SSPCR1__LBM__Shift((uint32_t)bf_value)));
    SSP_SSPCR1__SET(reg);
}

/** SSP_SSPCR1__LBM__GET() gets SSPCR1.LBM's current value.
 *
 * When reading from SSPCR1.LBM, this is recommended to use.
 *
 * @return current value of SSPCR1.LBM
 */
__SSP_INLINE ssp_sspcr1__lbm_t SSP_SSPCR1__LBM__GET(void)
{
    uint32_t reg = SSP_SSPCR1__GET();
    reg = (reg & SSP_SSPCR1__LBM__Msk);
    reg = (reg >> SSP_SSPCR1__LBM__Pos);
    return (ssp_sspcr1__lbm_t)reg;
}

/** SSP_SSPCR1__LBM__MODIFY() modifies SSPCR1.LBM.
 *
 * This is recommended to use when setting more than one bitfield of SSP.SSPCR1.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of SSP.SSPCR1
 * @param bf_value new value for SSPCR1.LBM
 * @return new value of SSP.SSPCR1
 */
__SSP_INLINE uint32_t SSP_SSPCR1__LBM__MODIFY(uint32_t reg, ssp_sspcr1__lbm_t bf_value)
{
    reg = (reg & ~SSP_SSPCR1__LBM__Msk);
    reg = (reg | (SSP_SSPCR1__LBM__Shift((uint32_t)bf_value)));
    return reg;
}

/** SSP_SSPCR1__LBM__EXTRACT() extracts SSPCR1.LBM.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPCR1.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPCR1
 * @return current value of SSPCR1.LBM
 */
__SSP_INLINE ssp_sspcr1__lbm_t SSP_SSPCR1__LBM__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPCR1__LBM__Msk);
    reg = (reg >> SSP_SSPCR1__LBM__Pos);
    return (ssp_sspcr1__lbm_t)reg;
}

/* -------------------------------------------------------------------------- */
/*                           SSPDR member of SSP_t                           */
/* -------------------------------------------------------------------------- */

/** __SSP_SSPDR__ADDRESS returns the address of member SSPDR.
 *
 * As indicated by the __ prefix, this is not intended for use by the FW. It is
 * here for readability only.
 *
 * @return address of SSPDR
 */
__SSP_INLINE uint32_t* __SSP_SSPDR__ADDRESS(void)
{
    return (uint32_t*)((uint32_t)__SSP_BASE_PTR() + (uint32_t)(offsetof(SSP_t, SSPDR)));
}

/** SSP_SSPDR__SET() sets SSPDR to given value.
 *
 * When writing to SSPDR, this is mandatory to use.
 *
 * @param value new value for SSPDR
 */
__SSP_INLINE void SSP_SSPDR__SET(uint32_t value)
{
    HAL_SET32(__SSP_SSPDR__ADDRESS(), value);
}

/** SSP_SSPDR__SETW1() sets word 1 of SSPDR to given value.
 *
 * When writing to word 1 of SSPDR, this is mandatory to use.
 *
 * @param value new value for word 1 of SSPDR
 */
__SSP_INLINE void SSP_SSPDR__SETW1(uint16_t value)
{
    HAL_SET16(((uint16_t*)__SSP_SSPDR__ADDRESS()) + 1, value);
}

/** SSP_SSPDR__SETW0() sets word 0 of SSPDR to given value.
 *
 * When writing to word 0 of SSPDR, this is mandatory to use.
 *
 * @param value new value for word 0 of SSPDR
 */
__SSP_INLINE void SSP_SSPDR__SETW0(uint16_t value)
{
    HAL_SET16(((uint16_t*)__SSP_SSPDR__ADDRESS()) + 0, value);
}

/** SSP_SSPDR__GET() gets SSPDR's current value.
 *
 * When reading from SSPDR, this is mandatory to use.
 *
 * @return current value of SSPDR
 */
__SSP_INLINE uint32_t SSP_SSPDR__GET(void)
{
    return HAL_GET32(__SSP_SSPDR__ADDRESS());
}

/** SSP_SSPDR__GETW1() gets word 1 of SSPDR's current value.
 *
 * When reading from word 1 of SSPDR, this is mandatory to use.
 *
 * @return current value of word 1 of SSPDR
 */
__SSP_INLINE uint16_t SSP_SSPDR__GETW1(void)
{
    return HAL_GET16(((uint16_t*)__SSP_SSPDR__ADDRESS()) + 1);
}

/** SSP_SSPDR__GETW0() gets word 0 of SSPDR's current value.
 *
 * When reading from word 0 of SSPDR, this is mandatory to use.
 *
 * @return current value of word 0 of SSPDR
 */
__SSP_INLINE uint16_t SSP_SSPDR__GETW0(void)
{
    return HAL_GET16(((uint16_t*)__SSP_SSPDR__ADDRESS()) + 0);
}

/* ----------------------------- SSP.SSPDR.RES ----------------------------- */

/**
<pre>
  SSP.SSPDR.RES:

    Reserved, read unpredictable, should be written



    as 0.

</pre> */

#define SSP_SSPDR__RES__Pos                                     16                                                                     /*!< Right-most bit position of RES in SSP.SSPDR */
#define SSP_SSPDR__RES__Msk                                     (0x0000FFFFUL << SSP_SSPDR__RES__Pos)                                  /*!< Mask for RES in SSP.SSPDR */
#define SSP_SSPDR__RES__Shift(v)                                (((v) << SSP_SSPDR__RES__Pos) & SSP_SSPDR__RES__Msk)                   /*!< Shift value 'v' into RES and mask 'v' to fit it into RES field */

/** SSP_SSPDR__RES__GET() gets SSPDR.RES's current value.
 *
 * When reading from SSPDR.RES, this is recommended to use.
 *
 * @return current value of SSPDR.RES
 */
__SSP_INLINE uint32_t SSP_SSPDR__RES__GET(void)
{
    uint16_t reg = SSP_SSPDR__GETW1();
    reg = (reg & (uint16_t)0xFFFF);
    return (uint32_t)reg;
}

/** SSP_SSPDR__RES__EXTRACT() extracts SSPDR.RES.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPDR.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPDR
 * @return current value of SSPDR.RES
 */
__SSP_INLINE uint32_t SSP_SSPDR__RES__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPDR__RES__Msk);
    reg = (reg >> SSP_SSPDR__RES__Pos);
    return (uint32_t)reg;
}

/* ----------------------------- SSP.SSPDR.DATA ----------------------------- */

/**
<pre>
  SSP.SSPDR.DATA:

    Transmit/Receive FIFO

</pre> */

#define SSP_SSPDR__DATA__Pos                                    0                                                                      /*!< Right-most bit position of DATA in SSP.SSPDR */
#define SSP_SSPDR__DATA__Msk                                    (0x0000FFFFUL << SSP_SSPDR__DATA__Pos)                                 /*!< Mask for DATA in SSP.SSPDR */
#define SSP_SSPDR__DATA__Shift(v)                               (((v) << SSP_SSPDR__DATA__Pos) & SSP_SSPDR__DATA__Msk)                 /*!< Shift value 'v' into DATA and mask 'v' to fit it into DATA field */

/** SSP_SSPDR__DATA__SET() sets SSPDR.DATA to given value.
 *
 * When writing to SSPDR.DATA, this is recommended to use.
 *
 * @param bf_value new value for SSPDR.DATA
 */
__SSP_INLINE void SSP_SSPDR__DATA__SET(uint32_t bf_value)
{
    uint16_t reg = (uint16_t)bf_value & (uint16_t)0xFFFF;
    SSP_SSPDR__SETW0(reg);
}

/** SSP_SSPDR__DATA__GET() gets SSPDR.DATA's current value.
 *
 * When reading from SSPDR.DATA, this is recommended to use.
 *
 * @return current value of SSPDR.DATA
 */
__SSP_INLINE uint32_t SSP_SSPDR__DATA__GET(void)
{
    uint16_t reg = SSP_SSPDR__GETW0();
    reg = (reg & (uint16_t)0xFFFF);
    return (uint32_t)reg;
}

/** SSP_SSPDR__DATA__MODIFY() modifies SSPDR.DATA.
 *
 * This is recommended to use when setting more than one bitfield of SSP.SSPDR.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of SSP.SSPDR
 * @param bf_value new value for SSPDR.DATA
 * @return new value of SSP.SSPDR
 */
__SSP_INLINE uint32_t SSP_SSPDR__DATA__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~SSP_SSPDR__DATA__Msk);
    reg = (reg | (SSP_SSPDR__DATA__Shift((uint32_t)bf_value)));
    return reg;
}

/** SSP_SSPDR__DATA__EXTRACT() extracts SSPDR.DATA.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPDR.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPDR
 * @return current value of SSPDR.DATA
 */
__SSP_INLINE uint32_t SSP_SSPDR__DATA__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPDR__DATA__Msk);
    reg = (reg >> SSP_SSPDR__DATA__Pos);
    return (uint32_t)reg;
}

/* -------------------------------------------------------------------------- */
/*                           SSPSR member of SSP_t                           */
/* -------------------------------------------------------------------------- */

/** __SSP_SSPSR__ADDRESS returns the address of member SSPSR.
 *
 * As indicated by the __ prefix, this is not intended for use by the FW. It is
 * here for readability only.
 *
 * @return address of SSPSR
 */
__SSP_INLINE uint32_t* __SSP_SSPSR__ADDRESS(void)
{
    return (uint32_t*)((uint32_t)__SSP_BASE_PTR() + (uint32_t)(offsetof(SSP_t, SSPSR)));
}

/** SSP_SSPSR__GET() gets SSPSR's current value.
 *
 * When reading from SSPSR, this is mandatory to use.
 *
 * @return current value of SSPSR
 */
__SSP_INLINE uint32_t SSP_SSPSR__GET(void)
{
    return HAL_GET32(__SSP_SSPSR__ADDRESS());
}

/* ----------------------------- SSP.SSPSR.RES ----------------------------- */

/**
<pre>
  SSP.SSPSR.RES:

    Reserved, read unpredictable, should be written



    as 0.

</pre> */

#define SSP_SSPSR__RES__Pos                                     5                                                                      /*!< Right-most bit position of RES in SSP.SSPSR */
#define SSP_SSPSR__RES__Msk                                     (0x07FFFFFFUL << SSP_SSPSR__RES__Pos)                                  /*!< Mask for RES in SSP.SSPSR */
#define SSP_SSPSR__RES__Shift(v)                                (((v) << SSP_SSPSR__RES__Pos) & SSP_SSPSR__RES__Msk)                   /*!< Shift value 'v' into RES and mask 'v' to fit it into RES field */

/** SSP_SSPSR__RES__GET() gets SSPSR.RES's current value.
 *
 * When reading from SSPSR.RES, this is recommended to use.
 *
 * @return current value of SSPSR.RES
 */
__SSP_INLINE uint32_t SSP_SSPSR__RES__GET(void)
{
    uint32_t reg = SSP_SSPSR__GET();
    reg = (reg & SSP_SSPSR__RES__Msk);
    reg = (reg >> SSP_SSPSR__RES__Pos);
    return (uint32_t)reg;
}

/** SSP_SSPSR__RES__EXTRACT() extracts SSPSR.RES.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPSR.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPSR
 * @return current value of SSPSR.RES
 */
__SSP_INLINE uint32_t SSP_SSPSR__RES__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPSR__RES__Msk);
    reg = (reg >> SSP_SSPSR__RES__Pos);
    return (uint32_t)reg;
}

/* ----------------------------- SSP.SSPSR.BSY ----------------------------- */

/**
<pre>
  SSP.SSPSR.BSY:

    PrimeCell SSP busy flag

</pre> */

/*lint -parent(uint32_t, ssp_sspsr__bsy_t) -strong(AJX)*/
typedef enum ssp_sspsr__bsy_e                                                                                                          /*!< PrimeCell SSP busy flag */
{
    ssp_sspsr__bsy_const_0b0 = 0u,                                                                                                     /*!<      SSP is idle */
    ssp_sspsr__bsy_const_0b1 = 1u                                                                                                      /*!<      SSP is currently transmitting and/or receiving a frame or th...(more) */
} ssp_sspsr__bsy_t;

#define SSP_SSPSR__BSY__Pos                                     4                                                                      /*!< Right-most bit position of BSY in SSP.SSPSR */
#define SSP_SSPSR__BSY__Msk                                     (0x00000001UL << SSP_SSPSR__BSY__Pos)                                  /*!< Mask for BSY in SSP.SSPSR */
#define SSP_SSPSR__BSY__Shift(v)                                (((v) << SSP_SSPSR__BSY__Pos) & SSP_SSPSR__BSY__Msk)                   /*!< Shift value 'v' into BSY and mask 'v' to fit it into BSY field */

/** SSP_SSPSR__BSY__GET() gets SSPSR.BSY's current value.
 *
 * When reading from SSPSR.BSY, this is recommended to use.
 *
 * @return current value of SSPSR.BSY
 */
__SSP_INLINE ssp_sspsr__bsy_t SSP_SSPSR__BSY__GET(void)
{
    uint32_t reg = SSP_SSPSR__GET();
    reg = (reg & SSP_SSPSR__BSY__Msk);
    reg = (reg >> SSP_SSPSR__BSY__Pos);
    return (ssp_sspsr__bsy_t)reg;
}

/** SSP_SSPSR__BSY__EXTRACT() extracts SSPSR.BSY.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPSR.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPSR
 * @return current value of SSPSR.BSY
 */
__SSP_INLINE ssp_sspsr__bsy_t SSP_SSPSR__BSY__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPSR__BSY__Msk);
    reg = (reg >> SSP_SSPSR__BSY__Pos);
    return (ssp_sspsr__bsy_t)reg;
}

/* ----------------------------- SSP.SSPSR.RFF ----------------------------- */

/**
<pre>
  SSP.SSPSR.RFF:

    Receive FIFO full

</pre> */

/*lint -parent(uint32_t, ssp_sspsr__rff_t) -strong(AJX)*/
typedef enum ssp_sspsr__rff_e                                                                                                          /*!< Receive FIFO full */
{
    ssp_sspsr__rff_const_0b0 = 0u,                                                                                                     /*!<      Receive FIFO is not full */
    ssp_sspsr__rff_const_0b1 = 1u                                                                                                      /*!<      Receive FIFO is full */
} ssp_sspsr__rff_t;

#define SSP_SSPSR__RFF__Pos                                     3                                                                      /*!< Right-most bit position of RFF in SSP.SSPSR */
#define SSP_SSPSR__RFF__Msk                                     (0x00000001UL << SSP_SSPSR__RFF__Pos)                                  /*!< Mask for RFF in SSP.SSPSR */
#define SSP_SSPSR__RFF__Shift(v)                                (((v) << SSP_SSPSR__RFF__Pos) & SSP_SSPSR__RFF__Msk)                   /*!< Shift value 'v' into RFF and mask 'v' to fit it into RFF field */

/** SSP_SSPSR__RFF__GET() gets SSPSR.RFF's current value.
 *
 * When reading from SSPSR.RFF, this is recommended to use.
 *
 * @return current value of SSPSR.RFF
 */
__SSP_INLINE ssp_sspsr__rff_t SSP_SSPSR__RFF__GET(void)
{
    uint32_t reg = SSP_SSPSR__GET();
    reg = (reg & SSP_SSPSR__RFF__Msk);
    reg = (reg >> SSP_SSPSR__RFF__Pos);
    return (ssp_sspsr__rff_t)reg;
}

/** SSP_SSPSR__RFF__EXTRACT() extracts SSPSR.RFF.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPSR.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPSR
 * @return current value of SSPSR.RFF
 */
__SSP_INLINE ssp_sspsr__rff_t SSP_SSPSR__RFF__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPSR__RFF__Msk);
    reg = (reg >> SSP_SSPSR__RFF__Pos);
    return (ssp_sspsr__rff_t)reg;
}

/* ----------------------------- SSP.SSPSR.RNE ----------------------------- */

/**
<pre>
  SSP.SSPSR.RNE:

    Receive FIFO not empty

</pre> */

/*lint -parent(uint32_t, ssp_sspsr__rne_t) -strong(AJX)*/
typedef enum ssp_sspsr__rne_e                                                                                                          /*!< Receive FIFO not empty */
{
    ssp_sspsr__rne_const_0b0 = 0u,                                                                                                     /*!<      Receive FIFO is empty */
    ssp_sspsr__rne_const_0b1 = 1u                                                                                                      /*!<      Receive FIFO is not empty */
} ssp_sspsr__rne_t;

#define SSP_SSPSR__RNE__Pos                                     2                                                                      /*!< Right-most bit position of RNE in SSP.SSPSR */
#define SSP_SSPSR__RNE__Msk                                     (0x00000001UL << SSP_SSPSR__RNE__Pos)                                  /*!< Mask for RNE in SSP.SSPSR */
#define SSP_SSPSR__RNE__Shift(v)                                (((v) << SSP_SSPSR__RNE__Pos) & SSP_SSPSR__RNE__Msk)                   /*!< Shift value 'v' into RNE and mask 'v' to fit it into RNE field */

/** SSP_SSPSR__RNE__GET() gets SSPSR.RNE's current value.
 *
 * When reading from SSPSR.RNE, this is recommended to use.
 *
 * @return current value of SSPSR.RNE
 */
__SSP_INLINE ssp_sspsr__rne_t SSP_SSPSR__RNE__GET(void)
{
    uint32_t reg = SSP_SSPSR__GET();
    reg = (reg & SSP_SSPSR__RNE__Msk);
    reg = (reg >> SSP_SSPSR__RNE__Pos);
    return (ssp_sspsr__rne_t)reg;
}

/** SSP_SSPSR__RNE__EXTRACT() extracts SSPSR.RNE.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPSR.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPSR
 * @return current value of SSPSR.RNE
 */
__SSP_INLINE ssp_sspsr__rne_t SSP_SSPSR__RNE__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPSR__RNE__Msk);
    reg = (reg >> SSP_SSPSR__RNE__Pos);
    return (ssp_sspsr__rne_t)reg;
}

/* ----------------------------- SSP.SSPSR.TNF ----------------------------- */

/**
<pre>
  SSP.SSPSR.TNF:

    Transmit FIFO not full

</pre> */

/*lint -parent(uint32_t, ssp_sspsr__tnf_t) -strong(AJX)*/
typedef enum ssp_sspsr__tnf_e                                                                                                          /*!< Transmit FIFO not full */
{
    ssp_sspsr__tnf_const_0b0 = 0u,                                                                                                     /*!<      Transmit FIFO is full */
    ssp_sspsr__tnf_const_0b1 = 1u                                                                                                      /*!<      Transmit FIFO is not full */
} ssp_sspsr__tnf_t;

#define SSP_SSPSR__TNF__Pos                                     1                                                                      /*!< Right-most bit position of TNF in SSP.SSPSR */
#define SSP_SSPSR__TNF__Msk                                     (0x00000001UL << SSP_SSPSR__TNF__Pos)                                  /*!< Mask for TNF in SSP.SSPSR */
#define SSP_SSPSR__TNF__Shift(v)                                (((v) << SSP_SSPSR__TNF__Pos) & SSP_SSPSR__TNF__Msk)                   /*!< Shift value 'v' into TNF and mask 'v' to fit it into TNF field */

/** SSP_SSPSR__TNF__GET() gets SSPSR.TNF's current value.
 *
 * When reading from SSPSR.TNF, this is recommended to use.
 *
 * @return current value of SSPSR.TNF
 */
__SSP_INLINE ssp_sspsr__tnf_t SSP_SSPSR__TNF__GET(void)
{
    uint32_t reg = SSP_SSPSR__GET();
    reg = (reg & SSP_SSPSR__TNF__Msk);
    reg = (reg >> SSP_SSPSR__TNF__Pos);
    return (ssp_sspsr__tnf_t)reg;
}

/** SSP_SSPSR__TNF__EXTRACT() extracts SSPSR.TNF.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPSR.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPSR
 * @return current value of SSPSR.TNF
 */
__SSP_INLINE ssp_sspsr__tnf_t SSP_SSPSR__TNF__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPSR__TNF__Msk);
    reg = (reg >> SSP_SSPSR__TNF__Pos);
    return (ssp_sspsr__tnf_t)reg;
}

/* ----------------------------- SSP.SSPSR.TFE ----------------------------- */

/**
<pre>
  SSP.SSPSR.TFE:

    Transmit FIFO empty

</pre> */

/*lint -parent(uint32_t, ssp_sspsr__tfe_t) -strong(AJX)*/
typedef enum ssp_sspsr__tfe_e                                                                                                          /*!< Transmit FIFO empty */
{
    ssp_sspsr__tfe_const_0b0 = 0u,                                                                                                     /*!<      Transmit FIFO is not empty */
    ssp_sspsr__tfe_const_0b1 = 1u                                                                                                      /*!<      Transmit FIFO is empty */
} ssp_sspsr__tfe_t;

#define SSP_SSPSR__TFE__Pos                                     0                                                                      /*!< Right-most bit position of TFE in SSP.SSPSR */
#define SSP_SSPSR__TFE__Msk                                     (0x00000001UL << SSP_SSPSR__TFE__Pos)                                  /*!< Mask for TFE in SSP.SSPSR */
#define SSP_SSPSR__TFE__Shift(v)                                (((v) << SSP_SSPSR__TFE__Pos) & SSP_SSPSR__TFE__Msk)                   /*!< Shift value 'v' into TFE and mask 'v' to fit it into TFE field */

/** SSP_SSPSR__TFE__GET() gets SSPSR.TFE's current value.
 *
 * When reading from SSPSR.TFE, this is recommended to use.
 *
 * @return current value of SSPSR.TFE
 */
__SSP_INLINE ssp_sspsr__tfe_t SSP_SSPSR__TFE__GET(void)
{
    uint32_t reg = SSP_SSPSR__GET();
    reg = (reg & SSP_SSPSR__TFE__Msk);
    reg = (reg >> SSP_SSPSR__TFE__Pos);
    return (ssp_sspsr__tfe_t)reg;
}

/** SSP_SSPSR__TFE__EXTRACT() extracts SSPSR.TFE.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPSR.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPSR
 * @return current value of SSPSR.TFE
 */
__SSP_INLINE ssp_sspsr__tfe_t SSP_SSPSR__TFE__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPSR__TFE__Msk);
    reg = (reg >> SSP_SSPSR__TFE__Pos);
    return (ssp_sspsr__tfe_t)reg;
}

/* -------------------------------------------------------------------------- */
/*                          SSPCPSR member of SSP_t                          */
/* -------------------------------------------------------------------------- */

/** __SSP_SSPCPSR__ADDRESS returns the address of member SSPCPSR.
 *
 * As indicated by the __ prefix, this is not intended for use by the FW. It is
 * here for readability only.
 *
 * @return address of SSPCPSR
 */
__SSP_INLINE uint32_t* __SSP_SSPCPSR__ADDRESS(void)
{
    return (uint32_t*)((uint32_t)__SSP_BASE_PTR() + (uint32_t)(offsetof(SSP_t, SSPCPSR)));
}

/** SSP_SSPCPSR__SET() sets SSPCPSR to given value.
 *
 * When writing to SSPCPSR, this is mandatory to use.
 *
 * @param value new value for SSPCPSR
 */
__SSP_INLINE void SSP_SSPCPSR__SET(uint32_t value)
{
    HAL_SET32(__SSP_SSPCPSR__ADDRESS(), value);
}

/** SSP_SSPCPSR__SETB0() sets byte 0 of SSPCPSR to given value.
 *
 * When writing to byte 0 of SSPCPSR, this is mandatory to use.
 *
 * @param value new value for byte 0 of SSPCPSR
 */
__SSP_INLINE void SSP_SSPCPSR__SETB0(uint8_t value)
{
    HAL_SET8(((uint8_t*)__SSP_SSPCPSR__ADDRESS()) + 0, value);
}

/** SSP_SSPCPSR__GET() gets SSPCPSR's current value.
 *
 * When reading from SSPCPSR, this is mandatory to use.
 *
 * @return current value of SSPCPSR
 */
__SSP_INLINE uint32_t SSP_SSPCPSR__GET(void)
{
    return HAL_GET32(__SSP_SSPCPSR__ADDRESS());
}

/** SSP_SSPCPSR__GETB0() gets byte 0 of SSPCPSR's current value.
 *
 * When reading from byte 0 of SSPCPSR, this is mandatory to use.
 *
 * @return current value of byte 0 of SSPCPSR
 */
__SSP_INLINE uint8_t SSP_SSPCPSR__GETB0(void)
{
    return HAL_GET8(((uint8_t*)__SSP_SSPCPSR__ADDRESS()) + 0);
}

/* ---------------------------- SSP.SSPCPSR.RES ---------------------------- */

/**
<pre>
  SSP.SSPCPSR.RES:

    Reserved, read unpredictable, should be written



    as 0.

</pre> */

#define SSP_SSPCPSR__RES__Pos                                   8                                                                      /*!< Right-most bit position of RES in SSP.SSPCPSR */
#define SSP_SSPCPSR__RES__Msk                                   (0x00FFFFFFUL << SSP_SSPCPSR__RES__Pos)                                /*!< Mask for RES in SSP.SSPCPSR */
#define SSP_SSPCPSR__RES__Shift(v)                              (((v) << SSP_SSPCPSR__RES__Pos) & SSP_SSPCPSR__RES__Msk)               /*!< Shift value 'v' into RES and mask 'v' to fit it into RES field */

/** SSP_SSPCPSR__RES__GET() gets SSPCPSR.RES's current value.
 *
 * When reading from SSPCPSR.RES, this is recommended to use.
 *
 * @return current value of SSPCPSR.RES
 */
__SSP_INLINE uint32_t SSP_SSPCPSR__RES__GET(void)
{
    uint32_t reg = SSP_SSPCPSR__GET();
    reg = (reg & SSP_SSPCPSR__RES__Msk);
    reg = (reg >> SSP_SSPCPSR__RES__Pos);
    return (uint32_t)reg;
}

/** SSP_SSPCPSR__RES__EXTRACT() extracts SSPCPSR.RES.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPCPSR.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPCPSR
 * @return current value of SSPCPSR.RES
 */
__SSP_INLINE uint32_t SSP_SSPCPSR__RES__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPCPSR__RES__Msk);
    reg = (reg >> SSP_SSPCPSR__RES__Pos);
    return (uint32_t)reg;
}

/* -------------------------- SSP.SSPCPSR.CPSDVSR -------------------------- */

/**
<pre>
  SSP.SSPCPSR.CPSDVSR:

    Clock prescale divisor

</pre> */

#define SSP_SSPCPSR__CPSDVSR__Pos                               0                                                                      /*!< Right-most bit position of CPSDVSR in SSP.SSPCPSR */
#define SSP_SSPCPSR__CPSDVSR__Msk                               (0x000000FFUL << SSP_SSPCPSR__CPSDVSR__Pos)                            /*!< Mask for CPSDVSR in SSP.SSPCPSR */
#define SSP_SSPCPSR__CPSDVSR__Shift(v)                          (((v) << SSP_SSPCPSR__CPSDVSR__Pos) & SSP_SSPCPSR__CPSDVSR__Msk)       /*!< Shift value 'v' into CPSDVSR and mask 'v' to fit it into CPSDVSR field */

/** SSP_SSPCPSR__CPSDVSR__SET() sets SSPCPSR.CPSDVSR to given value.
 *
 * When writing to SSPCPSR.CPSDVSR, this is recommended to use.
 *
 * @param bf_value new value for SSPCPSR.CPSDVSR
 */
__SSP_INLINE void SSP_SSPCPSR__CPSDVSR__SET(uint32_t bf_value)
{
    uint8_t reg = (uint8_t)bf_value & (uint8_t)0xFF;
    SSP_SSPCPSR__SETB0(reg);
}

/** SSP_SSPCPSR__CPSDVSR__GET() gets SSPCPSR.CPSDVSR's current value.
 *
 * When reading from SSPCPSR.CPSDVSR, this is recommended to use.
 *
 * @return current value of SSPCPSR.CPSDVSR
 */
__SSP_INLINE uint32_t SSP_SSPCPSR__CPSDVSR__GET(void)
{
    uint8_t reg = SSP_SSPCPSR__GETB0();
    reg = (reg & (uint8_t)0xFF);
    return (uint32_t)reg;
}

/** SSP_SSPCPSR__CPSDVSR__MODIFY() modifies SSPCPSR.CPSDVSR.
 *
 * This is recommended to use when setting more than one bitfield of SSP.SSPCPSR.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of SSP.SSPCPSR
 * @param bf_value new value for SSPCPSR.CPSDVSR
 * @return new value of SSP.SSPCPSR
 */
__SSP_INLINE uint32_t SSP_SSPCPSR__CPSDVSR__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~SSP_SSPCPSR__CPSDVSR__Msk);
    reg = (reg | (SSP_SSPCPSR__CPSDVSR__Shift((uint32_t)bf_value)));
    return reg;
}

/** SSP_SSPCPSR__CPSDVSR__EXTRACT() extracts SSPCPSR.CPSDVSR.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPCPSR.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPCPSR
 * @return current value of SSPCPSR.CPSDVSR
 */
__SSP_INLINE uint32_t SSP_SSPCPSR__CPSDVSR__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPCPSR__CPSDVSR__Msk);
    reg = (reg >> SSP_SSPCPSR__CPSDVSR__Pos);
    return (uint32_t)reg;
}

/* -------------------------------------------------------------------------- */
/*                          SSPIMSC member of SSP_t                          */
/* -------------------------------------------------------------------------- */

/** __SSP_SSPIMSC__ADDRESS returns the address of member SSPIMSC.
 *
 * As indicated by the __ prefix, this is not intended for use by the FW. It is
 * here for readability only.
 *
 * @return address of SSPIMSC
 */
__SSP_INLINE uint32_t* __SSP_SSPIMSC__ADDRESS(void)
{
    return (uint32_t*)((uint32_t)__SSP_BASE_PTR() + (uint32_t)(offsetof(SSP_t, SSPIMSC)));
}

/** SSP_SSPIMSC__SET() sets SSPIMSC to given value.
 *
 * When writing to SSPIMSC, this is mandatory to use.
 *
 * @param value new value for SSPIMSC
 */
__SSP_INLINE void SSP_SSPIMSC__SET(uint32_t value)
{
    HAL_SET32(__SSP_SSPIMSC__ADDRESS(), value);
}

/** SSP_SSPIMSC__GET() gets SSPIMSC's current value.
 *
 * When reading from SSPIMSC, this is mandatory to use.
 *
 * @return current value of SSPIMSC
 */
__SSP_INLINE uint32_t SSP_SSPIMSC__GET(void)
{
    return HAL_GET32(__SSP_SSPIMSC__ADDRESS());
}

/* ---------------------------- SSP.SSPIMSC.RES ---------------------------- */

/**
<pre>
  SSP.SSPIMSC.RES:

    Reserved, read as zero, do not modify.

</pre> */

#define SSP_SSPIMSC__RES__Pos                                   4                                                                      /*!< Right-most bit position of RES in SSP.SSPIMSC */
#define SSP_SSPIMSC__RES__Msk                                   (0x0FFFFFFFUL << SSP_SSPIMSC__RES__Pos)                                /*!< Mask for RES in SSP.SSPIMSC */
#define SSP_SSPIMSC__RES__Shift(v)                              (((v) << SSP_SSPIMSC__RES__Pos) & SSP_SSPIMSC__RES__Msk)               /*!< Shift value 'v' into RES and mask 'v' to fit it into RES field */

/** SSP_SSPIMSC__RES__GET() gets SSPIMSC.RES's current value.
 *
 * When reading from SSPIMSC.RES, this is recommended to use.
 *
 * @return current value of SSPIMSC.RES
 */
__SSP_INLINE uint32_t SSP_SSPIMSC__RES__GET(void)
{
    uint32_t reg = SSP_SSPIMSC__GET();
    reg = (reg & SSP_SSPIMSC__RES__Msk);
    reg = (reg >> SSP_SSPIMSC__RES__Pos);
    return (uint32_t)reg;
}

/** SSP_SSPIMSC__RES__EXTRACT() extracts SSPIMSC.RES.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPIMSC.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPIMSC
 * @return current value of SSPIMSC.RES
 */
__SSP_INLINE uint32_t SSP_SSPIMSC__RES__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPIMSC__RES__Msk);
    reg = (reg >> SSP_SSPIMSC__RES__Pos);
    return (uint32_t)reg;
}

/* ---------------------------- SSP.SSPIMSC.TXIM ---------------------------- */

/**
<pre>
  SSP.SSPIMSC.TXIM:

    Transmit FIFO interrupt mask

</pre> */

/*lint -parent(uint32_t, ssp_sspimsc__txim_t) -strong(AJX)*/
typedef enum ssp_sspimsc__txim_e                                                                                                       /*!< Transmit FIFO interrupt mask */
{
    ssp_sspimsc__txim_const_0b0 = 0u,                                                                                                  /*!<      Tx FIFO half empty or less condition interrupt is masked */
    ssp_sspimsc__txim_const_0b1 = 1u                                                                                                   /*!<      Tx FIFO half empty or less condition interrupt is not masked */
} ssp_sspimsc__txim_t;

#define SSP_SSPIMSC__TXIM__Pos                                  3                                                                      /*!< Right-most bit position of TXIM in SSP.SSPIMSC */
#define SSP_SSPIMSC__TXIM__Msk                                  (0x00000001UL << SSP_SSPIMSC__TXIM__Pos)                               /*!< Mask for TXIM in SSP.SSPIMSC */
#define SSP_SSPIMSC__TXIM__Shift(v)                             (((v) << SSP_SSPIMSC__TXIM__Pos) & SSP_SSPIMSC__TXIM__Msk)             /*!< Shift value 'v' into TXIM and mask 'v' to fit it into TXIM field */

/** SSP_SSPIMSC__TXIM__SET() sets SSPIMSC.TXIM to given value.
 *
 * When writing to SSPIMSC.TXIM, this is recommended to use.
 *
 * @param bf_value new value for SSPIMSC.TXIM
 */
__SSP_INLINE void SSP_SSPIMSC__TXIM__SET(ssp_sspimsc__txim_t bf_value)
{
    uint32_t reg = SSP_SSPIMSC__GET();
    reg = (reg & ~SSP_SSPIMSC__TXIM__Msk);
    reg = (reg | (SSP_SSPIMSC__TXIM__Shift((uint32_t)bf_value)));
    SSP_SSPIMSC__SET(reg);
}

/** SSP_SSPIMSC__TXIM__GET() gets SSPIMSC.TXIM's current value.
 *
 * When reading from SSPIMSC.TXIM, this is recommended to use.
 *
 * @return current value of SSPIMSC.TXIM
 */
__SSP_INLINE ssp_sspimsc__txim_t SSP_SSPIMSC__TXIM__GET(void)
{
    uint32_t reg = SSP_SSPIMSC__GET();
    reg = (reg & SSP_SSPIMSC__TXIM__Msk);
    reg = (reg >> SSP_SSPIMSC__TXIM__Pos);
    return (ssp_sspimsc__txim_t)reg;
}

/** SSP_SSPIMSC__TXIM__MODIFY() modifies SSPIMSC.TXIM.
 *
 * This is recommended to use when setting more than one bitfield of SSP.SSPIMSC.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of SSP.SSPIMSC
 * @param bf_value new value for SSPIMSC.TXIM
 * @return new value of SSP.SSPIMSC
 */
__SSP_INLINE uint32_t SSP_SSPIMSC__TXIM__MODIFY(uint32_t reg, ssp_sspimsc__txim_t bf_value)
{
    reg = (reg & ~SSP_SSPIMSC__TXIM__Msk);
    reg = (reg | (SSP_SSPIMSC__TXIM__Shift((uint32_t)bf_value)));
    return reg;
}

/** SSP_SSPIMSC__TXIM__EXTRACT() extracts SSPIMSC.TXIM.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPIMSC.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPIMSC
 * @return current value of SSPIMSC.TXIM
 */
__SSP_INLINE ssp_sspimsc__txim_t SSP_SSPIMSC__TXIM__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPIMSC__TXIM__Msk);
    reg = (reg >> SSP_SSPIMSC__TXIM__Pos);
    return (ssp_sspimsc__txim_t)reg;
}

/* ---------------------------- SSP.SSPIMSC.RXIM ---------------------------- */

/**
<pre>
  SSP.SSPIMSC.RXIM:

    Receive FIFO interrupt mask

</pre> */

/*lint -parent(uint32_t, ssp_sspimsc__rxim_t) -strong(AJX)*/
typedef enum ssp_sspimsc__rxim_e                                                                                                       /*!< Receive FIFO interrupt mask */
{
    ssp_sspimsc__rxim_const_0b0 = 0u,                                                                                                  /*!<      Rx FIFO half full or less condition interrupt is masked */
    ssp_sspimsc__rxim_const_0b1 = 1u                                                                                                   /*!<      Rx FIFO half full or less condition interrupt is not masked */
} ssp_sspimsc__rxim_t;

#define SSP_SSPIMSC__RXIM__Pos                                  2                                                                      /*!< Right-most bit position of RXIM in SSP.SSPIMSC */
#define SSP_SSPIMSC__RXIM__Msk                                  (0x00000001UL << SSP_SSPIMSC__RXIM__Pos)                               /*!< Mask for RXIM in SSP.SSPIMSC */
#define SSP_SSPIMSC__RXIM__Shift(v)                             (((v) << SSP_SSPIMSC__RXIM__Pos) & SSP_SSPIMSC__RXIM__Msk)             /*!< Shift value 'v' into RXIM and mask 'v' to fit it into RXIM field */

/** SSP_SSPIMSC__RXIM__SET() sets SSPIMSC.RXIM to given value.
 *
 * When writing to SSPIMSC.RXIM, this is recommended to use.
 *
 * @param bf_value new value for SSPIMSC.RXIM
 */
__SSP_INLINE void SSP_SSPIMSC__RXIM__SET(ssp_sspimsc__rxim_t bf_value)
{
    uint32_t reg = SSP_SSPIMSC__GET();
    reg = (reg & ~SSP_SSPIMSC__RXIM__Msk);
    reg = (reg | (SSP_SSPIMSC__RXIM__Shift((uint32_t)bf_value)));
    SSP_SSPIMSC__SET(reg);
}

/** SSP_SSPIMSC__RXIM__GET() gets SSPIMSC.RXIM's current value.
 *
 * When reading from SSPIMSC.RXIM, this is recommended to use.
 *
 * @return current value of SSPIMSC.RXIM
 */
__SSP_INLINE ssp_sspimsc__rxim_t SSP_SSPIMSC__RXIM__GET(void)
{
    uint32_t reg = SSP_SSPIMSC__GET();
    reg = (reg & SSP_SSPIMSC__RXIM__Msk);
    reg = (reg >> SSP_SSPIMSC__RXIM__Pos);
    return (ssp_sspimsc__rxim_t)reg;
}

/** SSP_SSPIMSC__RXIM__MODIFY() modifies SSPIMSC.RXIM.
 *
 * This is recommended to use when setting more than one bitfield of SSP.SSPIMSC.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of SSP.SSPIMSC
 * @param bf_value new value for SSPIMSC.RXIM
 * @return new value of SSP.SSPIMSC
 */
__SSP_INLINE uint32_t SSP_SSPIMSC__RXIM__MODIFY(uint32_t reg, ssp_sspimsc__rxim_t bf_value)
{
    reg = (reg & ~SSP_SSPIMSC__RXIM__Msk);
    reg = (reg | (SSP_SSPIMSC__RXIM__Shift((uint32_t)bf_value)));
    return reg;
}

/** SSP_SSPIMSC__RXIM__EXTRACT() extracts SSPIMSC.RXIM.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPIMSC.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPIMSC
 * @return current value of SSPIMSC.RXIM
 */
__SSP_INLINE ssp_sspimsc__rxim_t SSP_SSPIMSC__RXIM__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPIMSC__RXIM__Msk);
    reg = (reg >> SSP_SSPIMSC__RXIM__Pos);
    return (ssp_sspimsc__rxim_t)reg;
}

/* ---------------------------- SSP.SSPIMSC.RTIM ---------------------------- */

/**
<pre>
  SSP.SSPIMSC.RTIM:

    Receive timeout interrupt mask

</pre> */

/*lint -parent(uint32_t, ssp_sspimsc__rtim_t) -strong(AJX)*/
typedef enum ssp_sspimsc__rtim_e                                                                                                       /*!< Receive timeout interrupt mask */
{
    ssp_sspimsc__rtim_const_0b0 = 0u,                                                                                                  /*!<      Rx FIFO not empty and no read prior to timeout period interr...(more) */
    ssp_sspimsc__rtim_const_0b1 = 1u                                                                                                   /*!<      Rx FIFO not empty and no read prior to timeout period interr...(more) */
} ssp_sspimsc__rtim_t;

#define SSP_SSPIMSC__RTIM__Pos                                  1                                                                      /*!< Right-most bit position of RTIM in SSP.SSPIMSC */
#define SSP_SSPIMSC__RTIM__Msk                                  (0x00000001UL << SSP_SSPIMSC__RTIM__Pos)                               /*!< Mask for RTIM in SSP.SSPIMSC */
#define SSP_SSPIMSC__RTIM__Shift(v)                             (((v) << SSP_SSPIMSC__RTIM__Pos) & SSP_SSPIMSC__RTIM__Msk)             /*!< Shift value 'v' into RTIM and mask 'v' to fit it into RTIM field */

/** SSP_SSPIMSC__RTIM__SET() sets SSPIMSC.RTIM to given value.
 *
 * When writing to SSPIMSC.RTIM, this is recommended to use.
 *
 * @param bf_value new value for SSPIMSC.RTIM
 */
__SSP_INLINE void SSP_SSPIMSC__RTIM__SET(ssp_sspimsc__rtim_t bf_value)
{
    uint32_t reg = SSP_SSPIMSC__GET();
    reg = (reg & ~SSP_SSPIMSC__RTIM__Msk);
    reg = (reg | (SSP_SSPIMSC__RTIM__Shift((uint32_t)bf_value)));
    SSP_SSPIMSC__SET(reg);
}

/** SSP_SSPIMSC__RTIM__GET() gets SSPIMSC.RTIM's current value.
 *
 * When reading from SSPIMSC.RTIM, this is recommended to use.
 *
 * @return current value of SSPIMSC.RTIM
 */
__SSP_INLINE ssp_sspimsc__rtim_t SSP_SSPIMSC__RTIM__GET(void)
{
    uint32_t reg = SSP_SSPIMSC__GET();
    reg = (reg & SSP_SSPIMSC__RTIM__Msk);
    reg = (reg >> SSP_SSPIMSC__RTIM__Pos);
    return (ssp_sspimsc__rtim_t)reg;
}

/** SSP_SSPIMSC__RTIM__MODIFY() modifies SSPIMSC.RTIM.
 *
 * This is recommended to use when setting more than one bitfield of SSP.SSPIMSC.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of SSP.SSPIMSC
 * @param bf_value new value for SSPIMSC.RTIM
 * @return new value of SSP.SSPIMSC
 */
__SSP_INLINE uint32_t SSP_SSPIMSC__RTIM__MODIFY(uint32_t reg, ssp_sspimsc__rtim_t bf_value)
{
    reg = (reg & ~SSP_SSPIMSC__RTIM__Msk);
    reg = (reg | (SSP_SSPIMSC__RTIM__Shift((uint32_t)bf_value)));
    return reg;
}

/** SSP_SSPIMSC__RTIM__EXTRACT() extracts SSPIMSC.RTIM.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPIMSC.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPIMSC
 * @return current value of SSPIMSC.RTIM
 */
__SSP_INLINE ssp_sspimsc__rtim_t SSP_SSPIMSC__RTIM__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPIMSC__RTIM__Msk);
    reg = (reg >> SSP_SSPIMSC__RTIM__Pos);
    return (ssp_sspimsc__rtim_t)reg;
}

/* --------------------------- SSP.SSPIMSC.RORIM --------------------------- */

/**
<pre>
  SSP.SSPIMSC.RORIM:

    Receive overrun interrupt mask

</pre> */

/*lint -parent(uint32_t, ssp_sspimsc__rorim_t) -strong(AJX)*/
typedef enum ssp_sspimsc__rorim_e                                                                                                      /*!< Receive overrun interrupt mask */
{
    ssp_sspimsc__rorim_const_0b0 = 0u,                                                                                                 /*!<      Rx FIFO written to while full condition interrupt is masked */
    ssp_sspimsc__rorim_const_0b1 = 1u                                                                                                  /*!<      Rx FIFO written to while full condition interrupt is not masked */
} ssp_sspimsc__rorim_t;

#define SSP_SSPIMSC__RORIM__Pos                                 0                                                                      /*!< Right-most bit position of RORIM in SSP.SSPIMSC */
#define SSP_SSPIMSC__RORIM__Msk                                 (0x00000001UL << SSP_SSPIMSC__RORIM__Pos)                              /*!< Mask for RORIM in SSP.SSPIMSC */
#define SSP_SSPIMSC__RORIM__Shift(v)                            (((v) << SSP_SSPIMSC__RORIM__Pos) & SSP_SSPIMSC__RORIM__Msk)           /*!< Shift value 'v' into RORIM and mask 'v' to fit it into RORIM field */

/** SSP_SSPIMSC__RORIM__SET() sets SSPIMSC.RORIM to given value.
 *
 * When writing to SSPIMSC.RORIM, this is recommended to use.
 *
 * @param bf_value new value for SSPIMSC.RORIM
 */
__SSP_INLINE void SSP_SSPIMSC__RORIM__SET(ssp_sspimsc__rorim_t bf_value)
{
    uint32_t reg = SSP_SSPIMSC__GET();
    reg = (reg & ~SSP_SSPIMSC__RORIM__Msk);
    reg = (reg | (SSP_SSPIMSC__RORIM__Shift((uint32_t)bf_value)));
    SSP_SSPIMSC__SET(reg);
}

/** SSP_SSPIMSC__RORIM__GET() gets SSPIMSC.RORIM's current value.
 *
 * When reading from SSPIMSC.RORIM, this is recommended to use.
 *
 * @return current value of SSPIMSC.RORIM
 */
__SSP_INLINE ssp_sspimsc__rorim_t SSP_SSPIMSC__RORIM__GET(void)
{
    uint32_t reg = SSP_SSPIMSC__GET();
    reg = (reg & SSP_SSPIMSC__RORIM__Msk);
    reg = (reg >> SSP_SSPIMSC__RORIM__Pos);
    return (ssp_sspimsc__rorim_t)reg;
}

/** SSP_SSPIMSC__RORIM__MODIFY() modifies SSPIMSC.RORIM.
 *
 * This is recommended to use when setting more than one bitfield of SSP.SSPIMSC.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of SSP.SSPIMSC
 * @param bf_value new value for SSPIMSC.RORIM
 * @return new value of SSP.SSPIMSC
 */
__SSP_INLINE uint32_t SSP_SSPIMSC__RORIM__MODIFY(uint32_t reg, ssp_sspimsc__rorim_t bf_value)
{
    reg = (reg & ~SSP_SSPIMSC__RORIM__Msk);
    reg = (reg | (SSP_SSPIMSC__RORIM__Shift((uint32_t)bf_value)));
    return reg;
}

/** SSP_SSPIMSC__RORIM__EXTRACT() extracts SSPIMSC.RORIM.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPIMSC.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPIMSC
 * @return current value of SSPIMSC.RORIM
 */
__SSP_INLINE ssp_sspimsc__rorim_t SSP_SSPIMSC__RORIM__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPIMSC__RORIM__Msk);
    reg = (reg >> SSP_SSPIMSC__RORIM__Pos);
    return (ssp_sspimsc__rorim_t)reg;
}

/* -------------------------------------------------------------------------- */
/*                           SSPRIS member of SSP_t                           */
/* -------------------------------------------------------------------------- */

/** __SSP_SSPRIS__ADDRESS returns the address of member SSPRIS.
 *
 * As indicated by the __ prefix, this is not intended for use by the FW. It is
 * here for readability only.
 *
 * @return address of SSPRIS
 */
__SSP_INLINE uint32_t* __SSP_SSPRIS__ADDRESS(void)
{
    return (uint32_t*)((uint32_t)__SSP_BASE_PTR() + (uint32_t)(offsetof(SSP_t, SSPRIS)));
}

/** SSP_SSPRIS__GET() gets SSPRIS's current value.
 *
 * When reading from SSPRIS, this is mandatory to use.
 *
 * @return current value of SSPRIS
 */
__SSP_INLINE uint32_t SSP_SSPRIS__GET(void)
{
    return HAL_GET32(__SSP_SSPRIS__ADDRESS());
}

/* ----------------------------- SSP.SSPRIS.RES ----------------------------- */

/**
<pre>
  SSP.SSPRIS.RES:

    Reserved, read as zero, do not modify.

</pre> */

#define SSP_SSPRIS__RES__Pos                                    4                                                                      /*!< Right-most bit position of RES in SSP.SSPRIS */
#define SSP_SSPRIS__RES__Msk                                    (0x0FFFFFFFUL << SSP_SSPRIS__RES__Pos)                                 /*!< Mask for RES in SSP.SSPRIS */
#define SSP_SSPRIS__RES__Shift(v)                               (((v) << SSP_SSPRIS__RES__Pos) & SSP_SSPRIS__RES__Msk)                 /*!< Shift value 'v' into RES and mask 'v' to fit it into RES field */

/** SSP_SSPRIS__RES__GET() gets SSPRIS.RES's current value.
 *
 * When reading from SSPRIS.RES, this is recommended to use.
 *
 * @return current value of SSPRIS.RES
 */
__SSP_INLINE uint32_t SSP_SSPRIS__RES__GET(void)
{
    uint32_t reg = SSP_SSPRIS__GET();
    reg = (reg & SSP_SSPRIS__RES__Msk);
    reg = (reg >> SSP_SSPRIS__RES__Pos);
    return (uint32_t)reg;
}

/** SSP_SSPRIS__RES__EXTRACT() extracts SSPRIS.RES.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPRIS.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPRIS
 * @return current value of SSPRIS.RES
 */
__SSP_INLINE uint32_t SSP_SSPRIS__RES__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPRIS__RES__Msk);
    reg = (reg >> SSP_SSPRIS__RES__Pos);
    return (uint32_t)reg;
}

/* ---------------------------- SSP.SSPRIS.TXRIS ---------------------------- */

/**
<pre>
  SSP.SSPRIS.TXRIS:

    SSPTXINTR Raw Interrupt Status

</pre> */

#define SSP_SSPRIS__TXRIS__Pos                                  3                                                                      /*!< Right-most bit position of TXRIS in SSP.SSPRIS */
#define SSP_SSPRIS__TXRIS__Msk                                  (0x00000001UL << SSP_SSPRIS__TXRIS__Pos)                               /*!< Mask for TXRIS in SSP.SSPRIS */
#define SSP_SSPRIS__TXRIS__Shift(v)                             (((v) << SSP_SSPRIS__TXRIS__Pos) & SSP_SSPRIS__TXRIS__Msk)             /*!< Shift value 'v' into TXRIS and mask 'v' to fit it into TXRIS field */

/** SSP_SSPRIS__TXRIS__GET() gets SSPRIS.TXRIS's current value.
 *
 * When reading from SSPRIS.TXRIS, this is recommended to use.
 *
 * @return current value of SSPRIS.TXRIS
 */
__SSP_INLINE uint32_t SSP_SSPRIS__TXRIS__GET(void)
{
    uint32_t reg = SSP_SSPRIS__GET();
    reg = (reg & SSP_SSPRIS__TXRIS__Msk);
    reg = (reg >> SSP_SSPRIS__TXRIS__Pos);
    return (uint32_t)reg;
}

/** SSP_SSPRIS__TXRIS__EXTRACT() extracts SSPRIS.TXRIS.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPRIS.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPRIS
 * @return current value of SSPRIS.TXRIS
 */
__SSP_INLINE uint32_t SSP_SSPRIS__TXRIS__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPRIS__TXRIS__Msk);
    reg = (reg >> SSP_SSPRIS__TXRIS__Pos);
    return (uint32_t)reg;
}

/* ---------------------------- SSP.SSPRIS.RXRIS ---------------------------- */

/**
<pre>
  SSP.SSPRIS.RXRIS:

    SSPRXINTR Raw Interrupt Status

</pre> */

#define SSP_SSPRIS__RXRIS__Pos                                  2                                                                      /*!< Right-most bit position of RXRIS in SSP.SSPRIS */
#define SSP_SSPRIS__RXRIS__Msk                                  (0x00000001UL << SSP_SSPRIS__RXRIS__Pos)                               /*!< Mask for RXRIS in SSP.SSPRIS */
#define SSP_SSPRIS__RXRIS__Shift(v)                             (((v) << SSP_SSPRIS__RXRIS__Pos) & SSP_SSPRIS__RXRIS__Msk)             /*!< Shift value 'v' into RXRIS and mask 'v' to fit it into RXRIS field */

/** SSP_SSPRIS__RXRIS__GET() gets SSPRIS.RXRIS's current value.
 *
 * When reading from SSPRIS.RXRIS, this is recommended to use.
 *
 * @return current value of SSPRIS.RXRIS
 */
__SSP_INLINE uint32_t SSP_SSPRIS__RXRIS__GET(void)
{
    uint32_t reg = SSP_SSPRIS__GET();
    reg = (reg & SSP_SSPRIS__RXRIS__Msk);
    reg = (reg >> SSP_SSPRIS__RXRIS__Pos);
    return (uint32_t)reg;
}

/** SSP_SSPRIS__RXRIS__EXTRACT() extracts SSPRIS.RXRIS.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPRIS.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPRIS
 * @return current value of SSPRIS.RXRIS
 */
__SSP_INLINE uint32_t SSP_SSPRIS__RXRIS__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPRIS__RXRIS__Msk);
    reg = (reg >> SSP_SSPRIS__RXRIS__Pos);
    return (uint32_t)reg;
}

/* ---------------------------- SSP.SSPRIS.RTRIS ---------------------------- */

/**
<pre>
  SSP.SSPRIS.RTRIS:

    SSPRTINTR Raw Interrupt Status

</pre> */

#define SSP_SSPRIS__RTRIS__Pos                                  1                                                                      /*!< Right-most bit position of RTRIS in SSP.SSPRIS */
#define SSP_SSPRIS__RTRIS__Msk                                  (0x00000001UL << SSP_SSPRIS__RTRIS__Pos)                               /*!< Mask for RTRIS in SSP.SSPRIS */
#define SSP_SSPRIS__RTRIS__Shift(v)                             (((v) << SSP_SSPRIS__RTRIS__Pos) & SSP_SSPRIS__RTRIS__Msk)             /*!< Shift value 'v' into RTRIS and mask 'v' to fit it into RTRIS field */

/** SSP_SSPRIS__RTRIS__GET() gets SSPRIS.RTRIS's current value.
 *
 * When reading from SSPRIS.RTRIS, this is recommended to use.
 *
 * @return current value of SSPRIS.RTRIS
 */
__SSP_INLINE uint32_t SSP_SSPRIS__RTRIS__GET(void)
{
    uint32_t reg = SSP_SSPRIS__GET();
    reg = (reg & SSP_SSPRIS__RTRIS__Msk);
    reg = (reg >> SSP_SSPRIS__RTRIS__Pos);
    return (uint32_t)reg;
}

/** SSP_SSPRIS__RTRIS__EXTRACT() extracts SSPRIS.RTRIS.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPRIS.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPRIS
 * @return current value of SSPRIS.RTRIS
 */
__SSP_INLINE uint32_t SSP_SSPRIS__RTRIS__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPRIS__RTRIS__Msk);
    reg = (reg >> SSP_SSPRIS__RTRIS__Pos);
    return (uint32_t)reg;
}

/* --------------------------- SSP.SSPRIS.RORRIS --------------------------- */

/**
<pre>
  SSP.SSPRIS.RORRIS:

    SSPRORINTR Raw Interrupt Status

</pre> */

#define SSP_SSPRIS__RORRIS__Pos                                 0                                                                      /*!< Right-most bit position of RORRIS in SSP.SSPRIS */
#define SSP_SSPRIS__RORRIS__Msk                                 (0x00000001UL << SSP_SSPRIS__RORRIS__Pos)                              /*!< Mask for RORRIS in SSP.SSPRIS */
#define SSP_SSPRIS__RORRIS__Shift(v)                            (((v) << SSP_SSPRIS__RORRIS__Pos) & SSP_SSPRIS__RORRIS__Msk)           /*!< Shift value 'v' into RORRIS and mask 'v' to fit it into RORRIS field */

/** SSP_SSPRIS__RORRIS__GET() gets SSPRIS.RORRIS's current value.
 *
 * When reading from SSPRIS.RORRIS, this is recommended to use.
 *
 * @return current value of SSPRIS.RORRIS
 */
__SSP_INLINE uint32_t SSP_SSPRIS__RORRIS__GET(void)
{
    uint32_t reg = SSP_SSPRIS__GET();
    reg = (reg & SSP_SSPRIS__RORRIS__Msk);
    reg = (reg >> SSP_SSPRIS__RORRIS__Pos);
    return (uint32_t)reg;
}

/** SSP_SSPRIS__RORRIS__EXTRACT() extracts SSPRIS.RORRIS.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPRIS.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPRIS
 * @return current value of SSPRIS.RORRIS
 */
__SSP_INLINE uint32_t SSP_SSPRIS__RORRIS__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPRIS__RORRIS__Msk);
    reg = (reg >> SSP_SSPRIS__RORRIS__Pos);
    return (uint32_t)reg;
}

/* -------------------------------------------------------------------------- */
/*                           SSPMIS member of SSP_t                           */
/* -------------------------------------------------------------------------- */

/** __SSP_SSPMIS__ADDRESS returns the address of member SSPMIS.
 *
 * As indicated by the __ prefix, this is not intended for use by the FW. It is
 * here for readability only.
 *
 * @return address of SSPMIS
 */
__SSP_INLINE uint32_t* __SSP_SSPMIS__ADDRESS(void)
{
    return (uint32_t*)((uint32_t)__SSP_BASE_PTR() + (uint32_t)(offsetof(SSP_t, SSPMIS)));
}

/** SSP_SSPMIS__GET() gets SSPMIS's current value.
 *
 * When reading from SSPMIS, this is mandatory to use.
 *
 * @return current value of SSPMIS
 */
__SSP_INLINE uint32_t SSP_SSPMIS__GET(void)
{
    return HAL_GET32(__SSP_SSPMIS__ADDRESS());
}

/* ----------------------------- SSP.SSPMIS.RES ----------------------------- */

/**
<pre>
  SSP.SSPMIS.RES:

    Reserved, read as zero, do not modify.

</pre> */

#define SSP_SSPMIS__RES__Pos                                    4                                                                      /*!< Right-most bit position of RES in SSP.SSPMIS */
#define SSP_SSPMIS__RES__Msk                                    (0x0FFFFFFFUL << SSP_SSPMIS__RES__Pos)                                 /*!< Mask for RES in SSP.SSPMIS */
#define SSP_SSPMIS__RES__Shift(v)                               (((v) << SSP_SSPMIS__RES__Pos) & SSP_SSPMIS__RES__Msk)                 /*!< Shift value 'v' into RES and mask 'v' to fit it into RES field */

/** SSP_SSPMIS__RES__GET() gets SSPMIS.RES's current value.
 *
 * When reading from SSPMIS.RES, this is recommended to use.
 *
 * @return current value of SSPMIS.RES
 */
__SSP_INLINE uint32_t SSP_SSPMIS__RES__GET(void)
{
    uint32_t reg = SSP_SSPMIS__GET();
    reg = (reg & SSP_SSPMIS__RES__Msk);
    reg = (reg >> SSP_SSPMIS__RES__Pos);
    return (uint32_t)reg;
}

/** SSP_SSPMIS__RES__EXTRACT() extracts SSPMIS.RES.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPMIS.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPMIS
 * @return current value of SSPMIS.RES
 */
__SSP_INLINE uint32_t SSP_SSPMIS__RES__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPMIS__RES__Msk);
    reg = (reg >> SSP_SSPMIS__RES__Pos);
    return (uint32_t)reg;
}

/* ---------------------------- SSP.SSPMIS.TXMIS ---------------------------- */

/**
<pre>
  SSP.SSPMIS.TXMIS:

    SSPTXINTR Masked Interrupt Status

</pre> */

#define SSP_SSPMIS__TXMIS__Pos                                  3                                                                      /*!< Right-most bit position of TXMIS in SSP.SSPMIS */
#define SSP_SSPMIS__TXMIS__Msk                                  (0x00000001UL << SSP_SSPMIS__TXMIS__Pos)                               /*!< Mask for TXMIS in SSP.SSPMIS */
#define SSP_SSPMIS__TXMIS__Shift(v)                             (((v) << SSP_SSPMIS__TXMIS__Pos) & SSP_SSPMIS__TXMIS__Msk)             /*!< Shift value 'v' into TXMIS and mask 'v' to fit it into TXMIS field */

/** SSP_SSPMIS__TXMIS__GET() gets SSPMIS.TXMIS's current value.
 *
 * When reading from SSPMIS.TXMIS, this is recommended to use.
 *
 * @return current value of SSPMIS.TXMIS
 */
__SSP_INLINE uint32_t SSP_SSPMIS__TXMIS__GET(void)
{
    uint32_t reg = SSP_SSPMIS__GET();
    reg = (reg & SSP_SSPMIS__TXMIS__Msk);
    reg = (reg >> SSP_SSPMIS__TXMIS__Pos);
    return (uint32_t)reg;
}

/** SSP_SSPMIS__TXMIS__EXTRACT() extracts SSPMIS.TXMIS.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPMIS.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPMIS
 * @return current value of SSPMIS.TXMIS
 */
__SSP_INLINE uint32_t SSP_SSPMIS__TXMIS__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPMIS__TXMIS__Msk);
    reg = (reg >> SSP_SSPMIS__TXMIS__Pos);
    return (uint32_t)reg;
}

/* ---------------------------- SSP.SSPMIS.RXMIS ---------------------------- */

/**
<pre>
  SSP.SSPMIS.RXMIS:

    SSPRXINTR Masked Interrupt Status

</pre> */

#define SSP_SSPMIS__RXMIS__Pos                                  2                                                                      /*!< Right-most bit position of RXMIS in SSP.SSPMIS */
#define SSP_SSPMIS__RXMIS__Msk                                  (0x00000001UL << SSP_SSPMIS__RXMIS__Pos)                               /*!< Mask for RXMIS in SSP.SSPMIS */
#define SSP_SSPMIS__RXMIS__Shift(v)                             (((v) << SSP_SSPMIS__RXMIS__Pos) & SSP_SSPMIS__RXMIS__Msk)             /*!< Shift value 'v' into RXMIS and mask 'v' to fit it into RXMIS field */

/** SSP_SSPMIS__RXMIS__GET() gets SSPMIS.RXMIS's current value.
 *
 * When reading from SSPMIS.RXMIS, this is recommended to use.
 *
 * @return current value of SSPMIS.RXMIS
 */
__SSP_INLINE uint32_t SSP_SSPMIS__RXMIS__GET(void)
{
    uint32_t reg = SSP_SSPMIS__GET();
    reg = (reg & SSP_SSPMIS__RXMIS__Msk);
    reg = (reg >> SSP_SSPMIS__RXMIS__Pos);
    return (uint32_t)reg;
}

/** SSP_SSPMIS__RXMIS__EXTRACT() extracts SSPMIS.RXMIS.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPMIS.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPMIS
 * @return current value of SSPMIS.RXMIS
 */
__SSP_INLINE uint32_t SSP_SSPMIS__RXMIS__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPMIS__RXMIS__Msk);
    reg = (reg >> SSP_SSPMIS__RXMIS__Pos);
    return (uint32_t)reg;
}

/* ---------------------------- SSP.SSPMIS.RTMIS ---------------------------- */

/**
<pre>
  SSP.SSPMIS.RTMIS:

    SSPRTINTR Masked Interrupt Status

</pre> */

#define SSP_SSPMIS__RTMIS__Pos                                  1                                                                      /*!< Right-most bit position of RTMIS in SSP.SSPMIS */
#define SSP_SSPMIS__RTMIS__Msk                                  (0x00000001UL << SSP_SSPMIS__RTMIS__Pos)                               /*!< Mask for RTMIS in SSP.SSPMIS */
#define SSP_SSPMIS__RTMIS__Shift(v)                             (((v) << SSP_SSPMIS__RTMIS__Pos) & SSP_SSPMIS__RTMIS__Msk)             /*!< Shift value 'v' into RTMIS and mask 'v' to fit it into RTMIS field */

/** SSP_SSPMIS__RTMIS__GET() gets SSPMIS.RTMIS's current value.
 *
 * When reading from SSPMIS.RTMIS, this is recommended to use.
 *
 * @return current value of SSPMIS.RTMIS
 */
__SSP_INLINE uint32_t SSP_SSPMIS__RTMIS__GET(void)
{
    uint32_t reg = SSP_SSPMIS__GET();
    reg = (reg & SSP_SSPMIS__RTMIS__Msk);
    reg = (reg >> SSP_SSPMIS__RTMIS__Pos);
    return (uint32_t)reg;
}

/** SSP_SSPMIS__RTMIS__EXTRACT() extracts SSPMIS.RTMIS.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPMIS.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPMIS
 * @return current value of SSPMIS.RTMIS
 */
__SSP_INLINE uint32_t SSP_SSPMIS__RTMIS__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPMIS__RTMIS__Msk);
    reg = (reg >> SSP_SSPMIS__RTMIS__Pos);
    return (uint32_t)reg;
}

/* --------------------------- SSP.SSPMIS.RORMIS --------------------------- */

/**
<pre>
  SSP.SSPMIS.RORMIS:

    SSPRORINTR Masked Interrupt Status

</pre> */

#define SSP_SSPMIS__RORMIS__Pos                                 0                                                                      /*!< Right-most bit position of RORMIS in SSP.SSPMIS */
#define SSP_SSPMIS__RORMIS__Msk                                 (0x00000001UL << SSP_SSPMIS__RORMIS__Pos)                              /*!< Mask for RORMIS in SSP.SSPMIS */
#define SSP_SSPMIS__RORMIS__Shift(v)                            (((v) << SSP_SSPMIS__RORMIS__Pos) & SSP_SSPMIS__RORMIS__Msk)           /*!< Shift value 'v' into RORMIS and mask 'v' to fit it into RORMIS field */

/** SSP_SSPMIS__RORMIS__GET() gets SSPMIS.RORMIS's current value.
 *
 * When reading from SSPMIS.RORMIS, this is recommended to use.
 *
 * @return current value of SSPMIS.RORMIS
 */
__SSP_INLINE uint32_t SSP_SSPMIS__RORMIS__GET(void)
{
    uint32_t reg = SSP_SSPMIS__GET();
    reg = (reg & SSP_SSPMIS__RORMIS__Msk);
    reg = (reg >> SSP_SSPMIS__RORMIS__Pos);
    return (uint32_t)reg;
}

/** SSP_SSPMIS__RORMIS__EXTRACT() extracts SSPMIS.RORMIS.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPMIS.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPMIS
 * @return current value of SSPMIS.RORMIS
 */
__SSP_INLINE uint32_t SSP_SSPMIS__RORMIS__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPMIS__RORMIS__Msk);
    reg = (reg >> SSP_SSPMIS__RORMIS__Pos);
    return (uint32_t)reg;
}

/* -------------------------------------------------------------------------- */
/*                           SSPICR member of SSP_t                           */
/* -------------------------------------------------------------------------- */

/** __SSP_SSPICR__ADDRESS returns the address of member SSPICR.
 *
 * As indicated by the __ prefix, this is not intended for use by the FW. It is
 * here for readability only.
 *
 * @return address of SSPICR
 */
__SSP_INLINE uint32_t* __SSP_SSPICR__ADDRESS(void)
{
    return (uint32_t*)((uint32_t)__SSP_BASE_PTR() + (uint32_t)(offsetof(SSP_t, SSPICR)));
}

/** SSP_SSPICR__SET() sets SSPICR to given value.
 *
 * When writing to SSPICR, this is mandatory to use.
 *
 * @param value new value for SSPICR
 */
__SSP_INLINE void SSP_SSPICR__SET(uint32_t value)
{
    HAL_SET32(__SSP_SSPICR__ADDRESS(), value);
}

/** SSP_SSPICR__GET() gets SSPICR's current value.
 *
 * When reading from SSPICR, this is mandatory to use.
 *
 * @return current value of SSPICR
 */
__SSP_INLINE uint32_t SSP_SSPICR__GET(void)
{
    return HAL_GET32(__SSP_SSPICR__ADDRESS());
}

/* ----------------------------- SSP.SSPICR.RES ----------------------------- */

/**
<pre>
  SSP.SSPICR.RES:

    Reserved, read as zero, do not modify.

</pre> */

#define SSP_SSPICR__RES__Pos                                    2                                                                      /*!< Right-most bit position of RES in SSP.SSPICR */
#define SSP_SSPICR__RES__Msk                                    (0x3FFFFFFFUL << SSP_SSPICR__RES__Pos)                                 /*!< Mask for RES in SSP.SSPICR */
#define SSP_SSPICR__RES__Shift(v)                               (((v) << SSP_SSPICR__RES__Pos) & SSP_SSPICR__RES__Msk)                 /*!< Shift value 'v' into RES and mask 'v' to fit it into RES field */

/** SSP_SSPICR__RES__GET() gets SSPICR.RES's current value.
 *
 * When reading from SSPICR.RES, this is recommended to use.
 *
 * @return current value of SSPICR.RES
 */
__SSP_INLINE uint32_t SSP_SSPICR__RES__GET(void)
{
    uint32_t reg = SSP_SSPICR__GET();
    reg = (reg & SSP_SSPICR__RES__Msk);
    reg = (reg >> SSP_SSPICR__RES__Pos);
    return (uint32_t)reg;
}

/** SSP_SSPICR__RES__EXTRACT() extracts SSPICR.RES.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPICR.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPICR
 * @return current value of SSPICR.RES
 */
__SSP_INLINE uint32_t SSP_SSPICR__RES__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPICR__RES__Msk);
    reg = (reg >> SSP_SSPICR__RES__Pos);
    return (uint32_t)reg;
}

/* ---------------------------- SSP.SSPICR.RTIC ---------------------------- */

/**
<pre>
  SSP.SSPICR.RTIC:

    SSPRTINTR Interrupt Clear Bit

</pre> */

#define SSP_SSPICR__RTIC__Pos                                   1                                                                      /*!< Right-most bit position of RTIC in SSP.SSPICR */
#define SSP_SSPICR__RTIC__Msk                                   (0x00000001UL << SSP_SSPICR__RTIC__Pos)                                /*!< Mask for RTIC in SSP.SSPICR */
#define SSP_SSPICR__RTIC__Shift(v)                              (((v) << SSP_SSPICR__RTIC__Pos) & SSP_SSPICR__RTIC__Msk)               /*!< Shift value 'v' into RTIC and mask 'v' to fit it into RTIC field */

/** SSP_SSPICR__RTIC__SET() sets SSPICR.RTIC to given value.
 *
 * When writing to SSPICR.RTIC, this is recommended to use.
 *
 * @param bf_value new value for SSPICR.RTIC
 */
__SSP_INLINE void SSP_SSPICR__RTIC__SET(uint32_t bf_value)
{
    uint32_t reg = SSP_SSPICR__RTIC__Shift((uint32_t)bf_value);
    SSP_SSPICR__SET(reg);
}


/** SSP_SSPICR__RTIC__MODIFY() modifies SSPICR.RTIC.
 *
 * This is recommended to use when setting more than one bitfield of SSP.SSPICR.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of SSP.SSPICR
 * @param bf_value new value for SSPICR.RTIC
 * @return new value of SSP.SSPICR
 */
__SSP_INLINE uint32_t SSP_SSPICR__RTIC__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~SSP_SSPICR__RTIC__Msk);
    reg = (reg | (SSP_SSPICR__RTIC__Shift((uint32_t)bf_value)));
    return reg;
}

/** SSP_SSPICR__RTIC__EXTRACT() extracts SSPICR.RTIC.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPICR.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPICR
 * @return current value of SSPICR.RTIC
 */
__SSP_INLINE uint32_t SSP_SSPICR__RTIC__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPICR__RTIC__Msk);
    reg = (reg >> SSP_SSPICR__RTIC__Pos);
    return (uint32_t)reg;
}

/* ---------------------------- SSP.SSPICR.RORIC ---------------------------- */

/**
<pre>
  SSP.SSPICR.RORIC:

    SSPRORINTR Interrupt Clear Bit

</pre> */

#define SSP_SSPICR__RORIC__Pos                                  0                                                                      /*!< Right-most bit position of RORIC in SSP.SSPICR */
#define SSP_SSPICR__RORIC__Msk                                  (0x00000001UL << SSP_SSPICR__RORIC__Pos)                               /*!< Mask for RORIC in SSP.SSPICR */
#define SSP_SSPICR__RORIC__Shift(v)                             (((v) << SSP_SSPICR__RORIC__Pos) & SSP_SSPICR__RORIC__Msk)             /*!< Shift value 'v' into RORIC and mask 'v' to fit it into RORIC field */

/** SSP_SSPICR__RORIC__SET() sets SSPICR.RORIC to given value.
 *
 * When writing to SSPICR.RORIC, this is recommended to use.
 *
 * @param bf_value new value for SSPICR.RORIC
 */
__SSP_INLINE void SSP_SSPICR__RORIC__SET(uint32_t bf_value)
{
    uint32_t reg = SSP_SSPICR__RORIC__Shift((uint32_t)bf_value);
    SSP_SSPICR__SET(reg);
}


/** SSP_SSPICR__RORIC__MODIFY() modifies SSPICR.RORIC.
 *
 * This is recommended to use when setting more than one bitfield of SSP.SSPICR.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of SSP.SSPICR
 * @param bf_value new value for SSPICR.RORIC
 * @return new value of SSP.SSPICR
 */
__SSP_INLINE uint32_t SSP_SSPICR__RORIC__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~SSP_SSPICR__RORIC__Msk);
    reg = (reg | (SSP_SSPICR__RORIC__Shift((uint32_t)bf_value)));
    return reg;
}

/** SSP_SSPICR__RORIC__EXTRACT() extracts SSPICR.RORIC.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPICR.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPICR
 * @return current value of SSPICR.RORIC
 */
__SSP_INLINE uint32_t SSP_SSPICR__RORIC__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPICR__RORIC__Msk);
    reg = (reg >> SSP_SSPICR__RORIC__Pos);
    return (uint32_t)reg;
}

/* -------------------------------------------------------------------------- */
/*                          SSPDMACR member of SSP_t                          */
/* -------------------------------------------------------------------------- */

/** __SSP_SSPDMACR__ADDRESS returns the address of member SSPDMACR.
 *
 * As indicated by the __ prefix, this is not intended for use by the FW. It is
 * here for readability only.
 *
 * @return address of SSPDMACR
 */
__SSP_INLINE uint32_t* __SSP_SSPDMACR__ADDRESS(void)
{
    return (uint32_t*)((uint32_t)__SSP_BASE_PTR() + (uint32_t)(offsetof(SSP_t, SSPDMACR)));
}

/** SSP_SSPDMACR__SET() sets SSPDMACR to given value.
 *
 * When writing to SSPDMACR, this is mandatory to use.
 *
 * @param value new value for SSPDMACR
 */
__SSP_INLINE void SSP_SSPDMACR__SET(uint32_t value)
{
    HAL_SET32(__SSP_SSPDMACR__ADDRESS(), value);
}

/** SSP_SSPDMACR__GET() gets SSPDMACR's current value.
 *
 * When reading from SSPDMACR, this is mandatory to use.
 *
 * @return current value of SSPDMACR
 */
__SSP_INLINE uint32_t SSP_SSPDMACR__GET(void)
{
    return HAL_GET32(__SSP_SSPDMACR__ADDRESS());
}

/* ---------------------------- SSP.SSPDMACR.RES ---------------------------- */

/**
<pre>
  SSP.SSPDMACR.RES:

    Reserved, read as zero, do not modify.

</pre> */

#define SSP_SSPDMACR__RES__Pos                                  2                                                                      /*!< Right-most bit position of RES in SSP.SSPDMACR */
#define SSP_SSPDMACR__RES__Msk                                  (0x3FFFFFFFUL << SSP_SSPDMACR__RES__Pos)                               /*!< Mask for RES in SSP.SSPDMACR */
#define SSP_SSPDMACR__RES__Shift(v)                             (((v) << SSP_SSPDMACR__RES__Pos) & SSP_SSPDMACR__RES__Msk)             /*!< Shift value 'v' into RES and mask 'v' to fit it into RES field */

/** SSP_SSPDMACR__RES__GET() gets SSPDMACR.RES's current value.
 *
 * When reading from SSPDMACR.RES, this is recommended to use.
 *
 * @return current value of SSPDMACR.RES
 */
__SSP_INLINE uint32_t SSP_SSPDMACR__RES__GET(void)
{
    uint32_t reg = SSP_SSPDMACR__GET();
    reg = (reg & SSP_SSPDMACR__RES__Msk);
    reg = (reg >> SSP_SSPDMACR__RES__Pos);
    return (uint32_t)reg;
}

/** SSP_SSPDMACR__RES__EXTRACT() extracts SSPDMACR.RES.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPDMACR.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPDMACR
 * @return current value of SSPDMACR.RES
 */
__SSP_INLINE uint32_t SSP_SSPDMACR__RES__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPDMACR__RES__Msk);
    reg = (reg >> SSP_SSPDMACR__RES__Pos);
    return (uint32_t)reg;
}

/* -------------------------- SSP.SSPDMACR.TXDMAE -------------------------- */

/**
<pre>
  SSP.SSPDMACR.TXDMAE:

    Transmit DMA Enable

</pre> */

#define SSP_SSPDMACR__TXDMAE__Pos                               1                                                                      /*!< Right-most bit position of TXDMAE in SSP.SSPDMACR */
#define SSP_SSPDMACR__TXDMAE__Msk                               (0x00000001UL << SSP_SSPDMACR__TXDMAE__Pos)                            /*!< Mask for TXDMAE in SSP.SSPDMACR */
#define SSP_SSPDMACR__TXDMAE__Shift(v)                          (((v) << SSP_SSPDMACR__TXDMAE__Pos) & SSP_SSPDMACR__TXDMAE__Msk)       /*!< Shift value 'v' into TXDMAE and mask 'v' to fit it into TXDMAE field */

/** SSP_SSPDMACR__TXDMAE__SET() sets SSPDMACR.TXDMAE to given value.
 *
 * When writing to SSPDMACR.TXDMAE, this is recommended to use.
 *
 * @param bf_value new value for SSPDMACR.TXDMAE
 */
__SSP_INLINE void SSP_SSPDMACR__TXDMAE__SET(uint32_t bf_value)
{
    uint32_t reg = SSP_SSPDMACR__GET();
    reg = (reg & ~SSP_SSPDMACR__TXDMAE__Msk);
    reg = (reg | (SSP_SSPDMACR__TXDMAE__Shift((uint32_t)bf_value)));
    SSP_SSPDMACR__SET(reg);
}

/** SSP_SSPDMACR__TXDMAE__GET() gets SSPDMACR.TXDMAE's current value.
 *
 * When reading from SSPDMACR.TXDMAE, this is recommended to use.
 *
 * @return current value of SSPDMACR.TXDMAE
 */
__SSP_INLINE uint32_t SSP_SSPDMACR__TXDMAE__GET(void)
{
    uint32_t reg = SSP_SSPDMACR__GET();
    reg = (reg & SSP_SSPDMACR__TXDMAE__Msk);
    reg = (reg >> SSP_SSPDMACR__TXDMAE__Pos);
    return (uint32_t)reg;
}

/** SSP_SSPDMACR__TXDMAE__MODIFY() modifies SSPDMACR.TXDMAE.
 *
 * This is recommended to use when setting more than one bitfield of SSP.SSPDMACR.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of SSP.SSPDMACR
 * @param bf_value new value for SSPDMACR.TXDMAE
 * @return new value of SSP.SSPDMACR
 */
__SSP_INLINE uint32_t SSP_SSPDMACR__TXDMAE__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~SSP_SSPDMACR__TXDMAE__Msk);
    reg = (reg | (SSP_SSPDMACR__TXDMAE__Shift((uint32_t)bf_value)));
    return reg;
}

/** SSP_SSPDMACR__TXDMAE__EXTRACT() extracts SSPDMACR.TXDMAE.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPDMACR.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPDMACR
 * @return current value of SSPDMACR.TXDMAE
 */
__SSP_INLINE uint32_t SSP_SSPDMACR__TXDMAE__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPDMACR__TXDMAE__Msk);
    reg = (reg >> SSP_SSPDMACR__TXDMAE__Pos);
    return (uint32_t)reg;
}

/* -------------------------- SSP.SSPDMACR.RXDMAE -------------------------- */

/**
<pre>
  SSP.SSPDMACR.RXDMAE:

    Receive DMA Enable

</pre> */

#define SSP_SSPDMACR__RXDMAE__Pos                               0                                                                      /*!< Right-most bit position of RXDMAE in SSP.SSPDMACR */
#define SSP_SSPDMACR__RXDMAE__Msk                               (0x00000001UL << SSP_SSPDMACR__RXDMAE__Pos)                            /*!< Mask for RXDMAE in SSP.SSPDMACR */
#define SSP_SSPDMACR__RXDMAE__Shift(v)                          (((v) << SSP_SSPDMACR__RXDMAE__Pos) & SSP_SSPDMACR__RXDMAE__Msk)       /*!< Shift value 'v' into RXDMAE and mask 'v' to fit it into RXDMAE field */

/** SSP_SSPDMACR__RXDMAE__SET() sets SSPDMACR.RXDMAE to given value.
 *
 * When writing to SSPDMACR.RXDMAE, this is recommended to use.
 *
 * @param bf_value new value for SSPDMACR.RXDMAE
 */
__SSP_INLINE void SSP_SSPDMACR__RXDMAE__SET(uint32_t bf_value)
{
    uint32_t reg = SSP_SSPDMACR__GET();
    reg = (reg & ~SSP_SSPDMACR__RXDMAE__Msk);
    reg = (reg | (SSP_SSPDMACR__RXDMAE__Shift((uint32_t)bf_value)));
    SSP_SSPDMACR__SET(reg);
}

/** SSP_SSPDMACR__RXDMAE__GET() gets SSPDMACR.RXDMAE's current value.
 *
 * When reading from SSPDMACR.RXDMAE, this is recommended to use.
 *
 * @return current value of SSPDMACR.RXDMAE
 */
__SSP_INLINE uint32_t SSP_SSPDMACR__RXDMAE__GET(void)
{
    uint32_t reg = SSP_SSPDMACR__GET();
    reg = (reg & SSP_SSPDMACR__RXDMAE__Msk);
    reg = (reg >> SSP_SSPDMACR__RXDMAE__Pos);
    return (uint32_t)reg;
}

/** SSP_SSPDMACR__RXDMAE__MODIFY() modifies SSPDMACR.RXDMAE.
 *
 * This is recommended to use when setting more than one bitfield of SSP.SSPDMACR.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of SSP.SSPDMACR
 * @param bf_value new value for SSPDMACR.RXDMAE
 * @return new value of SSP.SSPDMACR
 */
__SSP_INLINE uint32_t SSP_SSPDMACR__RXDMAE__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~SSP_SSPDMACR__RXDMAE__Msk);
    reg = (reg | (SSP_SSPDMACR__RXDMAE__Shift((uint32_t)bf_value)));
    return reg;
}

/** SSP_SSPDMACR__RXDMAE__EXTRACT() extracts SSPDMACR.RXDMAE.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPDMACR.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPDMACR
 * @return current value of SSPDMACR.RXDMAE
 */
__SSP_INLINE uint32_t SSP_SSPDMACR__RXDMAE__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPDMACR__RXDMAE__Msk);
    reg = (reg >> SSP_SSPDMACR__RXDMAE__Pos);
    return (uint32_t)reg;
}

/* -------------------------------------------------------------------------- */
/*                           SSPTCR member of SSP_t                           */
/* -------------------------------------------------------------------------- */

/** __SSP_SSPTCR__ADDRESS returns the address of member SSPTCR.
 *
 * As indicated by the __ prefix, this is not intended for use by the FW. It is
 * here for readability only.
 *
 * @return address of SSPTCR
 */
__SSP_INLINE uint32_t* __SSP_SSPTCR__ADDRESS(void)
{
    return (uint32_t*)((uint32_t)__SSP_BASE_PTR() + (uint32_t)(offsetof(SSP_t, SSPTCR)));
}

/** SSP_SSPTCR__SET() sets SSPTCR to given value.
 *
 * When writing to SSPTCR, this is mandatory to use.
 *
 * @param value new value for SSPTCR
 */
__SSP_INLINE void SSP_SSPTCR__SET(uint32_t value)
{
    HAL_SET32(__SSP_SSPTCR__ADDRESS(), value);
}

/** SSP_SSPTCR__GET() gets SSPTCR's current value.
 *
 * When reading from SSPTCR, this is mandatory to use.
 *
 * @return current value of SSPTCR
 */
__SSP_INLINE uint32_t SSP_SSPTCR__GET(void)
{
    return HAL_GET32(__SSP_SSPTCR__ADDRESS());
}

/* ----------------------------- SSP.SSPTCR.RES ----------------------------- */

/**
<pre>
  SSP.SSPTCR.RES:

    Reserved, unpredictable when read.

</pre> */

#define SSP_SSPTCR__RES__Pos                                    2                                                                      /*!< Right-most bit position of RES in SSP.SSPTCR */
#define SSP_SSPTCR__RES__Msk                                    (0x3FFFFFFFUL << SSP_SSPTCR__RES__Pos)                                 /*!< Mask for RES in SSP.SSPTCR */
#define SSP_SSPTCR__RES__Shift(v)                               (((v) << SSP_SSPTCR__RES__Pos) & SSP_SSPTCR__RES__Msk)                 /*!< Shift value 'v' into RES and mask 'v' to fit it into RES field */

/** SSP_SSPTCR__RES__GET() gets SSPTCR.RES's current value.
 *
 * When reading from SSPTCR.RES, this is recommended to use.
 *
 * @return current value of SSPTCR.RES
 */
__SSP_INLINE uint32_t SSP_SSPTCR__RES__GET(void)
{
    uint32_t reg = SSP_SSPTCR__GET();
    reg = (reg & SSP_SSPTCR__RES__Msk);
    reg = (reg >> SSP_SSPTCR__RES__Pos);
    return (uint32_t)reg;
}

/** SSP_SSPTCR__RES__EXTRACT() extracts SSPTCR.RES.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPTCR.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPTCR
 * @return current value of SSPTCR.RES
 */
__SSP_INLINE uint32_t SSP_SSPTCR__RES__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPTCR__RES__Msk);
    reg = (reg >> SSP_SSPTCR__RES__Pos);
    return (uint32_t)reg;
}

/* -------------------------- SSP.SSPTCR.TESTFIFO -------------------------- */

/**
<pre>
  SSP.SSPTCR.TESTFIFO:

    Test FIFO Enable

</pre> */

#define SSP_SSPTCR__TESTFIFO__Pos                               1                                                                      /*!< Right-most bit position of TESTFIFO in SSP.SSPTCR */
#define SSP_SSPTCR__TESTFIFO__Msk                               (0x00000001UL << SSP_SSPTCR__TESTFIFO__Pos)                            /*!< Mask for TESTFIFO in SSP.SSPTCR */
#define SSP_SSPTCR__TESTFIFO__Shift(v)                          (((v) << SSP_SSPTCR__TESTFIFO__Pos) & SSP_SSPTCR__TESTFIFO__Msk)       /*!< Shift value 'v' into TESTFIFO and mask 'v' to fit it into TESTFIFO field */

/** SSP_SSPTCR__TESTFIFO__SET() sets SSPTCR.TESTFIFO to given value.
 *
 * When writing to SSPTCR.TESTFIFO, this is recommended to use.
 *
 * @param bf_value new value for SSPTCR.TESTFIFO
 */
__SSP_INLINE void SSP_SSPTCR__TESTFIFO__SET(uint32_t bf_value)
{
    uint32_t reg = SSP_SSPTCR__GET();
    reg = (reg & ~SSP_SSPTCR__TESTFIFO__Msk);
    reg = (reg | (SSP_SSPTCR__TESTFIFO__Shift((uint32_t)bf_value)));
    SSP_SSPTCR__SET(reg);
}

/** SSP_SSPTCR__TESTFIFO__GET() gets SSPTCR.TESTFIFO's current value.
 *
 * When reading from SSPTCR.TESTFIFO, this is recommended to use.
 *
 * @return current value of SSPTCR.TESTFIFO
 */
__SSP_INLINE uint32_t SSP_SSPTCR__TESTFIFO__GET(void)
{
    uint32_t reg = SSP_SSPTCR__GET();
    reg = (reg & SSP_SSPTCR__TESTFIFO__Msk);
    reg = (reg >> SSP_SSPTCR__TESTFIFO__Pos);
    return (uint32_t)reg;
}

/** SSP_SSPTCR__TESTFIFO__MODIFY() modifies SSPTCR.TESTFIFO.
 *
 * This is recommended to use when setting more than one bitfield of SSP.SSPTCR.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of SSP.SSPTCR
 * @param bf_value new value for SSPTCR.TESTFIFO
 * @return new value of SSP.SSPTCR
 */
__SSP_INLINE uint32_t SSP_SSPTCR__TESTFIFO__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~SSP_SSPTCR__TESTFIFO__Msk);
    reg = (reg | (SSP_SSPTCR__TESTFIFO__Shift((uint32_t)bf_value)));
    return reg;
}

/** SSP_SSPTCR__TESTFIFO__EXTRACT() extracts SSPTCR.TESTFIFO.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPTCR.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPTCR
 * @return current value of SSPTCR.TESTFIFO
 */
__SSP_INLINE uint32_t SSP_SSPTCR__TESTFIFO__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPTCR__TESTFIFO__Msk);
    reg = (reg >> SSP_SSPTCR__TESTFIFO__Pos);
    return (uint32_t)reg;
}

/* ---------------------------- SSP.SSPTCR.ITEN ---------------------------- */

/**
<pre>
  SSP.SSPTCR.ITEN:

    Integration Test Enable

</pre> */

#define SSP_SSPTCR__ITEN__Pos                                   0                                                                      /*!< Right-most bit position of ITEN in SSP.SSPTCR */
#define SSP_SSPTCR__ITEN__Msk                                   (0x00000001UL << SSP_SSPTCR__ITEN__Pos)                                /*!< Mask for ITEN in SSP.SSPTCR */
#define SSP_SSPTCR__ITEN__Shift(v)                              (((v) << SSP_SSPTCR__ITEN__Pos) & SSP_SSPTCR__ITEN__Msk)               /*!< Shift value 'v' into ITEN and mask 'v' to fit it into ITEN field */

/** SSP_SSPTCR__ITEN__SET() sets SSPTCR.ITEN to given value.
 *
 * When writing to SSPTCR.ITEN, this is recommended to use.
 *
 * @param bf_value new value for SSPTCR.ITEN
 */
__SSP_INLINE void SSP_SSPTCR__ITEN__SET(uint32_t bf_value)
{
    uint32_t reg = SSP_SSPTCR__GET();
    reg = (reg & ~SSP_SSPTCR__ITEN__Msk);
    reg = (reg | (SSP_SSPTCR__ITEN__Shift((uint32_t)bf_value)));
    SSP_SSPTCR__SET(reg);
}

/** SSP_SSPTCR__ITEN__GET() gets SSPTCR.ITEN's current value.
 *
 * When reading from SSPTCR.ITEN, this is recommended to use.
 *
 * @return current value of SSPTCR.ITEN
 */
__SSP_INLINE uint32_t SSP_SSPTCR__ITEN__GET(void)
{
    uint32_t reg = SSP_SSPTCR__GET();
    reg = (reg & SSP_SSPTCR__ITEN__Msk);
    reg = (reg >> SSP_SSPTCR__ITEN__Pos);
    return (uint32_t)reg;
}

/** SSP_SSPTCR__ITEN__MODIFY() modifies SSPTCR.ITEN.
 *
 * This is recommended to use when setting more than one bitfield of SSP.SSPTCR.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of SSP.SSPTCR
 * @param bf_value new value for SSPTCR.ITEN
 * @return new value of SSP.SSPTCR
 */
__SSP_INLINE uint32_t SSP_SSPTCR__ITEN__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~SSP_SSPTCR__ITEN__Msk);
    reg = (reg | (SSP_SSPTCR__ITEN__Shift((uint32_t)bf_value)));
    return reg;
}

/** SSP_SSPTCR__ITEN__EXTRACT() extracts SSPTCR.ITEN.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPTCR.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPTCR
 * @return current value of SSPTCR.ITEN
 */
__SSP_INLINE uint32_t SSP_SSPTCR__ITEN__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPTCR__ITEN__Msk);
    reg = (reg >> SSP_SSPTCR__ITEN__Pos);
    return (uint32_t)reg;
}

/* -------------------------------------------------------------------------- */
/*                          SSPITIP member of SSP_t                          */
/* -------------------------------------------------------------------------- */

/** __SSP_SSPITIP__ADDRESS returns the address of member SSPITIP.
 *
 * As indicated by the __ prefix, this is not intended for use by the FW. It is
 * here for readability only.
 *
 * @return address of SSPITIP
 */
__SSP_INLINE uint32_t* __SSP_SSPITIP__ADDRESS(void)
{
    return (uint32_t*)((uint32_t)__SSP_BASE_PTR() + (uint32_t)(offsetof(SSP_t, SSPITIP)));
}

/** SSP_SSPITIP__SET() sets SSPITIP to given value.
 *
 * When writing to SSPITIP, this is mandatory to use.
 *
 * @param value new value for SSPITIP
 */
__SSP_INLINE void SSP_SSPITIP__SET(uint32_t value)
{
    HAL_SET32(__SSP_SSPITIP__ADDRESS(), value);
}

/** SSP_SSPITIP__GET() gets SSPITIP's current value.
 *
 * When reading from SSPITIP, this is mandatory to use.
 *
 * @return current value of SSPITIP
 */
__SSP_INLINE uint32_t SSP_SSPITIP__GET(void)
{
    return HAL_GET32(__SSP_SSPITIP__ADDRESS());
}

/* ---------------------------- SSP.SSPITIP.RES ---------------------------- */

/**
<pre>
  SSP.SSPITIP.RES:

    Reserved, unpredictable when read.

</pre> */

#define SSP_SSPITIP__RES__Pos                                   5                                                                      /*!< Right-most bit position of RES in SSP.SSPITIP */
#define SSP_SSPITIP__RES__Msk                                   (0x07FFFFFFUL << SSP_SSPITIP__RES__Pos)                                /*!< Mask for RES in SSP.SSPITIP */
#define SSP_SSPITIP__RES__Shift(v)                              (((v) << SSP_SSPITIP__RES__Pos) & SSP_SSPITIP__RES__Msk)               /*!< Shift value 'v' into RES and mask 'v' to fit it into RES field */

/** SSP_SSPITIP__RES__GET() gets SSPITIP.RES's current value.
 *
 * When reading from SSPITIP.RES, this is recommended to use.
 *
 * @return current value of SSPITIP.RES
 */
__SSP_INLINE uint32_t SSP_SSPITIP__RES__GET(void)
{
    uint32_t reg = SSP_SSPITIP__GET();
    reg = (reg & SSP_SSPITIP__RES__Msk);
    reg = (reg >> SSP_SSPITIP__RES__Pos);
    return (uint32_t)reg;
}

/** SSP_SSPITIP__RES__EXTRACT() extracts SSPITIP.RES.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPITIP.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPITIP
 * @return current value of SSPITIP.RES
 */
__SSP_INLINE uint32_t SSP_SSPITIP__RES__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPITIP__RES__Msk);
    reg = (reg >> SSP_SSPITIP__RES__Pos);
    return (uint32_t)reg;
}

/* ------------------------ SSP.SSPITIP.SSPTXDMACLR ------------------------ */


#define SSP_SSPITIP__SSPTXDMACLR__Pos                           4                                                                      /*!< Right-most bit position of SSPTXDMACLR in SSP.SSPITIP */
#define SSP_SSPITIP__SSPTXDMACLR__Msk                           (0x00000001UL << SSP_SSPITIP__SSPTXDMACLR__Pos)                        /*!< Mask for SSPTXDMACLR in SSP.SSPITIP */
#define SSP_SSPITIP__SSPTXDMACLR__Shift(v)                      (((v) << SSP_SSPITIP__SSPTXDMACLR__Pos) & SSP_SSPITIP__SSPTXDMACLR__Msk) /*!< Shift value 'v' into SSPTXDMACLR and mask 'v' to fit it into SSPTXDMACLR field */

/** SSP_SSPITIP__SSPTXDMACLR__SET() sets SSPITIP.SSPTXDMACLR to given value.
 *
 * When writing to SSPITIP.SSPTXDMACLR, this is recommended to use.
 *
 * @param bf_value new value for SSPITIP.SSPTXDMACLR
 */
__SSP_INLINE void SSP_SSPITIP__SSPTXDMACLR__SET(uint32_t bf_value)
{
    uint32_t reg = SSP_SSPITIP__GET();
    reg = (reg & ~SSP_SSPITIP__SSPTXDMACLR__Msk);
    reg = (reg | (SSP_SSPITIP__SSPTXDMACLR__Shift((uint32_t)bf_value)));
    SSP_SSPITIP__SET(reg);
}

/** SSP_SSPITIP__SSPTXDMACLR__GET() gets SSPITIP.SSPTXDMACLR's current value.
 *
 * When reading from SSPITIP.SSPTXDMACLR, this is recommended to use.
 *
 * @return current value of SSPITIP.SSPTXDMACLR
 */
__SSP_INLINE uint32_t SSP_SSPITIP__SSPTXDMACLR__GET(void)
{
    uint32_t reg = SSP_SSPITIP__GET();
    reg = (reg & SSP_SSPITIP__SSPTXDMACLR__Msk);
    reg = (reg >> SSP_SSPITIP__SSPTXDMACLR__Pos);
    return (uint32_t)reg;
}

/** SSP_SSPITIP__SSPTXDMACLR__MODIFY() modifies SSPITIP.SSPTXDMACLR.
 *
 * This is recommended to use when setting more than one bitfield of SSP.SSPITIP.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of SSP.SSPITIP
 * @param bf_value new value for SSPITIP.SSPTXDMACLR
 * @return new value of SSP.SSPITIP
 */
__SSP_INLINE uint32_t SSP_SSPITIP__SSPTXDMACLR__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~SSP_SSPITIP__SSPTXDMACLR__Msk);
    reg = (reg | (SSP_SSPITIP__SSPTXDMACLR__Shift((uint32_t)bf_value)));
    return reg;
}

/** SSP_SSPITIP__SSPTXDMACLR__EXTRACT() extracts SSPITIP.SSPTXDMACLR.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPITIP.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPITIP
 * @return current value of SSPITIP.SSPTXDMACLR
 */
__SSP_INLINE uint32_t SSP_SSPITIP__SSPTXDMACLR__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPITIP__SSPTXDMACLR__Msk);
    reg = (reg >> SSP_SSPITIP__SSPTXDMACLR__Pos);
    return (uint32_t)reg;
}

/* ------------------------ SSP.SSPITIP.SSPRXDMACLR ------------------------ */


#define SSP_SSPITIP__SSPRXDMACLR__Pos                           3                                                                      /*!< Right-most bit position of SSPRXDMACLR in SSP.SSPITIP */
#define SSP_SSPITIP__SSPRXDMACLR__Msk                           (0x00000001UL << SSP_SSPITIP__SSPRXDMACLR__Pos)                        /*!< Mask for SSPRXDMACLR in SSP.SSPITIP */
#define SSP_SSPITIP__SSPRXDMACLR__Shift(v)                      (((v) << SSP_SSPITIP__SSPRXDMACLR__Pos) & SSP_SSPITIP__SSPRXDMACLR__Msk) /*!< Shift value 'v' into SSPRXDMACLR and mask 'v' to fit it into SSPRXDMACLR field */

/** SSP_SSPITIP__SSPRXDMACLR__SET() sets SSPITIP.SSPRXDMACLR to given value.
 *
 * When writing to SSPITIP.SSPRXDMACLR, this is recommended to use.
 *
 * @param bf_value new value for SSPITIP.SSPRXDMACLR
 */
__SSP_INLINE void SSP_SSPITIP__SSPRXDMACLR__SET(uint32_t bf_value)
{
    uint32_t reg = SSP_SSPITIP__GET();
    reg = (reg & ~SSP_SSPITIP__SSPRXDMACLR__Msk);
    reg = (reg | (SSP_SSPITIP__SSPRXDMACLR__Shift((uint32_t)bf_value)));
    SSP_SSPITIP__SET(reg);
}

/** SSP_SSPITIP__SSPRXDMACLR__GET() gets SSPITIP.SSPRXDMACLR's current value.
 *
 * When reading from SSPITIP.SSPRXDMACLR, this is recommended to use.
 *
 * @return current value of SSPITIP.SSPRXDMACLR
 */
__SSP_INLINE uint32_t SSP_SSPITIP__SSPRXDMACLR__GET(void)
{
    uint32_t reg = SSP_SSPITIP__GET();
    reg = (reg & SSP_SSPITIP__SSPRXDMACLR__Msk);
    reg = (reg >> SSP_SSPITIP__SSPRXDMACLR__Pos);
    return (uint32_t)reg;
}

/** SSP_SSPITIP__SSPRXDMACLR__MODIFY() modifies SSPITIP.SSPRXDMACLR.
 *
 * This is recommended to use when setting more than one bitfield of SSP.SSPITIP.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of SSP.SSPITIP
 * @param bf_value new value for SSPITIP.SSPRXDMACLR
 * @return new value of SSP.SSPITIP
 */
__SSP_INLINE uint32_t SSP_SSPITIP__SSPRXDMACLR__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~SSP_SSPITIP__SSPRXDMACLR__Msk);
    reg = (reg | (SSP_SSPITIP__SSPRXDMACLR__Shift((uint32_t)bf_value)));
    return reg;
}

/** SSP_SSPITIP__SSPRXDMACLR__EXTRACT() extracts SSPITIP.SSPRXDMACLR.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPITIP.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPITIP
 * @return current value of SSPITIP.SSPRXDMACLR
 */
__SSP_INLINE uint32_t SSP_SSPITIP__SSPRXDMACLR__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPITIP__SSPRXDMACLR__Msk);
    reg = (reg >> SSP_SSPITIP__SSPRXDMACLR__Pos);
    return (uint32_t)reg;
}

/* -------------------------- SSP.SSPITIP.SSPCLKIN -------------------------- */


#define SSP_SSPITIP__SSPCLKIN__Pos                              2                                                                      /*!< Right-most bit position of SSPCLKIN in SSP.SSPITIP */
#define SSP_SSPITIP__SSPCLKIN__Msk                              (0x00000001UL << SSP_SSPITIP__SSPCLKIN__Pos)                           /*!< Mask for SSPCLKIN in SSP.SSPITIP */
#define SSP_SSPITIP__SSPCLKIN__Shift(v)                         (((v) << SSP_SSPITIP__SSPCLKIN__Pos) & SSP_SSPITIP__SSPCLKIN__Msk)     /*!< Shift value 'v' into SSPCLKIN and mask 'v' to fit it into SSPCLKIN field */

/** SSP_SSPITIP__SSPCLKIN__GET() gets SSPITIP.SSPCLKIN's current value.
 *
 * When reading from SSPITIP.SSPCLKIN, this is recommended to use.
 *
 * @return current value of SSPITIP.SSPCLKIN
 */
__SSP_INLINE uint32_t SSP_SSPITIP__SSPCLKIN__GET(void)
{
    uint32_t reg = SSP_SSPITIP__GET();
    reg = (reg & SSP_SSPITIP__SSPCLKIN__Msk);
    reg = (reg >> SSP_SSPITIP__SSPCLKIN__Pos);
    return (uint32_t)reg;
}

/** SSP_SSPITIP__SSPCLKIN__EXTRACT() extracts SSPITIP.SSPCLKIN.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPITIP.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPITIP
 * @return current value of SSPITIP.SSPCLKIN
 */
__SSP_INLINE uint32_t SSP_SSPITIP__SSPCLKIN__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPITIP__SSPCLKIN__Msk);
    reg = (reg >> SSP_SSPITIP__SSPCLKIN__Pos);
    return (uint32_t)reg;
}

/* -------------------------- SSP.SSPITIP.SSPFSSIN -------------------------- */


#define SSP_SSPITIP__SSPFSSIN__Pos                              1                                                                      /*!< Right-most bit position of SSPFSSIN in SSP.SSPITIP */
#define SSP_SSPITIP__SSPFSSIN__Msk                              (0x00000001UL << SSP_SSPITIP__SSPFSSIN__Pos)                           /*!< Mask for SSPFSSIN in SSP.SSPITIP */
#define SSP_SSPITIP__SSPFSSIN__Shift(v)                         (((v) << SSP_SSPITIP__SSPFSSIN__Pos) & SSP_SSPITIP__SSPFSSIN__Msk)     /*!< Shift value 'v' into SSPFSSIN and mask 'v' to fit it into SSPFSSIN field */

/** SSP_SSPITIP__SSPFSSIN__SET() sets SSPITIP.SSPFSSIN to given value.
 *
 * When writing to SSPITIP.SSPFSSIN, this is recommended to use.
 *
 * @param bf_value new value for SSPITIP.SSPFSSIN
 */
__SSP_INLINE void SSP_SSPITIP__SSPFSSIN__SET(uint32_t bf_value)
{
    uint32_t reg = SSP_SSPITIP__GET();
    reg = (reg & ~SSP_SSPITIP__SSPFSSIN__Msk);
    reg = (reg | (SSP_SSPITIP__SSPFSSIN__Shift((uint32_t)bf_value)));
    SSP_SSPITIP__SET(reg);
}

/** SSP_SSPITIP__SSPFSSIN__GET() gets SSPITIP.SSPFSSIN's current value.
 *
 * When reading from SSPITIP.SSPFSSIN, this is recommended to use.
 *
 * @return current value of SSPITIP.SSPFSSIN
 */
__SSP_INLINE uint32_t SSP_SSPITIP__SSPFSSIN__GET(void)
{
    uint32_t reg = SSP_SSPITIP__GET();
    reg = (reg & SSP_SSPITIP__SSPFSSIN__Msk);
    reg = (reg >> SSP_SSPITIP__SSPFSSIN__Pos);
    return (uint32_t)reg;
}

/** SSP_SSPITIP__SSPFSSIN__MODIFY() modifies SSPITIP.SSPFSSIN.
 *
 * This is recommended to use when setting more than one bitfield of SSP.SSPITIP.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of SSP.SSPITIP
 * @param bf_value new value for SSPITIP.SSPFSSIN
 * @return new value of SSP.SSPITIP
 */
__SSP_INLINE uint32_t SSP_SSPITIP__SSPFSSIN__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~SSP_SSPITIP__SSPFSSIN__Msk);
    reg = (reg | (SSP_SSPITIP__SSPFSSIN__Shift((uint32_t)bf_value)));
    return reg;
}

/** SSP_SSPITIP__SSPFSSIN__EXTRACT() extracts SSPITIP.SSPFSSIN.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPITIP.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPITIP
 * @return current value of SSPITIP.SSPFSSIN
 */
__SSP_INLINE uint32_t SSP_SSPITIP__SSPFSSIN__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPITIP__SSPFSSIN__Msk);
    reg = (reg >> SSP_SSPITIP__SSPFSSIN__Pos);
    return (uint32_t)reg;
}

/* --------------------------- SSP.SSPITIP.SSPRXD --------------------------- */


#define SSP_SSPITIP__SSPRXD__Pos                                0                                                                      /*!< Right-most bit position of SSPRXD in SSP.SSPITIP */
#define SSP_SSPITIP__SSPRXD__Msk                                (0x00000001UL << SSP_SSPITIP__SSPRXD__Pos)                             /*!< Mask for SSPRXD in SSP.SSPITIP */
#define SSP_SSPITIP__SSPRXD__Shift(v)                           (((v) << SSP_SSPITIP__SSPRXD__Pos) & SSP_SSPITIP__SSPRXD__Msk)         /*!< Shift value 'v' into SSPRXD and mask 'v' to fit it into SSPRXD field */

/** SSP_SSPITIP__SSPRXD__SET() sets SSPITIP.SSPRXD to given value.
 *
 * When writing to SSPITIP.SSPRXD, this is recommended to use.
 *
 * @param bf_value new value for SSPITIP.SSPRXD
 */
__SSP_INLINE void SSP_SSPITIP__SSPRXD__SET(uint32_t bf_value)
{
    uint32_t reg = SSP_SSPITIP__GET();
    reg = (reg & ~SSP_SSPITIP__SSPRXD__Msk);
    reg = (reg | (SSP_SSPITIP__SSPRXD__Shift((uint32_t)bf_value)));
    SSP_SSPITIP__SET(reg);
}

/** SSP_SSPITIP__SSPRXD__GET() gets SSPITIP.SSPRXD's current value.
 *
 * When reading from SSPITIP.SSPRXD, this is recommended to use.
 *
 * @return current value of SSPITIP.SSPRXD
 */
__SSP_INLINE uint32_t SSP_SSPITIP__SSPRXD__GET(void)
{
    uint32_t reg = SSP_SSPITIP__GET();
    reg = (reg & SSP_SSPITIP__SSPRXD__Msk);
    reg = (reg >> SSP_SSPITIP__SSPRXD__Pos);
    return (uint32_t)reg;
}

/** SSP_SSPITIP__SSPRXD__MODIFY() modifies SSPITIP.SSPRXD.
 *
 * This is recommended to use when setting more than one bitfield of SSP.SSPITIP.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of SSP.SSPITIP
 * @param bf_value new value for SSPITIP.SSPRXD
 * @return new value of SSP.SSPITIP
 */
__SSP_INLINE uint32_t SSP_SSPITIP__SSPRXD__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~SSP_SSPITIP__SSPRXD__Msk);
    reg = (reg | (SSP_SSPITIP__SSPRXD__Shift((uint32_t)bf_value)));
    return reg;
}

/** SSP_SSPITIP__SSPRXD__EXTRACT() extracts SSPITIP.SSPRXD.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPITIP.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPITIP
 * @return current value of SSPITIP.SSPRXD
 */
__SSP_INLINE uint32_t SSP_SSPITIP__SSPRXD__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPITIP__SSPRXD__Msk);
    reg = (reg >> SSP_SSPITIP__SSPRXD__Pos);
    return (uint32_t)reg;
}

/* -------------------------------------------------------------------------- */
/*                          SSPITOP member of SSP_t                          */
/* -------------------------------------------------------------------------- */

/** __SSP_SSPITOP__ADDRESS returns the address of member SSPITOP.
 *
 * As indicated by the __ prefix, this is not intended for use by the FW. It is
 * here for readability only.
 *
 * @return address of SSPITOP
 */
__SSP_INLINE uint32_t* __SSP_SSPITOP__ADDRESS(void)
{
    return (uint32_t*)((uint32_t)__SSP_BASE_PTR() + (uint32_t)(offsetof(SSP_t, SSPITOP)));
}

/** SSP_SSPITOP__SET() sets SSPITOP to given value.
 *
 * When writing to SSPITOP, this is mandatory to use.
 *
 * @param value new value for SSPITOP
 */
__SSP_INLINE void SSP_SSPITOP__SET(uint32_t value)
{
    HAL_SET32(__SSP_SSPITOP__ADDRESS(), value);
}

/** SSP_SSPITOP__GET() gets SSPITOP's current value.
 *
 * When reading from SSPITOP, this is mandatory to use.
 *
 * @return current value of SSPITOP
 */
__SSP_INLINE uint32_t SSP_SSPITOP__GET(void)
{
    return HAL_GET32(__SSP_SSPITOP__ADDRESS());
}

/* ---------------------------- SSP.SSPITOP.RES ---------------------------- */

/**
<pre>
  SSP.SSPITOP.RES:

    Reserved, unpredictable when read.

</pre> */

#define SSP_SSPITOP__RES__Pos                                   14                                                                     /*!< Right-most bit position of RES in SSP.SSPITOP */
#define SSP_SSPITOP__RES__Msk                                   (0x0003FFFFUL << SSP_SSPITOP__RES__Pos)                                /*!< Mask for RES in SSP.SSPITOP */
#define SSP_SSPITOP__RES__Shift(v)                              (((v) << SSP_SSPITOP__RES__Pos) & SSP_SSPITOP__RES__Msk)               /*!< Shift value 'v' into RES and mask 'v' to fit it into RES field */

/** SSP_SSPITOP__RES__GET() gets SSPITOP.RES's current value.
 *
 * When reading from SSPITOP.RES, this is recommended to use.
 *
 * @return current value of SSPITOP.RES
 */
__SSP_INLINE uint32_t SSP_SSPITOP__RES__GET(void)
{
    uint32_t reg = SSP_SSPITOP__GET();
    reg = (reg & SSP_SSPITOP__RES__Msk);
    reg = (reg >> SSP_SSPITOP__RES__Pos);
    return (uint32_t)reg;
}

/** SSP_SSPITOP__RES__EXTRACT() extracts SSPITOP.RES.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPITOP.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPITOP
 * @return current value of SSPITOP.RES
 */
__SSP_INLINE uint32_t SSP_SSPITOP__RES__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPITOP__RES__Msk);
    reg = (reg >> SSP_SSPITOP__RES__Pos);
    return (uint32_t)reg;
}

/* ------------------------ SSP.SSPITOP.SSPTXDMASREQ ------------------------ */


#define SSP_SSPITOP__SSPTXDMASREQ__Pos                          13                                                                     /*!< Right-most bit position of SSPTXDMASREQ in SSP.SSPITOP */
#define SSP_SSPITOP__SSPTXDMASREQ__Msk                          (0x00000001UL << SSP_SSPITOP__SSPTXDMASREQ__Pos)                       /*!< Mask for SSPTXDMASREQ in SSP.SSPITOP */
#define SSP_SSPITOP__SSPTXDMASREQ__Shift(v)                     (((v) << SSP_SSPITOP__SSPTXDMASREQ__Pos) & SSP_SSPITOP__SSPTXDMASREQ__Msk) /*!< Shift value 'v' into SSPTXDMASREQ and mask 'v' to fit it into SSPTXDMASREQ field */

/** SSP_SSPITOP__SSPTXDMASREQ__SET() sets SSPITOP.SSPTXDMASREQ to given value.
 *
 * When writing to SSPITOP.SSPTXDMASREQ, this is recommended to use.
 *
 * @param bf_value new value for SSPITOP.SSPTXDMASREQ
 */
__SSP_INLINE void SSP_SSPITOP__SSPTXDMASREQ__SET(uint32_t bf_value)
{
    uint32_t reg = SSP_SSPITOP__GET();
    reg = (reg & ~SSP_SSPITOP__SSPTXDMASREQ__Msk);
    reg = (reg | (SSP_SSPITOP__SSPTXDMASREQ__Shift((uint32_t)bf_value)));
    SSP_SSPITOP__SET(reg);
}

/** SSP_SSPITOP__SSPTXDMASREQ__GET() gets SSPITOP.SSPTXDMASREQ's current value.
 *
 * When reading from SSPITOP.SSPTXDMASREQ, this is recommended to use.
 *
 * @return current value of SSPITOP.SSPTXDMASREQ
 */
__SSP_INLINE uint32_t SSP_SSPITOP__SSPTXDMASREQ__GET(void)
{
    uint32_t reg = SSP_SSPITOP__GET();
    reg = (reg & SSP_SSPITOP__SSPTXDMASREQ__Msk);
    reg = (reg >> SSP_SSPITOP__SSPTXDMASREQ__Pos);
    return (uint32_t)reg;
}

/** SSP_SSPITOP__SSPTXDMASREQ__MODIFY() modifies SSPITOP.SSPTXDMASREQ.
 *
 * This is recommended to use when setting more than one bitfield of SSP.SSPITOP.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of SSP.SSPITOP
 * @param bf_value new value for SSPITOP.SSPTXDMASREQ
 * @return new value of SSP.SSPITOP
 */
__SSP_INLINE uint32_t SSP_SSPITOP__SSPTXDMASREQ__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~SSP_SSPITOP__SSPTXDMASREQ__Msk);
    reg = (reg | (SSP_SSPITOP__SSPTXDMASREQ__Shift((uint32_t)bf_value)));
    return reg;
}

/** SSP_SSPITOP__SSPTXDMASREQ__EXTRACT() extracts SSPITOP.SSPTXDMASREQ.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPITOP.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPITOP
 * @return current value of SSPITOP.SSPTXDMASREQ
 */
__SSP_INLINE uint32_t SSP_SSPITOP__SSPTXDMASREQ__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPITOP__SSPTXDMASREQ__Msk);
    reg = (reg >> SSP_SSPITOP__SSPTXDMASREQ__Pos);
    return (uint32_t)reg;
}

/* ------------------------ SSP.SSPITOP.SSPTXDMABREQ ------------------------ */


#define SSP_SSPITOP__SSPTXDMABREQ__Pos                          12                                                                     /*!< Right-most bit position of SSPTXDMABREQ in SSP.SSPITOP */
#define SSP_SSPITOP__SSPTXDMABREQ__Msk                          (0x00000001UL << SSP_SSPITOP__SSPTXDMABREQ__Pos)                       /*!< Mask for SSPTXDMABREQ in SSP.SSPITOP */
#define SSP_SSPITOP__SSPTXDMABREQ__Shift(v)                     (((v) << SSP_SSPITOP__SSPTXDMABREQ__Pos) & SSP_SSPITOP__SSPTXDMABREQ__Msk) /*!< Shift value 'v' into SSPTXDMABREQ and mask 'v' to fit it into SSPTXDMABREQ field */

/** SSP_SSPITOP__SSPTXDMABREQ__SET() sets SSPITOP.SSPTXDMABREQ to given value.
 *
 * When writing to SSPITOP.SSPTXDMABREQ, this is recommended to use.
 *
 * @param bf_value new value for SSPITOP.SSPTXDMABREQ
 */
__SSP_INLINE void SSP_SSPITOP__SSPTXDMABREQ__SET(uint32_t bf_value)
{
    uint32_t reg = SSP_SSPITOP__GET();
    reg = (reg & ~SSP_SSPITOP__SSPTXDMABREQ__Msk);
    reg = (reg | (SSP_SSPITOP__SSPTXDMABREQ__Shift((uint32_t)bf_value)));
    SSP_SSPITOP__SET(reg);
}

/** SSP_SSPITOP__SSPTXDMABREQ__GET() gets SSPITOP.SSPTXDMABREQ's current value.
 *
 * When reading from SSPITOP.SSPTXDMABREQ, this is recommended to use.
 *
 * @return current value of SSPITOP.SSPTXDMABREQ
 */
__SSP_INLINE uint32_t SSP_SSPITOP__SSPTXDMABREQ__GET(void)
{
    uint32_t reg = SSP_SSPITOP__GET();
    reg = (reg & SSP_SSPITOP__SSPTXDMABREQ__Msk);
    reg = (reg >> SSP_SSPITOP__SSPTXDMABREQ__Pos);
    return (uint32_t)reg;
}

/** SSP_SSPITOP__SSPTXDMABREQ__MODIFY() modifies SSPITOP.SSPTXDMABREQ.
 *
 * This is recommended to use when setting more than one bitfield of SSP.SSPITOP.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of SSP.SSPITOP
 * @param bf_value new value for SSPITOP.SSPTXDMABREQ
 * @return new value of SSP.SSPITOP
 */
__SSP_INLINE uint32_t SSP_SSPITOP__SSPTXDMABREQ__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~SSP_SSPITOP__SSPTXDMABREQ__Msk);
    reg = (reg | (SSP_SSPITOP__SSPTXDMABREQ__Shift((uint32_t)bf_value)));
    return reg;
}

/** SSP_SSPITOP__SSPTXDMABREQ__EXTRACT() extracts SSPITOP.SSPTXDMABREQ.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPITOP.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPITOP
 * @return current value of SSPITOP.SSPTXDMABREQ
 */
__SSP_INLINE uint32_t SSP_SSPITOP__SSPTXDMABREQ__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPITOP__SSPTXDMABREQ__Msk);
    reg = (reg >> SSP_SSPITOP__SSPTXDMABREQ__Pos);
    return (uint32_t)reg;
}

/* ------------------------ SSP.SSPITOP.SSPRXDMASREQ ------------------------ */


#define SSP_SSPITOP__SSPRXDMASREQ__Pos                          11                                                                     /*!< Right-most bit position of SSPRXDMASREQ in SSP.SSPITOP */
#define SSP_SSPITOP__SSPRXDMASREQ__Msk                          (0x00000001UL << SSP_SSPITOP__SSPRXDMASREQ__Pos)                       /*!< Mask for SSPRXDMASREQ in SSP.SSPITOP */
#define SSP_SSPITOP__SSPRXDMASREQ__Shift(v)                     (((v) << SSP_SSPITOP__SSPRXDMASREQ__Pos) & SSP_SSPITOP__SSPRXDMASREQ__Msk) /*!< Shift value 'v' into SSPRXDMASREQ and mask 'v' to fit it into SSPRXDMASREQ field */

/** SSP_SSPITOP__SSPRXDMASREQ__SET() sets SSPITOP.SSPRXDMASREQ to given value.
 *
 * When writing to SSPITOP.SSPRXDMASREQ, this is recommended to use.
 *
 * @param bf_value new value for SSPITOP.SSPRXDMASREQ
 */
__SSP_INLINE void SSP_SSPITOP__SSPRXDMASREQ__SET(uint32_t bf_value)
{
    uint32_t reg = SSP_SSPITOP__GET();
    reg = (reg & ~SSP_SSPITOP__SSPRXDMASREQ__Msk);
    reg = (reg | (SSP_SSPITOP__SSPRXDMASREQ__Shift((uint32_t)bf_value)));
    SSP_SSPITOP__SET(reg);
}

/** SSP_SSPITOP__SSPRXDMASREQ__GET() gets SSPITOP.SSPRXDMASREQ's current value.
 *
 * When reading from SSPITOP.SSPRXDMASREQ, this is recommended to use.
 *
 * @return current value of SSPITOP.SSPRXDMASREQ
 */
__SSP_INLINE uint32_t SSP_SSPITOP__SSPRXDMASREQ__GET(void)
{
    uint32_t reg = SSP_SSPITOP__GET();
    reg = (reg & SSP_SSPITOP__SSPRXDMASREQ__Msk);
    reg = (reg >> SSP_SSPITOP__SSPRXDMASREQ__Pos);
    return (uint32_t)reg;
}

/** SSP_SSPITOP__SSPRXDMASREQ__MODIFY() modifies SSPITOP.SSPRXDMASREQ.
 *
 * This is recommended to use when setting more than one bitfield of SSP.SSPITOP.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of SSP.SSPITOP
 * @param bf_value new value for SSPITOP.SSPRXDMASREQ
 * @return new value of SSP.SSPITOP
 */
__SSP_INLINE uint32_t SSP_SSPITOP__SSPRXDMASREQ__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~SSP_SSPITOP__SSPRXDMASREQ__Msk);
    reg = (reg | (SSP_SSPITOP__SSPRXDMASREQ__Shift((uint32_t)bf_value)));
    return reg;
}

/** SSP_SSPITOP__SSPRXDMASREQ__EXTRACT() extracts SSPITOP.SSPRXDMASREQ.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPITOP.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPITOP
 * @return current value of SSPITOP.SSPRXDMASREQ
 */
__SSP_INLINE uint32_t SSP_SSPITOP__SSPRXDMASREQ__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPITOP__SSPRXDMASREQ__Msk);
    reg = (reg >> SSP_SSPITOP__SSPRXDMASREQ__Pos);
    return (uint32_t)reg;
}

/* ------------------------ SSP.SSPITOP.SSPRXDMABREQ ------------------------ */


#define SSP_SSPITOP__SSPRXDMABREQ__Pos                          10                                                                     /*!< Right-most bit position of SSPRXDMABREQ in SSP.SSPITOP */
#define SSP_SSPITOP__SSPRXDMABREQ__Msk                          (0x00000001UL << SSP_SSPITOP__SSPRXDMABREQ__Pos)                       /*!< Mask for SSPRXDMABREQ in SSP.SSPITOP */
#define SSP_SSPITOP__SSPRXDMABREQ__Shift(v)                     (((v) << SSP_SSPITOP__SSPRXDMABREQ__Pos) & SSP_SSPITOP__SSPRXDMABREQ__Msk) /*!< Shift value 'v' into SSPRXDMABREQ and mask 'v' to fit it into SSPRXDMABREQ field */

/** SSP_SSPITOP__SSPRXDMABREQ__SET() sets SSPITOP.SSPRXDMABREQ to given value.
 *
 * When writing to SSPITOP.SSPRXDMABREQ, this is recommended to use.
 *
 * @param bf_value new value for SSPITOP.SSPRXDMABREQ
 */
__SSP_INLINE void SSP_SSPITOP__SSPRXDMABREQ__SET(uint32_t bf_value)
{
    uint32_t reg = SSP_SSPITOP__GET();
    reg = (reg & ~SSP_SSPITOP__SSPRXDMABREQ__Msk);
    reg = (reg | (SSP_SSPITOP__SSPRXDMABREQ__Shift((uint32_t)bf_value)));
    SSP_SSPITOP__SET(reg);
}

/** SSP_SSPITOP__SSPRXDMABREQ__GET() gets SSPITOP.SSPRXDMABREQ's current value.
 *
 * When reading from SSPITOP.SSPRXDMABREQ, this is recommended to use.
 *
 * @return current value of SSPITOP.SSPRXDMABREQ
 */
__SSP_INLINE uint32_t SSP_SSPITOP__SSPRXDMABREQ__GET(void)
{
    uint32_t reg = SSP_SSPITOP__GET();
    reg = (reg & SSP_SSPITOP__SSPRXDMABREQ__Msk);
    reg = (reg >> SSP_SSPITOP__SSPRXDMABREQ__Pos);
    return (uint32_t)reg;
}

/** SSP_SSPITOP__SSPRXDMABREQ__MODIFY() modifies SSPITOP.SSPRXDMABREQ.
 *
 * This is recommended to use when setting more than one bitfield of SSP.SSPITOP.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of SSP.SSPITOP
 * @param bf_value new value for SSPITOP.SSPRXDMABREQ
 * @return new value of SSP.SSPITOP
 */
__SSP_INLINE uint32_t SSP_SSPITOP__SSPRXDMABREQ__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~SSP_SSPITOP__SSPRXDMABREQ__Msk);
    reg = (reg | (SSP_SSPITOP__SSPRXDMABREQ__Shift((uint32_t)bf_value)));
    return reg;
}

/** SSP_SSPITOP__SSPRXDMABREQ__EXTRACT() extracts SSPITOP.SSPRXDMABREQ.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPITOP.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPITOP
 * @return current value of SSPITOP.SSPRXDMABREQ
 */
__SSP_INLINE uint32_t SSP_SSPITOP__SSPRXDMABREQ__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPITOP__SSPRXDMABREQ__Msk);
    reg = (reg >> SSP_SSPITOP__SSPRXDMABREQ__Pos);
    return (uint32_t)reg;
}

/* -------------------------- SSP.SSPITOP.SSPINTR -------------------------- */


#define SSP_SSPITOP__SSPINTR__Pos                               9                                                                      /*!< Right-most bit position of SSPINTR in SSP.SSPITOP */
#define SSP_SSPITOP__SSPINTR__Msk                               (0x00000001UL << SSP_SSPITOP__SSPINTR__Pos)                            /*!< Mask for SSPINTR in SSP.SSPITOP */
#define SSP_SSPITOP__SSPINTR__Shift(v)                          (((v) << SSP_SSPITOP__SSPINTR__Pos) & SSP_SSPITOP__SSPINTR__Msk)       /*!< Shift value 'v' into SSPINTR and mask 'v' to fit it into SSPINTR field */

/** SSP_SSPITOP__SSPINTR__SET() sets SSPITOP.SSPINTR to given value.
 *
 * When writing to SSPITOP.SSPINTR, this is recommended to use.
 *
 * @param bf_value new value for SSPITOP.SSPINTR
 */
__SSP_INLINE void SSP_SSPITOP__SSPINTR__SET(uint32_t bf_value)
{
    uint32_t reg = SSP_SSPITOP__GET();
    reg = (reg & ~SSP_SSPITOP__SSPINTR__Msk);
    reg = (reg | (SSP_SSPITOP__SSPINTR__Shift((uint32_t)bf_value)));
    SSP_SSPITOP__SET(reg);
}

/** SSP_SSPITOP__SSPINTR__GET() gets SSPITOP.SSPINTR's current value.
 *
 * When reading from SSPITOP.SSPINTR, this is recommended to use.
 *
 * @return current value of SSPITOP.SSPINTR
 */
__SSP_INLINE uint32_t SSP_SSPITOP__SSPINTR__GET(void)
{
    uint32_t reg = SSP_SSPITOP__GET();
    reg = (reg & SSP_SSPITOP__SSPINTR__Msk);
    reg = (reg >> SSP_SSPITOP__SSPINTR__Pos);
    return (uint32_t)reg;
}

/** SSP_SSPITOP__SSPINTR__MODIFY() modifies SSPITOP.SSPINTR.
 *
 * This is recommended to use when setting more than one bitfield of SSP.SSPITOP.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of SSP.SSPITOP
 * @param bf_value new value for SSPITOP.SSPINTR
 * @return new value of SSP.SSPITOP
 */
__SSP_INLINE uint32_t SSP_SSPITOP__SSPINTR__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~SSP_SSPITOP__SSPINTR__Msk);
    reg = (reg | (SSP_SSPITOP__SSPINTR__Shift((uint32_t)bf_value)));
    return reg;
}

/** SSP_SSPITOP__SSPINTR__EXTRACT() extracts SSPITOP.SSPINTR.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPITOP.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPITOP
 * @return current value of SSPITOP.SSPINTR
 */
__SSP_INLINE uint32_t SSP_SSPITOP__SSPINTR__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPITOP__SSPINTR__Msk);
    reg = (reg >> SSP_SSPITOP__SSPINTR__Pos);
    return (uint32_t)reg;
}

/* ------------------------- SSP.SSPITOP.SSPTXINTR ------------------------- */


#define SSP_SSPITOP__SSPTXINTR__Pos                             8                                                                      /*!< Right-most bit position of SSPTXINTR in SSP.SSPITOP */
#define SSP_SSPITOP__SSPTXINTR__Msk                             (0x00000001UL << SSP_SSPITOP__SSPTXINTR__Pos)                          /*!< Mask for SSPTXINTR in SSP.SSPITOP */
#define SSP_SSPITOP__SSPTXINTR__Shift(v)                        (((v) << SSP_SSPITOP__SSPTXINTR__Pos) & SSP_SSPITOP__SSPTXINTR__Msk)   /*!< Shift value 'v' into SSPTXINTR and mask 'v' to fit it into SSPTXINTR field */

/** SSP_SSPITOP__SSPTXINTR__SET() sets SSPITOP.SSPTXINTR to given value.
 *
 * When writing to SSPITOP.SSPTXINTR, this is recommended to use.
 *
 * @param bf_value new value for SSPITOP.SSPTXINTR
 */
__SSP_INLINE void SSP_SSPITOP__SSPTXINTR__SET(uint32_t bf_value)
{
    uint32_t reg = SSP_SSPITOP__GET();
    reg = (reg & ~SSP_SSPITOP__SSPTXINTR__Msk);
    reg = (reg | (SSP_SSPITOP__SSPTXINTR__Shift((uint32_t)bf_value)));
    SSP_SSPITOP__SET(reg);
}

/** SSP_SSPITOP__SSPTXINTR__GET() gets SSPITOP.SSPTXINTR's current value.
 *
 * When reading from SSPITOP.SSPTXINTR, this is recommended to use.
 *
 * @return current value of SSPITOP.SSPTXINTR
 */
__SSP_INLINE uint32_t SSP_SSPITOP__SSPTXINTR__GET(void)
{
    uint32_t reg = SSP_SSPITOP__GET();
    reg = (reg & SSP_SSPITOP__SSPTXINTR__Msk);
    reg = (reg >> SSP_SSPITOP__SSPTXINTR__Pos);
    return (uint32_t)reg;
}

/** SSP_SSPITOP__SSPTXINTR__MODIFY() modifies SSPITOP.SSPTXINTR.
 *
 * This is recommended to use when setting more than one bitfield of SSP.SSPITOP.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of SSP.SSPITOP
 * @param bf_value new value for SSPITOP.SSPTXINTR
 * @return new value of SSP.SSPITOP
 */
__SSP_INLINE uint32_t SSP_SSPITOP__SSPTXINTR__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~SSP_SSPITOP__SSPTXINTR__Msk);
    reg = (reg | (SSP_SSPITOP__SSPTXINTR__Shift((uint32_t)bf_value)));
    return reg;
}

/** SSP_SSPITOP__SSPTXINTR__EXTRACT() extracts SSPITOP.SSPTXINTR.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPITOP.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPITOP
 * @return current value of SSPITOP.SSPTXINTR
 */
__SSP_INLINE uint32_t SSP_SSPITOP__SSPTXINTR__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPITOP__SSPTXINTR__Msk);
    reg = (reg >> SSP_SSPITOP__SSPTXINTR__Pos);
    return (uint32_t)reg;
}

/* ------------------------- SSP.SSPITOP.SSPRXINTR ------------------------- */


#define SSP_SSPITOP__SSPRXINTR__Pos                             7                                                                      /*!< Right-most bit position of SSPRXINTR in SSP.SSPITOP */
#define SSP_SSPITOP__SSPRXINTR__Msk                             (0x00000001UL << SSP_SSPITOP__SSPRXINTR__Pos)                          /*!< Mask for SSPRXINTR in SSP.SSPITOP */
#define SSP_SSPITOP__SSPRXINTR__Shift(v)                        (((v) << SSP_SSPITOP__SSPRXINTR__Pos) & SSP_SSPITOP__SSPRXINTR__Msk)   /*!< Shift value 'v' into SSPRXINTR and mask 'v' to fit it into SSPRXINTR field */

/** SSP_SSPITOP__SSPRXINTR__SET() sets SSPITOP.SSPRXINTR to given value.
 *
 * When writing to SSPITOP.SSPRXINTR, this is recommended to use.
 *
 * @param bf_value new value for SSPITOP.SSPRXINTR
 */
__SSP_INLINE void SSP_SSPITOP__SSPRXINTR__SET(uint32_t bf_value)
{
    uint32_t reg = SSP_SSPITOP__GET();
    reg = (reg & ~SSP_SSPITOP__SSPRXINTR__Msk);
    reg = (reg | (SSP_SSPITOP__SSPRXINTR__Shift((uint32_t)bf_value)));
    SSP_SSPITOP__SET(reg);
}

/** SSP_SSPITOP__SSPRXINTR__GET() gets SSPITOP.SSPRXINTR's current value.
 *
 * When reading from SSPITOP.SSPRXINTR, this is recommended to use.
 *
 * @return current value of SSPITOP.SSPRXINTR
 */
__SSP_INLINE uint32_t SSP_SSPITOP__SSPRXINTR__GET(void)
{
    uint32_t reg = SSP_SSPITOP__GET();
    reg = (reg & SSP_SSPITOP__SSPRXINTR__Msk);
    reg = (reg >> SSP_SSPITOP__SSPRXINTR__Pos);
    return (uint32_t)reg;
}

/** SSP_SSPITOP__SSPRXINTR__MODIFY() modifies SSPITOP.SSPRXINTR.
 *
 * This is recommended to use when setting more than one bitfield of SSP.SSPITOP.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of SSP.SSPITOP
 * @param bf_value new value for SSPITOP.SSPRXINTR
 * @return new value of SSP.SSPITOP
 */
__SSP_INLINE uint32_t SSP_SSPITOP__SSPRXINTR__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~SSP_SSPITOP__SSPRXINTR__Msk);
    reg = (reg | (SSP_SSPITOP__SSPRXINTR__Shift((uint32_t)bf_value)));
    return reg;
}

/** SSP_SSPITOP__SSPRXINTR__EXTRACT() extracts SSPITOP.SSPRXINTR.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPITOP.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPITOP
 * @return current value of SSPITOP.SSPRXINTR
 */
__SSP_INLINE uint32_t SSP_SSPITOP__SSPRXINTR__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPITOP__SSPRXINTR__Msk);
    reg = (reg >> SSP_SSPITOP__SSPRXINTR__Pos);
    return (uint32_t)reg;
}

/* ------------------------- SSP.SSPITOP.SSPRTINTR ------------------------- */


#define SSP_SSPITOP__SSPRTINTR__Pos                             6                                                                      /*!< Right-most bit position of SSPRTINTR in SSP.SSPITOP */
#define SSP_SSPITOP__SSPRTINTR__Msk                             (0x00000001UL << SSP_SSPITOP__SSPRTINTR__Pos)                          /*!< Mask for SSPRTINTR in SSP.SSPITOP */
#define SSP_SSPITOP__SSPRTINTR__Shift(v)                        (((v) << SSP_SSPITOP__SSPRTINTR__Pos) & SSP_SSPITOP__SSPRTINTR__Msk)   /*!< Shift value 'v' into SSPRTINTR and mask 'v' to fit it into SSPRTINTR field */

/** SSP_SSPITOP__SSPRTINTR__SET() sets SSPITOP.SSPRTINTR to given value.
 *
 * When writing to SSPITOP.SSPRTINTR, this is recommended to use.
 *
 * @param bf_value new value for SSPITOP.SSPRTINTR
 */
__SSP_INLINE void SSP_SSPITOP__SSPRTINTR__SET(uint32_t bf_value)
{
    uint32_t reg = SSP_SSPITOP__GET();
    reg = (reg & ~SSP_SSPITOP__SSPRTINTR__Msk);
    reg = (reg | (SSP_SSPITOP__SSPRTINTR__Shift((uint32_t)bf_value)));
    SSP_SSPITOP__SET(reg);
}

/** SSP_SSPITOP__SSPRTINTR__GET() gets SSPITOP.SSPRTINTR's current value.
 *
 * When reading from SSPITOP.SSPRTINTR, this is recommended to use.
 *
 * @return current value of SSPITOP.SSPRTINTR
 */
__SSP_INLINE uint32_t SSP_SSPITOP__SSPRTINTR__GET(void)
{
    uint32_t reg = SSP_SSPITOP__GET();
    reg = (reg & SSP_SSPITOP__SSPRTINTR__Msk);
    reg = (reg >> SSP_SSPITOP__SSPRTINTR__Pos);
    return (uint32_t)reg;
}

/** SSP_SSPITOP__SSPRTINTR__MODIFY() modifies SSPITOP.SSPRTINTR.
 *
 * This is recommended to use when setting more than one bitfield of SSP.SSPITOP.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of SSP.SSPITOP
 * @param bf_value new value for SSPITOP.SSPRTINTR
 * @return new value of SSP.SSPITOP
 */
__SSP_INLINE uint32_t SSP_SSPITOP__SSPRTINTR__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~SSP_SSPITOP__SSPRTINTR__Msk);
    reg = (reg | (SSP_SSPITOP__SSPRTINTR__Shift((uint32_t)bf_value)));
    return reg;
}

/** SSP_SSPITOP__SSPRTINTR__EXTRACT() extracts SSPITOP.SSPRTINTR.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPITOP.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPITOP
 * @return current value of SSPITOP.SSPRTINTR
 */
__SSP_INLINE uint32_t SSP_SSPITOP__SSPRTINTR__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPITOP__SSPRTINTR__Msk);
    reg = (reg >> SSP_SSPITOP__SSPRTINTR__Pos);
    return (uint32_t)reg;
}

/* ------------------------- SSP.SSPITOP.SSPRORINTR ------------------------- */


#define SSP_SSPITOP__SSPRORINTR__Pos                            5                                                                      /*!< Right-most bit position of SSPRORINTR in SSP.SSPITOP */
#define SSP_SSPITOP__SSPRORINTR__Msk                            (0x00000001UL << SSP_SSPITOP__SSPRORINTR__Pos)                         /*!< Mask for SSPRORINTR in SSP.SSPITOP */
#define SSP_SSPITOP__SSPRORINTR__Shift(v)                       (((v) << SSP_SSPITOP__SSPRORINTR__Pos) & SSP_SSPITOP__SSPRORINTR__Msk) /*!< Shift value 'v' into SSPRORINTR and mask 'v' to fit it into SSPRORINTR field */

/** SSP_SSPITOP__SSPRORINTR__SET() sets SSPITOP.SSPRORINTR to given value.
 *
 * When writing to SSPITOP.SSPRORINTR, this is recommended to use.
 *
 * @param bf_value new value for SSPITOP.SSPRORINTR
 */
__SSP_INLINE void SSP_SSPITOP__SSPRORINTR__SET(uint32_t bf_value)
{
    uint32_t reg = SSP_SSPITOP__GET();
    reg = (reg & ~SSP_SSPITOP__SSPRORINTR__Msk);
    reg = (reg | (SSP_SSPITOP__SSPRORINTR__Shift((uint32_t)bf_value)));
    SSP_SSPITOP__SET(reg);
}

/** SSP_SSPITOP__SSPRORINTR__GET() gets SSPITOP.SSPRORINTR's current value.
 *
 * When reading from SSPITOP.SSPRORINTR, this is recommended to use.
 *
 * @return current value of SSPITOP.SSPRORINTR
 */
__SSP_INLINE uint32_t SSP_SSPITOP__SSPRORINTR__GET(void)
{
    uint32_t reg = SSP_SSPITOP__GET();
    reg = (reg & SSP_SSPITOP__SSPRORINTR__Msk);
    reg = (reg >> SSP_SSPITOP__SSPRORINTR__Pos);
    return (uint32_t)reg;
}

/** SSP_SSPITOP__SSPRORINTR__MODIFY() modifies SSPITOP.SSPRORINTR.
 *
 * This is recommended to use when setting more than one bitfield of SSP.SSPITOP.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of SSP.SSPITOP
 * @param bf_value new value for SSPITOP.SSPRORINTR
 * @return new value of SSP.SSPITOP
 */
__SSP_INLINE uint32_t SSP_SSPITOP__SSPRORINTR__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~SSP_SSPITOP__SSPRORINTR__Msk);
    reg = (reg | (SSP_SSPITOP__SSPRORINTR__Shift((uint32_t)bf_value)));
    return reg;
}

/** SSP_SSPITOP__SSPRORINTR__EXTRACT() extracts SSPITOP.SSPRORINTR.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPITOP.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPITOP
 * @return current value of SSPITOP.SSPRORINTR
 */
__SSP_INLINE uint32_t SSP_SSPITOP__SSPRORINTR__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPITOP__SSPRORINTR__Msk);
    reg = (reg >> SSP_SSPITOP__SSPRORINTR__Pos);
    return (uint32_t)reg;
}

/* ------------------------- SSP.SSPITOP.NSSPCTLOE ------------------------- */


#define SSP_SSPITOP__NSSPCTLOE__Pos                             4                                                                      /*!< Right-most bit position of nSSPCTLOE in SSP.SSPITOP */
#define SSP_SSPITOP__NSSPCTLOE__Msk                             (0x00000001UL << SSP_SSPITOP__NSSPCTLOE__Pos)                          /*!< Mask for nSSPCTLOE in SSP.SSPITOP */
#define SSP_SSPITOP__NSSPCTLOE__Shift(v)                        (((v) << SSP_SSPITOP__NSSPCTLOE__Pos) & SSP_SSPITOP__NSSPCTLOE__Msk)   /*!< Shift value 'v' into nSSPCTLOE and mask 'v' to fit it into nSSPCTLOE field */

/** SSP_SSPITOP__NSSPCTLOE__SET() sets SSPITOP.NSSPCTLOE to given value.
 *
 * When writing to SSPITOP.NSSPCTLOE, this is recommended to use.
 *
 * @param bf_value new value for SSPITOP.NSSPCTLOE
 */
__SSP_INLINE void SSP_SSPITOP__NSSPCTLOE__SET(uint32_t bf_value)
{
    uint32_t reg = SSP_SSPITOP__GET();
    reg = (reg & ~SSP_SSPITOP__NSSPCTLOE__Msk);
    reg = (reg | (SSP_SSPITOP__NSSPCTLOE__Shift((uint32_t)bf_value)));
    SSP_SSPITOP__SET(reg);
}

/** SSP_SSPITOP__NSSPCTLOE__GET() gets SSPITOP.NSSPCTLOE's current value.
 *
 * When reading from SSPITOP.NSSPCTLOE, this is recommended to use.
 *
 * @return current value of SSPITOP.NSSPCTLOE
 */
__SSP_INLINE uint32_t SSP_SSPITOP__NSSPCTLOE__GET(void)
{
    uint32_t reg = SSP_SSPITOP__GET();
    reg = (reg & SSP_SSPITOP__NSSPCTLOE__Msk);
    reg = (reg >> SSP_SSPITOP__NSSPCTLOE__Pos);
    return (uint32_t)reg;
}

/** SSP_SSPITOP__NSSPCTLOE__MODIFY() modifies SSPITOP.NSSPCTLOE.
 *
 * This is recommended to use when setting more than one bitfield of SSP.SSPITOP.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of SSP.SSPITOP
 * @param bf_value new value for SSPITOP.NSSPCTLOE
 * @return new value of SSP.SSPITOP
 */
__SSP_INLINE uint32_t SSP_SSPITOP__NSSPCTLOE__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~SSP_SSPITOP__NSSPCTLOE__Msk);
    reg = (reg | (SSP_SSPITOP__NSSPCTLOE__Shift((uint32_t)bf_value)));
    return reg;
}

/** SSP_SSPITOP__NSSPCTLOE__EXTRACT() extracts SSPITOP.NSSPCTLOE.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPITOP.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPITOP
 * @return current value of SSPITOP.NSSPCTLOE
 */
__SSP_INLINE uint32_t SSP_SSPITOP__NSSPCTLOE__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPITOP__NSSPCTLOE__Msk);
    reg = (reg >> SSP_SSPITOP__NSSPCTLOE__Pos);
    return (uint32_t)reg;
}

/* --------------------------- SSP.SSPITOP.NSSPOE --------------------------- */


#define SSP_SSPITOP__NSSPOE__Pos                                3                                                                      /*!< Right-most bit position of nSSPOE in SSP.SSPITOP */
#define SSP_SSPITOP__NSSPOE__Msk                                (0x00000001UL << SSP_SSPITOP__NSSPOE__Pos)                             /*!< Mask for nSSPOE in SSP.SSPITOP */
#define SSP_SSPITOP__NSSPOE__Shift(v)                           (((v) << SSP_SSPITOP__NSSPOE__Pos) & SSP_SSPITOP__NSSPOE__Msk)         /*!< Shift value 'v' into nSSPOE and mask 'v' to fit it into nSSPOE field */

/** SSP_SSPITOP__NSSPOE__SET() sets SSPITOP.NSSPOE to given value.
 *
 * When writing to SSPITOP.NSSPOE, this is recommended to use.
 *
 * @param bf_value new value for SSPITOP.NSSPOE
 */
__SSP_INLINE void SSP_SSPITOP__NSSPOE__SET(uint32_t bf_value)
{
    uint32_t reg = SSP_SSPITOP__GET();
    reg = (reg & ~SSP_SSPITOP__NSSPOE__Msk);
    reg = (reg | (SSP_SSPITOP__NSSPOE__Shift((uint32_t)bf_value)));
    SSP_SSPITOP__SET(reg);
}

/** SSP_SSPITOP__NSSPOE__GET() gets SSPITOP.NSSPOE's current value.
 *
 * When reading from SSPITOP.NSSPOE, this is recommended to use.
 *
 * @return current value of SSPITOP.NSSPOE
 */
__SSP_INLINE uint32_t SSP_SSPITOP__NSSPOE__GET(void)
{
    uint32_t reg = SSP_SSPITOP__GET();
    reg = (reg & SSP_SSPITOP__NSSPOE__Msk);
    reg = (reg >> SSP_SSPITOP__NSSPOE__Pos);
    return (uint32_t)reg;
}

/** SSP_SSPITOP__NSSPOE__MODIFY() modifies SSPITOP.NSSPOE.
 *
 * This is recommended to use when setting more than one bitfield of SSP.SSPITOP.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of SSP.SSPITOP
 * @param bf_value new value for SSPITOP.NSSPOE
 * @return new value of SSP.SSPITOP
 */
__SSP_INLINE uint32_t SSP_SSPITOP__NSSPOE__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~SSP_SSPITOP__NSSPOE__Msk);
    reg = (reg | (SSP_SSPITOP__NSSPOE__Shift((uint32_t)bf_value)));
    return reg;
}

/** SSP_SSPITOP__NSSPOE__EXTRACT() extracts SSPITOP.NSSPOE.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPITOP.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPITOP
 * @return current value of SSPITOP.NSSPOE
 */
__SSP_INLINE uint32_t SSP_SSPITOP__NSSPOE__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPITOP__NSSPOE__Msk);
    reg = (reg >> SSP_SSPITOP__NSSPOE__Pos);
    return (uint32_t)reg;
}

/* ------------------------- SSP.SSPITOP.SSPCLKOUT ------------------------- */


#define SSP_SSPITOP__SSPCLKOUT__Pos                             2                                                                      /*!< Right-most bit position of SSPCLKOUT in SSP.SSPITOP */
#define SSP_SSPITOP__SSPCLKOUT__Msk                             (0x00000001UL << SSP_SSPITOP__SSPCLKOUT__Pos)                          /*!< Mask for SSPCLKOUT in SSP.SSPITOP */
#define SSP_SSPITOP__SSPCLKOUT__Shift(v)                        (((v) << SSP_SSPITOP__SSPCLKOUT__Pos) & SSP_SSPITOP__SSPCLKOUT__Msk)   /*!< Shift value 'v' into SSPCLKOUT and mask 'v' to fit it into SSPCLKOUT field */

/** SSP_SSPITOP__SSPCLKOUT__SET() sets SSPITOP.SSPCLKOUT to given value.
 *
 * When writing to SSPITOP.SSPCLKOUT, this is recommended to use.
 *
 * @param bf_value new value for SSPITOP.SSPCLKOUT
 */
__SSP_INLINE void SSP_SSPITOP__SSPCLKOUT__SET(uint32_t bf_value)
{
    uint32_t reg = SSP_SSPITOP__GET();
    reg = (reg & ~SSP_SSPITOP__SSPCLKOUT__Msk);
    reg = (reg | (SSP_SSPITOP__SSPCLKOUT__Shift((uint32_t)bf_value)));
    SSP_SSPITOP__SET(reg);
}

/** SSP_SSPITOP__SSPCLKOUT__GET() gets SSPITOP.SSPCLKOUT's current value.
 *
 * When reading from SSPITOP.SSPCLKOUT, this is recommended to use.
 *
 * @return current value of SSPITOP.SSPCLKOUT
 */
__SSP_INLINE uint32_t SSP_SSPITOP__SSPCLKOUT__GET(void)
{
    uint32_t reg = SSP_SSPITOP__GET();
    reg = (reg & SSP_SSPITOP__SSPCLKOUT__Msk);
    reg = (reg >> SSP_SSPITOP__SSPCLKOUT__Pos);
    return (uint32_t)reg;
}

/** SSP_SSPITOP__SSPCLKOUT__MODIFY() modifies SSPITOP.SSPCLKOUT.
 *
 * This is recommended to use when setting more than one bitfield of SSP.SSPITOP.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of SSP.SSPITOP
 * @param bf_value new value for SSPITOP.SSPCLKOUT
 * @return new value of SSP.SSPITOP
 */
__SSP_INLINE uint32_t SSP_SSPITOP__SSPCLKOUT__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~SSP_SSPITOP__SSPCLKOUT__Msk);
    reg = (reg | (SSP_SSPITOP__SSPCLKOUT__Shift((uint32_t)bf_value)));
    return reg;
}

/** SSP_SSPITOP__SSPCLKOUT__EXTRACT() extracts SSPITOP.SSPCLKOUT.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPITOP.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPITOP
 * @return current value of SSPITOP.SSPCLKOUT
 */
__SSP_INLINE uint32_t SSP_SSPITOP__SSPCLKOUT__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPITOP__SSPCLKOUT__Msk);
    reg = (reg >> SSP_SSPITOP__SSPCLKOUT__Pos);
    return (uint32_t)reg;
}

/* ------------------------- SSP.SSPITOP.SSPFSSOUT ------------------------- */


#define SSP_SSPITOP__SSPFSSOUT__Pos                             1                                                                      /*!< Right-most bit position of SSPFSSOUT in SSP.SSPITOP */
#define SSP_SSPITOP__SSPFSSOUT__Msk                             (0x00000001UL << SSP_SSPITOP__SSPFSSOUT__Pos)                          /*!< Mask for SSPFSSOUT in SSP.SSPITOP */
#define SSP_SSPITOP__SSPFSSOUT__Shift(v)                        (((v) << SSP_SSPITOP__SSPFSSOUT__Pos) & SSP_SSPITOP__SSPFSSOUT__Msk)   /*!< Shift value 'v' into SSPFSSOUT and mask 'v' to fit it into SSPFSSOUT field */

/** SSP_SSPITOP__SSPFSSOUT__SET() sets SSPITOP.SSPFSSOUT to given value.
 *
 * When writing to SSPITOP.SSPFSSOUT, this is recommended to use.
 *
 * @param bf_value new value for SSPITOP.SSPFSSOUT
 */
__SSP_INLINE void SSP_SSPITOP__SSPFSSOUT__SET(uint32_t bf_value)
{
    uint32_t reg = SSP_SSPITOP__GET();
    reg = (reg & ~SSP_SSPITOP__SSPFSSOUT__Msk);
    reg = (reg | (SSP_SSPITOP__SSPFSSOUT__Shift((uint32_t)bf_value)));
    SSP_SSPITOP__SET(reg);
}

/** SSP_SSPITOP__SSPFSSOUT__GET() gets SSPITOP.SSPFSSOUT's current value.
 *
 * When reading from SSPITOP.SSPFSSOUT, this is recommended to use.
 *
 * @return current value of SSPITOP.SSPFSSOUT
 */
__SSP_INLINE uint32_t SSP_SSPITOP__SSPFSSOUT__GET(void)
{
    uint32_t reg = SSP_SSPITOP__GET();
    reg = (reg & SSP_SSPITOP__SSPFSSOUT__Msk);
    reg = (reg >> SSP_SSPITOP__SSPFSSOUT__Pos);
    return (uint32_t)reg;
}

/** SSP_SSPITOP__SSPFSSOUT__MODIFY() modifies SSPITOP.SSPFSSOUT.
 *
 * This is recommended to use when setting more than one bitfield of SSP.SSPITOP.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of SSP.SSPITOP
 * @param bf_value new value for SSPITOP.SSPFSSOUT
 * @return new value of SSP.SSPITOP
 */
__SSP_INLINE uint32_t SSP_SSPITOP__SSPFSSOUT__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~SSP_SSPITOP__SSPFSSOUT__Msk);
    reg = (reg | (SSP_SSPITOP__SSPFSSOUT__Shift((uint32_t)bf_value)));
    return reg;
}

/** SSP_SSPITOP__SSPFSSOUT__EXTRACT() extracts SSPITOP.SSPFSSOUT.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPITOP.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPITOP
 * @return current value of SSPITOP.SSPFSSOUT
 */
__SSP_INLINE uint32_t SSP_SSPITOP__SSPFSSOUT__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPITOP__SSPFSSOUT__Msk);
    reg = (reg >> SSP_SSPITOP__SSPFSSOUT__Pos);
    return (uint32_t)reg;
}

/* --------------------------- SSP.SSPITOP.SSPTXD --------------------------- */


#define SSP_SSPITOP__SSPTXD__Pos                                0                                                                      /*!< Right-most bit position of SSPTXD in SSP.SSPITOP */
#define SSP_SSPITOP__SSPTXD__Msk                                (0x00000001UL << SSP_SSPITOP__SSPTXD__Pos)                             /*!< Mask for SSPTXD in SSP.SSPITOP */
#define SSP_SSPITOP__SSPTXD__Shift(v)                           (((v) << SSP_SSPITOP__SSPTXD__Pos) & SSP_SSPITOP__SSPTXD__Msk)         /*!< Shift value 'v' into SSPTXD and mask 'v' to fit it into SSPTXD field */

/** SSP_SSPITOP__SSPTXD__SET() sets SSPITOP.SSPTXD to given value.
 *
 * When writing to SSPITOP.SSPTXD, this is recommended to use.
 *
 * @param bf_value new value for SSPITOP.SSPTXD
 */
__SSP_INLINE void SSP_SSPITOP__SSPTXD__SET(uint32_t bf_value)
{
    uint32_t reg = SSP_SSPITOP__GET();
    reg = (reg & ~SSP_SSPITOP__SSPTXD__Msk);
    reg = (reg | (SSP_SSPITOP__SSPTXD__Shift((uint32_t)bf_value)));
    SSP_SSPITOP__SET(reg);
}

/** SSP_SSPITOP__SSPTXD__GET() gets SSPITOP.SSPTXD's current value.
 *
 * When reading from SSPITOP.SSPTXD, this is recommended to use.
 *
 * @return current value of SSPITOP.SSPTXD
 */
__SSP_INLINE uint32_t SSP_SSPITOP__SSPTXD__GET(void)
{
    uint32_t reg = SSP_SSPITOP__GET();
    reg = (reg & SSP_SSPITOP__SSPTXD__Msk);
    reg = (reg >> SSP_SSPITOP__SSPTXD__Pos);
    return (uint32_t)reg;
}

/** SSP_SSPITOP__SSPTXD__MODIFY() modifies SSPITOP.SSPTXD.
 *
 * This is recommended to use when setting more than one bitfield of SSP.SSPITOP.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of SSP.SSPITOP
 * @param bf_value new value for SSPITOP.SSPTXD
 * @return new value of SSP.SSPITOP
 */
__SSP_INLINE uint32_t SSP_SSPITOP__SSPTXD__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~SSP_SSPITOP__SSPTXD__Msk);
    reg = (reg | (SSP_SSPITOP__SSPTXD__Shift((uint32_t)bf_value)));
    return reg;
}

/** SSP_SSPITOP__SSPTXD__EXTRACT() extracts SSPITOP.SSPTXD.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPITOP.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPITOP
 * @return current value of SSPITOP.SSPTXD
 */
__SSP_INLINE uint32_t SSP_SSPITOP__SSPTXD__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPITOP__SSPTXD__Msk);
    reg = (reg >> SSP_SSPITOP__SSPTXD__Pos);
    return (uint32_t)reg;
}

/* -------------------------------------------------------------------------- */
/*                           SSPTDR member of SSP_t                           */
/* -------------------------------------------------------------------------- */

/** __SSP_SSPTDR__ADDRESS returns the address of member SSPTDR.
 *
 * As indicated by the __ prefix, this is not intended for use by the FW. It is
 * here for readability only.
 *
 * @return address of SSPTDR
 */
__SSP_INLINE uint32_t* __SSP_SSPTDR__ADDRESS(void)
{
    return (uint32_t*)((uint32_t)__SSP_BASE_PTR() + (uint32_t)(offsetof(SSP_t, SSPTDR)));
}

/** SSP_SSPTDR__SET() sets SSPTDR to given value.
 *
 * When writing to SSPTDR, this is mandatory to use.
 *
 * @param value new value for SSPTDR
 */
__SSP_INLINE void SSP_SSPTDR__SET(uint32_t value)
{
    HAL_SET32(__SSP_SSPTDR__ADDRESS(), value);
}

/** SSP_SSPTDR__SETW1() sets word 1 of SSPTDR to given value.
 *
 * When writing to word 1 of SSPTDR, this is mandatory to use.
 *
 * @param value new value for word 1 of SSPTDR
 */
__SSP_INLINE void SSP_SSPTDR__SETW1(uint16_t value)
{
    HAL_SET16(((uint16_t*)__SSP_SSPTDR__ADDRESS()) + 1, value);
}

/** SSP_SSPTDR__SETW0() sets word 0 of SSPTDR to given value.
 *
 * When writing to word 0 of SSPTDR, this is mandatory to use.
 *
 * @param value new value for word 0 of SSPTDR
 */
__SSP_INLINE void SSP_SSPTDR__SETW0(uint16_t value)
{
    HAL_SET16(((uint16_t*)__SSP_SSPTDR__ADDRESS()) + 0, value);
}

/** SSP_SSPTDR__GET() gets SSPTDR's current value.
 *
 * When reading from SSPTDR, this is mandatory to use.
 *
 * @return current value of SSPTDR
 */
__SSP_INLINE uint32_t SSP_SSPTDR__GET(void)
{
    return HAL_GET32(__SSP_SSPTDR__ADDRESS());
}

/** SSP_SSPTDR__GETW1() gets word 1 of SSPTDR's current value.
 *
 * When reading from word 1 of SSPTDR, this is mandatory to use.
 *
 * @return current value of word 1 of SSPTDR
 */
__SSP_INLINE uint16_t SSP_SSPTDR__GETW1(void)
{
    return HAL_GET16(((uint16_t*)__SSP_SSPTDR__ADDRESS()) + 1);
}

/** SSP_SSPTDR__GETW0() gets word 0 of SSPTDR's current value.
 *
 * When reading from word 0 of SSPTDR, this is mandatory to use.
 *
 * @return current value of word 0 of SSPTDR
 */
__SSP_INLINE uint16_t SSP_SSPTDR__GETW0(void)
{
    return HAL_GET16(((uint16_t*)__SSP_SSPTDR__ADDRESS()) + 0);
}

/* ----------------------------- SSP.SSPTDR.RES ----------------------------- */

/**
<pre>
  SSP.SSPTDR.RES:

    Reserved, unpredictable when read.

</pre> */

#define SSP_SSPTDR__RES__Pos                                    16                                                                     /*!< Right-most bit position of RES in SSP.SSPTDR */
#define SSP_SSPTDR__RES__Msk                                    (0x0000FFFFUL << SSP_SSPTDR__RES__Pos)                                 /*!< Mask for RES in SSP.SSPTDR */
#define SSP_SSPTDR__RES__Shift(v)                               (((v) << SSP_SSPTDR__RES__Pos) & SSP_SSPTDR__RES__Msk)                 /*!< Shift value 'v' into RES and mask 'v' to fit it into RES field */

/** SSP_SSPTDR__RES__GET() gets SSPTDR.RES's current value.
 *
 * When reading from SSPTDR.RES, this is recommended to use.
 *
 * @return current value of SSPTDR.RES
 */
__SSP_INLINE uint32_t SSP_SSPTDR__RES__GET(void)
{
    uint16_t reg = SSP_SSPTDR__GETW1();
    reg = (reg & (uint16_t)0xFFFF);
    return (uint32_t)reg;
}

/** SSP_SSPTDR__RES__EXTRACT() extracts SSPTDR.RES.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPTDR.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPTDR
 * @return current value of SSPTDR.RES
 */
__SSP_INLINE uint32_t SSP_SSPTDR__RES__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPTDR__RES__Msk);
    reg = (reg >> SSP_SSPTDR__RES__Pos);
    return (uint32_t)reg;
}

/* ---------------------------- SSP.SSPTDR.DATA ---------------------------- */

/**
<pre>
  SSP.SSPTDR.DATA:

    Test Data

</pre> */

#define SSP_SSPTDR__DATA__Pos                                   0                                                                      /*!< Right-most bit position of DATA in SSP.SSPTDR */
#define SSP_SSPTDR__DATA__Msk                                   (0x0000FFFFUL << SSP_SSPTDR__DATA__Pos)                                /*!< Mask for DATA in SSP.SSPTDR */
#define SSP_SSPTDR__DATA__Shift(v)                              (((v) << SSP_SSPTDR__DATA__Pos) & SSP_SSPTDR__DATA__Msk)               /*!< Shift value 'v' into DATA and mask 'v' to fit it into DATA field */

/** SSP_SSPTDR__DATA__SET() sets SSPTDR.DATA to given value.
 *
 * When writing to SSPTDR.DATA, this is recommended to use.
 *
 * @param bf_value new value for SSPTDR.DATA
 */
__SSP_INLINE void SSP_SSPTDR__DATA__SET(uint32_t bf_value)
{
    uint16_t reg = (uint16_t)bf_value & (uint16_t)0xFFFF;
    SSP_SSPTDR__SETW0(reg);
}

/** SSP_SSPTDR__DATA__GET() gets SSPTDR.DATA's current value.
 *
 * When reading from SSPTDR.DATA, this is recommended to use.
 *
 * @return current value of SSPTDR.DATA
 */
__SSP_INLINE uint32_t SSP_SSPTDR__DATA__GET(void)
{
    uint16_t reg = SSP_SSPTDR__GETW0();
    reg = (reg & (uint16_t)0xFFFF);
    return (uint32_t)reg;
}

/** SSP_SSPTDR__DATA__MODIFY() modifies SSPTDR.DATA.
 *
 * This is recommended to use when setting more than one bitfield of SSP.SSPTDR.
 * Multiple subsequent xxx__MODIFY inlines are aggregated into one
 * by the compiler's optimization stage.
 *
 * @param reg current value of SSP.SSPTDR
 * @param bf_value new value for SSPTDR.DATA
 * @return new value of SSP.SSPTDR
 */
__SSP_INLINE uint32_t SSP_SSPTDR__DATA__MODIFY(uint32_t reg, uint32_t bf_value)
{
    reg = (reg & ~SSP_SSPTDR__DATA__Msk);
    reg = (reg | (SSP_SSPTDR__DATA__Shift((uint32_t)bf_value)));
    return reg;
}

/** SSP_SSPTDR__DATA__EXTRACT() extracts SSPTDR.DATA.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPTDR.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPTDR
 * @return current value of SSPTDR.DATA
 */
__SSP_INLINE uint32_t SSP_SSPTDR__DATA__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPTDR__DATA__Msk);
    reg = (reg >> SSP_SSPTDR__DATA__Pos);
    return (uint32_t)reg;
}

/* -------------------------------------------------------------------------- */
/*                        SSPPERIPHID0 member of SSP_t                        */
/* -------------------------------------------------------------------------- */

/** __SSP_SSPPERIPHID0__ADDRESS returns the address of member SSPPERIPHID0.
 *
 * As indicated by the __ prefix, this is not intended for use by the FW. It is
 * here for readability only.
 *
 * @return address of SSPPERIPHID0
 */
__SSP_INLINE uint32_t* __SSP_SSPPERIPHID0__ADDRESS(void)
{
    return (uint32_t*)((uint32_t)__SSP_BASE_PTR() + (uint32_t)(offsetof(SSP_t, SSPPERIPHID0)));
}

/** SSP_SSPPERIPHID0__GET() gets SSPPERIPHID0's current value.
 *
 * When reading from SSPPERIPHID0, this is mandatory to use.
 *
 * @return current value of SSPPERIPHID0
 */
__SSP_INLINE uint32_t SSP_SSPPERIPHID0__GET(void)
{
    return HAL_GET32(__SSP_SSPPERIPHID0__ADDRESS());
}

/** SSP_SSPPERIPHID0__GETB0() gets byte 0 of SSPPERIPHID0's current value.
 *
 * When reading from byte 0 of SSPPERIPHID0, this is mandatory to use.
 *
 * @return current value of byte 0 of SSPPERIPHID0
 */
__SSP_INLINE uint8_t SSP_SSPPERIPHID0__GETB0(void)
{
    return HAL_GET8(((uint8_t*)__SSP_SSPPERIPHID0__ADDRESS()) + 0);
}

/* -------------------------- SSP.SSPPERIPHID0.RES -------------------------- */

/**
<pre>
  SSP.SSPPERIPHID0.RES:

    Reserved, read undefined, must read as zeros.

</pre> */

#define SSP_SSPPERIPHID0__RES__Pos                              8                                                                      /*!< Right-most bit position of RES in SSP.SSPPERIPHID0 */
#define SSP_SSPPERIPHID0__RES__Msk                              (0x00FFFFFFUL << SSP_SSPPERIPHID0__RES__Pos)                           /*!< Mask for RES in SSP.SSPPERIPHID0 */
#define SSP_SSPPERIPHID0__RES__Shift(v)                         (((v) << SSP_SSPPERIPHID0__RES__Pos) & SSP_SSPPERIPHID0__RES__Msk)     /*!< Shift value 'v' into RES and mask 'v' to fit it into RES field */

/** SSP_SSPPERIPHID0__RES__GET() gets SSPPERIPHID0.RES's current value.
 *
 * When reading from SSPPERIPHID0.RES, this is recommended to use.
 *
 * @return current value of SSPPERIPHID0.RES
 */
__SSP_INLINE uint32_t SSP_SSPPERIPHID0__RES__GET(void)
{
    uint32_t reg = SSP_SSPPERIPHID0__GET();
    reg = (reg & SSP_SSPPERIPHID0__RES__Msk);
    reg = (reg >> SSP_SSPPERIPHID0__RES__Pos);
    return (uint32_t)reg;
}

/** SSP_SSPPERIPHID0__RES__EXTRACT() extracts SSPPERIPHID0.RES.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPPERIPHID0.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPPERIPHID0
 * @return current value of SSPPERIPHID0.RES
 */
__SSP_INLINE uint32_t SSP_SSPPERIPHID0__RES__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPPERIPHID0__RES__Msk);
    reg = (reg >> SSP_SSPPERIPHID0__RES__Pos);
    return (uint32_t)reg;
}

/* ---------------------- SSP.SSPPERIPHID0.PARTNUMBER0 ---------------------- */

/**
<pre>
  SSP.SSPPERIPHID0.PARTNUMBER0:

    Part Number 0

</pre> */

#define SSP_SSPPERIPHID0__PARTNUMBER0__Pos                      0                                                                      /*!< Right-most bit position of PartNumber0 in SSP.SSPPERIPHID0 */
#define SSP_SSPPERIPHID0__PARTNUMBER0__Msk                      (0x000000FFUL << SSP_SSPPERIPHID0__PARTNUMBER0__Pos)                   /*!< Mask for PartNumber0 in SSP.SSPPERIPHID0 */
#define SSP_SSPPERIPHID0__PARTNUMBER0__Shift(v)                 (((v) << SSP_SSPPERIPHID0__PARTNUMBER0__Pos) & SSP_SSPPERIPHID0__PARTNUMBER0__Msk) /*!< Shift value 'v' into PartNumber0 and mask 'v' to fit it into PartNumber0 field */

/** SSP_SSPPERIPHID0__PARTNUMBER0__GET() gets SSPPERIPHID0.PARTNUMBER0's current value.
 *
 * When reading from SSPPERIPHID0.PARTNUMBER0, this is recommended to use.
 *
 * @return current value of SSPPERIPHID0.PARTNUMBER0
 */
__SSP_INLINE uint32_t SSP_SSPPERIPHID0__PARTNUMBER0__GET(void)
{
    uint8_t reg = SSP_SSPPERIPHID0__GETB0();
    reg = (reg & (uint8_t)0xFF);
    return (uint32_t)reg;
}

/** SSP_SSPPERIPHID0__PARTNUMBER0__EXTRACT() extracts SSPPERIPHID0.PARTNUMBER0.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPPERIPHID0.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPPERIPHID0
 * @return current value of SSPPERIPHID0.PARTNUMBER0
 */
__SSP_INLINE uint32_t SSP_SSPPERIPHID0__PARTNUMBER0__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPPERIPHID0__PARTNUMBER0__Msk);
    reg = (reg >> SSP_SSPPERIPHID0__PARTNUMBER0__Pos);
    return (uint32_t)reg;
}

/* -------------------------------------------------------------------------- */
/*                        SSPPERIPHID1 member of SSP_t                        */
/* -------------------------------------------------------------------------- */

/** __SSP_SSPPERIPHID1__ADDRESS returns the address of member SSPPERIPHID1.
 *
 * As indicated by the __ prefix, this is not intended for use by the FW. It is
 * here for readability only.
 *
 * @return address of SSPPERIPHID1
 */
__SSP_INLINE uint32_t* __SSP_SSPPERIPHID1__ADDRESS(void)
{
    return (uint32_t*)((uint32_t)__SSP_BASE_PTR() + (uint32_t)(offsetof(SSP_t, SSPPERIPHID1)));
}

/** SSP_SSPPERIPHID1__GET() gets SSPPERIPHID1's current value.
 *
 * When reading from SSPPERIPHID1, this is mandatory to use.
 *
 * @return current value of SSPPERIPHID1
 */
__SSP_INLINE uint32_t SSP_SSPPERIPHID1__GET(void)
{
    return HAL_GET32(__SSP_SSPPERIPHID1__ADDRESS());
}

/* -------------------------- SSP.SSPPERIPHID1.RES -------------------------- */

/**
<pre>
  SSP.SSPPERIPHID1.RES:

    Reserved, read undefined, must read as zeros.

</pre> */

#define SSP_SSPPERIPHID1__RES__Pos                              8                                                                      /*!< Right-most bit position of RES in SSP.SSPPERIPHID1 */
#define SSP_SSPPERIPHID1__RES__Msk                              (0x00FFFFFFUL << SSP_SSPPERIPHID1__RES__Pos)                           /*!< Mask for RES in SSP.SSPPERIPHID1 */
#define SSP_SSPPERIPHID1__RES__Shift(v)                         (((v) << SSP_SSPPERIPHID1__RES__Pos) & SSP_SSPPERIPHID1__RES__Msk)     /*!< Shift value 'v' into RES and mask 'v' to fit it into RES field */

/** SSP_SSPPERIPHID1__RES__GET() gets SSPPERIPHID1.RES's current value.
 *
 * When reading from SSPPERIPHID1.RES, this is recommended to use.
 *
 * @return current value of SSPPERIPHID1.RES
 */
__SSP_INLINE uint32_t SSP_SSPPERIPHID1__RES__GET(void)
{
    uint32_t reg = SSP_SSPPERIPHID1__GET();
    reg = (reg & SSP_SSPPERIPHID1__RES__Msk);
    reg = (reg >> SSP_SSPPERIPHID1__RES__Pos);
    return (uint32_t)reg;
}

/** SSP_SSPPERIPHID1__RES__EXTRACT() extracts SSPPERIPHID1.RES.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPPERIPHID1.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPPERIPHID1
 * @return current value of SSPPERIPHID1.RES
 */
__SSP_INLINE uint32_t SSP_SSPPERIPHID1__RES__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPPERIPHID1__RES__Msk);
    reg = (reg >> SSP_SSPPERIPHID1__RES__Pos);
    return (uint32_t)reg;
}

/* ----------------------- SSP.SSPPERIPHID1.DESIGNER0 ----------------------- */

/**
<pre>
  SSP.SSPPERIPHID1.DESIGNER0:

    Designer Number 0

</pre> */

#define SSP_SSPPERIPHID1__DESIGNER0__Pos                        4                                                                      /*!< Right-most bit position of Designer0 in SSP.SSPPERIPHID1 */
#define SSP_SSPPERIPHID1__DESIGNER0__Msk                        (0x0000000FUL << SSP_SSPPERIPHID1__DESIGNER0__Pos)                     /*!< Mask for Designer0 in SSP.SSPPERIPHID1 */
#define SSP_SSPPERIPHID1__DESIGNER0__Shift(v)                   (((v) << SSP_SSPPERIPHID1__DESIGNER0__Pos) & SSP_SSPPERIPHID1__DESIGNER0__Msk) /*!< Shift value 'v' into Designer0 and mask 'v' to fit it into Designer0 field */

/** SSP_SSPPERIPHID1__DESIGNER0__GET() gets SSPPERIPHID1.DESIGNER0's current value.
 *
 * When reading from SSPPERIPHID1.DESIGNER0, this is recommended to use.
 *
 * @return current value of SSPPERIPHID1.DESIGNER0
 */
__SSP_INLINE uint32_t SSP_SSPPERIPHID1__DESIGNER0__GET(void)
{
    uint32_t reg = SSP_SSPPERIPHID1__GET();
    reg = (reg & SSP_SSPPERIPHID1__DESIGNER0__Msk);
    reg = (reg >> SSP_SSPPERIPHID1__DESIGNER0__Pos);
    return (uint32_t)reg;
}

/** SSP_SSPPERIPHID1__DESIGNER0__EXTRACT() extracts SSPPERIPHID1.DESIGNER0.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPPERIPHID1.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPPERIPHID1
 * @return current value of SSPPERIPHID1.DESIGNER0
 */
__SSP_INLINE uint32_t SSP_SSPPERIPHID1__DESIGNER0__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPPERIPHID1__DESIGNER0__Msk);
    reg = (reg >> SSP_SSPPERIPHID1__DESIGNER0__Pos);
    return (uint32_t)reg;
}

/* ---------------------- SSP.SSPPERIPHID1.PARTNUMBER1 ---------------------- */

/**
<pre>
  SSP.SSPPERIPHID1.PARTNUMBER1:

    Part Number 1

</pre> */

#define SSP_SSPPERIPHID1__PARTNUMBER1__Pos                      0                                                                      /*!< Right-most bit position of PartNumber1 in SSP.SSPPERIPHID1 */
#define SSP_SSPPERIPHID1__PARTNUMBER1__Msk                      (0x0000000FUL << SSP_SSPPERIPHID1__PARTNUMBER1__Pos)                   /*!< Mask for PartNumber1 in SSP.SSPPERIPHID1 */
#define SSP_SSPPERIPHID1__PARTNUMBER1__Shift(v)                 (((v) << SSP_SSPPERIPHID1__PARTNUMBER1__Pos) & SSP_SSPPERIPHID1__PARTNUMBER1__Msk) /*!< Shift value 'v' into PartNumber1 and mask 'v' to fit it into PartNumber1 field */

/** SSP_SSPPERIPHID1__PARTNUMBER1__GET() gets SSPPERIPHID1.PARTNUMBER1's current value.
 *
 * When reading from SSPPERIPHID1.PARTNUMBER1, this is recommended to use.
 *
 * @return current value of SSPPERIPHID1.PARTNUMBER1
 */
__SSP_INLINE uint32_t SSP_SSPPERIPHID1__PARTNUMBER1__GET(void)
{
    uint32_t reg = SSP_SSPPERIPHID1__GET();
    reg = (reg & SSP_SSPPERIPHID1__PARTNUMBER1__Msk);
    reg = (reg >> SSP_SSPPERIPHID1__PARTNUMBER1__Pos);
    return (uint32_t)reg;
}

/** SSP_SSPPERIPHID1__PARTNUMBER1__EXTRACT() extracts SSPPERIPHID1.PARTNUMBER1.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPPERIPHID1.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPPERIPHID1
 * @return current value of SSPPERIPHID1.PARTNUMBER1
 */
__SSP_INLINE uint32_t SSP_SSPPERIPHID1__PARTNUMBER1__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPPERIPHID1__PARTNUMBER1__Msk);
    reg = (reg >> SSP_SSPPERIPHID1__PARTNUMBER1__Pos);
    return (uint32_t)reg;
}

/* -------------------------------------------------------------------------- */
/*                        SSPPERIPHID2 member of SSP_t                        */
/* -------------------------------------------------------------------------- */

/** __SSP_SSPPERIPHID2__ADDRESS returns the address of member SSPPERIPHID2.
 *
 * As indicated by the __ prefix, this is not intended for use by the FW. It is
 * here for readability only.
 *
 * @return address of SSPPERIPHID2
 */
__SSP_INLINE uint32_t* __SSP_SSPPERIPHID2__ADDRESS(void)
{
    return (uint32_t*)((uint32_t)__SSP_BASE_PTR() + (uint32_t)(offsetof(SSP_t, SSPPERIPHID2)));
}

/** SSP_SSPPERIPHID2__GET() gets SSPPERIPHID2's current value.
 *
 * When reading from SSPPERIPHID2, this is mandatory to use.
 *
 * @return current value of SSPPERIPHID2
 */
__SSP_INLINE uint32_t SSP_SSPPERIPHID2__GET(void)
{
    return HAL_GET32(__SSP_SSPPERIPHID2__ADDRESS());
}

/* -------------------------- SSP.SSPPERIPHID2.RES -------------------------- */

/**
<pre>
  SSP.SSPPERIPHID2.RES:

    Reserved, read undefined, must read as zeros.

</pre> */

#define SSP_SSPPERIPHID2__RES__Pos                              8                                                                      /*!< Right-most bit position of RES in SSP.SSPPERIPHID2 */
#define SSP_SSPPERIPHID2__RES__Msk                              (0x00FFFFFFUL << SSP_SSPPERIPHID2__RES__Pos)                           /*!< Mask for RES in SSP.SSPPERIPHID2 */
#define SSP_SSPPERIPHID2__RES__Shift(v)                         (((v) << SSP_SSPPERIPHID2__RES__Pos) & SSP_SSPPERIPHID2__RES__Msk)     /*!< Shift value 'v' into RES and mask 'v' to fit it into RES field */

/** SSP_SSPPERIPHID2__RES__GET() gets SSPPERIPHID2.RES's current value.
 *
 * When reading from SSPPERIPHID2.RES, this is recommended to use.
 *
 * @return current value of SSPPERIPHID2.RES
 */
__SSP_INLINE uint32_t SSP_SSPPERIPHID2__RES__GET(void)
{
    uint32_t reg = SSP_SSPPERIPHID2__GET();
    reg = (reg & SSP_SSPPERIPHID2__RES__Msk);
    reg = (reg >> SSP_SSPPERIPHID2__RES__Pos);
    return (uint32_t)reg;
}

/** SSP_SSPPERIPHID2__RES__EXTRACT() extracts SSPPERIPHID2.RES.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPPERIPHID2.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPPERIPHID2
 * @return current value of SSPPERIPHID2.RES
 */
__SSP_INLINE uint32_t SSP_SSPPERIPHID2__RES__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPPERIPHID2__RES__Msk);
    reg = (reg >> SSP_SSPPERIPHID2__RES__Pos);
    return (uint32_t)reg;
}

/* ----------------------- SSP.SSPPERIPHID2.REVISION ----------------------- */

/**
<pre>
  SSP.SSPPERIPHID2.REVISION:

    Revision Number

</pre> */

#define SSP_SSPPERIPHID2__REVISION__Pos                         4                                                                      /*!< Right-most bit position of Revision in SSP.SSPPERIPHID2 */
#define SSP_SSPPERIPHID2__REVISION__Msk                         (0x0000000FUL << SSP_SSPPERIPHID2__REVISION__Pos)                      /*!< Mask for Revision in SSP.SSPPERIPHID2 */
#define SSP_SSPPERIPHID2__REVISION__Shift(v)                    (((v) << SSP_SSPPERIPHID2__REVISION__Pos) & SSP_SSPPERIPHID2__REVISION__Msk) /*!< Shift value 'v' into Revision and mask 'v' to fit it into Revision field */

/** SSP_SSPPERIPHID2__REVISION__GET() gets SSPPERIPHID2.REVISION's current value.
 *
 * When reading from SSPPERIPHID2.REVISION, this is recommended to use.
 *
 * @return current value of SSPPERIPHID2.REVISION
 */
__SSP_INLINE uint32_t SSP_SSPPERIPHID2__REVISION__GET(void)
{
    uint32_t reg = SSP_SSPPERIPHID2__GET();
    reg = (reg & SSP_SSPPERIPHID2__REVISION__Msk);
    reg = (reg >> SSP_SSPPERIPHID2__REVISION__Pos);
    return (uint32_t)reg;
}

/** SSP_SSPPERIPHID2__REVISION__EXTRACT() extracts SSPPERIPHID2.REVISION.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPPERIPHID2.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPPERIPHID2
 * @return current value of SSPPERIPHID2.REVISION
 */
__SSP_INLINE uint32_t SSP_SSPPERIPHID2__REVISION__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPPERIPHID2__REVISION__Msk);
    reg = (reg >> SSP_SSPPERIPHID2__REVISION__Pos);
    return (uint32_t)reg;
}

/* ----------------------- SSP.SSPPERIPHID2.DESIGNER1 ----------------------- */

/**
<pre>
  SSP.SSPPERIPHID2.DESIGNER1:

    Designer Number 1

</pre> */

#define SSP_SSPPERIPHID2__DESIGNER1__Pos                        0                                                                      /*!< Right-most bit position of Designer1 in SSP.SSPPERIPHID2 */
#define SSP_SSPPERIPHID2__DESIGNER1__Msk                        (0x0000000FUL << SSP_SSPPERIPHID2__DESIGNER1__Pos)                     /*!< Mask for Designer1 in SSP.SSPPERIPHID2 */
#define SSP_SSPPERIPHID2__DESIGNER1__Shift(v)                   (((v) << SSP_SSPPERIPHID2__DESIGNER1__Pos) & SSP_SSPPERIPHID2__DESIGNER1__Msk) /*!< Shift value 'v' into Designer1 and mask 'v' to fit it into Designer1 field */

/** SSP_SSPPERIPHID2__DESIGNER1__GET() gets SSPPERIPHID2.DESIGNER1's current value.
 *
 * When reading from SSPPERIPHID2.DESIGNER1, this is recommended to use.
 *
 * @return current value of SSPPERIPHID2.DESIGNER1
 */
__SSP_INLINE uint32_t SSP_SSPPERIPHID2__DESIGNER1__GET(void)
{
    uint32_t reg = SSP_SSPPERIPHID2__GET();
    reg = (reg & SSP_SSPPERIPHID2__DESIGNER1__Msk);
    reg = (reg >> SSP_SSPPERIPHID2__DESIGNER1__Pos);
    return (uint32_t)reg;
}

/** SSP_SSPPERIPHID2__DESIGNER1__EXTRACT() extracts SSPPERIPHID2.DESIGNER1.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPPERIPHID2.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPPERIPHID2
 * @return current value of SSPPERIPHID2.DESIGNER1
 */
__SSP_INLINE uint32_t SSP_SSPPERIPHID2__DESIGNER1__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPPERIPHID2__DESIGNER1__Msk);
    reg = (reg >> SSP_SSPPERIPHID2__DESIGNER1__Pos);
    return (uint32_t)reg;
}

/* -------------------------------------------------------------------------- */
/*                        SSPPERIPHID3 member of SSP_t                        */
/* -------------------------------------------------------------------------- */

/** __SSP_SSPPERIPHID3__ADDRESS returns the address of member SSPPERIPHID3.
 *
 * As indicated by the __ prefix, this is not intended for use by the FW. It is
 * here for readability only.
 *
 * @return address of SSPPERIPHID3
 */
__SSP_INLINE uint32_t* __SSP_SSPPERIPHID3__ADDRESS(void)
{
    return (uint32_t*)((uint32_t)__SSP_BASE_PTR() + (uint32_t)(offsetof(SSP_t, SSPPERIPHID3)));
}

/** SSP_SSPPERIPHID3__GET() gets SSPPERIPHID3's current value.
 *
 * When reading from SSPPERIPHID3, this is mandatory to use.
 *
 * @return current value of SSPPERIPHID3
 */
__SSP_INLINE uint32_t SSP_SSPPERIPHID3__GET(void)
{
    return HAL_GET32(__SSP_SSPPERIPHID3__ADDRESS());
}

/** SSP_SSPPERIPHID3__GETB0() gets byte 0 of SSPPERIPHID3's current value.
 *
 * When reading from byte 0 of SSPPERIPHID3, this is mandatory to use.
 *
 * @return current value of byte 0 of SSPPERIPHID3
 */
__SSP_INLINE uint8_t SSP_SSPPERIPHID3__GETB0(void)
{
    return HAL_GET8(((uint8_t*)__SSP_SSPPERIPHID3__ADDRESS()) + 0);
}

/* -------------------------- SSP.SSPPERIPHID3.RES -------------------------- */

/**
<pre>
  SSP.SSPPERIPHID3.RES:

    Reserved, read undefined, must read as zeros.

</pre> */

#define SSP_SSPPERIPHID3__RES__Pos                              8                                                                      /*!< Right-most bit position of RES in SSP.SSPPERIPHID3 */
#define SSP_SSPPERIPHID3__RES__Msk                              (0x00FFFFFFUL << SSP_SSPPERIPHID3__RES__Pos)                           /*!< Mask for RES in SSP.SSPPERIPHID3 */
#define SSP_SSPPERIPHID3__RES__Shift(v)                         (((v) << SSP_SSPPERIPHID3__RES__Pos) & SSP_SSPPERIPHID3__RES__Msk)     /*!< Shift value 'v' into RES and mask 'v' to fit it into RES field */

/** SSP_SSPPERIPHID3__RES__GET() gets SSPPERIPHID3.RES's current value.
 *
 * When reading from SSPPERIPHID3.RES, this is recommended to use.
 *
 * @return current value of SSPPERIPHID3.RES
 */
__SSP_INLINE uint32_t SSP_SSPPERIPHID3__RES__GET(void)
{
    uint32_t reg = SSP_SSPPERIPHID3__GET();
    reg = (reg & SSP_SSPPERIPHID3__RES__Msk);
    reg = (reg >> SSP_SSPPERIPHID3__RES__Pos);
    return (uint32_t)reg;
}

/** SSP_SSPPERIPHID3__RES__EXTRACT() extracts SSPPERIPHID3.RES.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPPERIPHID3.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPPERIPHID3
 * @return current value of SSPPERIPHID3.RES
 */
__SSP_INLINE uint32_t SSP_SSPPERIPHID3__RES__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPPERIPHID3__RES__Msk);
    reg = (reg >> SSP_SSPPERIPHID3__RES__Pos);
    return (uint32_t)reg;
}

/* --------------------- SSP.SSPPERIPHID3.CONFIGURATION --------------------- */

/**
<pre>
  SSP.SSPPERIPHID3.CONFIGURATION:

    Configuration Number

</pre> */

#define SSP_SSPPERIPHID3__CONFIGURATION__Pos                    0                                                                      /*!< Right-most bit position of Configuration in SSP.SSPPERIPHID3 */
#define SSP_SSPPERIPHID3__CONFIGURATION__Msk                    (0x000000FFUL << SSP_SSPPERIPHID3__CONFIGURATION__Pos)                 /*!< Mask for Configuration in SSP.SSPPERIPHID3 */
#define SSP_SSPPERIPHID3__CONFIGURATION__Shift(v)               (((v) << SSP_SSPPERIPHID3__CONFIGURATION__Pos) & SSP_SSPPERIPHID3__CONFIGURATION__Msk) /*!< Shift value 'v' into Configuration and mask 'v' to fit it into Configuration field */

/** SSP_SSPPERIPHID3__CONFIGURATION__GET() gets SSPPERIPHID3.CONFIGURATION's current value.
 *
 * When reading from SSPPERIPHID3.CONFIGURATION, this is recommended to use.
 *
 * @return current value of SSPPERIPHID3.CONFIGURATION
 */
__SSP_INLINE uint32_t SSP_SSPPERIPHID3__CONFIGURATION__GET(void)
{
    uint8_t reg = SSP_SSPPERIPHID3__GETB0();
    reg = (reg & (uint8_t)0xFF);
    return (uint32_t)reg;
}

/** SSP_SSPPERIPHID3__CONFIGURATION__EXTRACT() extracts SSPPERIPHID3.CONFIGURATION.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPPERIPHID3.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPPERIPHID3
 * @return current value of SSPPERIPHID3.CONFIGURATION
 */
__SSP_INLINE uint32_t SSP_SSPPERIPHID3__CONFIGURATION__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPPERIPHID3__CONFIGURATION__Msk);
    reg = (reg >> SSP_SSPPERIPHID3__CONFIGURATION__Pos);
    return (uint32_t)reg;
}

/* -------------------------------------------------------------------------- */
/*                        SSPPCELLID0 member of SSP_t                        */
/* -------------------------------------------------------------------------- */

/** __SSP_SSPPCELLID0__ADDRESS returns the address of member SSPPCELLID0.
 *
 * As indicated by the __ prefix, this is not intended for use by the FW. It is
 * here for readability only.
 *
 * @return address of SSPPCELLID0
 */
__SSP_INLINE uint32_t* __SSP_SSPPCELLID0__ADDRESS(void)
{
    return (uint32_t*)((uint32_t)__SSP_BASE_PTR() + (uint32_t)(offsetof(SSP_t, SSPPCELLID0)));
}

/** SSP_SSPPCELLID0__GET() gets SSPPCELLID0's current value.
 *
 * When reading from SSPPCELLID0, this is mandatory to use.
 *
 * @return current value of SSPPCELLID0
 */
__SSP_INLINE uint32_t SSP_SSPPCELLID0__GET(void)
{
    return HAL_GET32(__SSP_SSPPCELLID0__ADDRESS());
}

/** SSP_SSPPCELLID0__GETB0() gets byte 0 of SSPPCELLID0's current value.
 *
 * When reading from byte 0 of SSPPCELLID0, this is mandatory to use.
 *
 * @return current value of byte 0 of SSPPCELLID0
 */
__SSP_INLINE uint8_t SSP_SSPPCELLID0__GETB0(void)
{
    return HAL_GET8(((uint8_t*)__SSP_SSPPCELLID0__ADDRESS()) + 0);
}

/* -------------------------- SSP.SSPPCELLID0.RES -------------------------- */

/**
<pre>
  SSP.SSPPCELLID0.RES:

    Reserved, read undefined, must read as zeros.

</pre> */

#define SSP_SSPPCELLID0__RES__Pos                               8                                                                      /*!< Right-most bit position of RES in SSP.SSPPCELLID0 */
#define SSP_SSPPCELLID0__RES__Msk                               (0x00FFFFFFUL << SSP_SSPPCELLID0__RES__Pos)                            /*!< Mask for RES in SSP.SSPPCELLID0 */
#define SSP_SSPPCELLID0__RES__Shift(v)                          (((v) << SSP_SSPPCELLID0__RES__Pos) & SSP_SSPPCELLID0__RES__Msk)       /*!< Shift value 'v' into RES and mask 'v' to fit it into RES field */

/** SSP_SSPPCELLID0__RES__GET() gets SSPPCELLID0.RES's current value.
 *
 * When reading from SSPPCELLID0.RES, this is recommended to use.
 *
 * @return current value of SSPPCELLID0.RES
 */
__SSP_INLINE uint32_t SSP_SSPPCELLID0__RES__GET(void)
{
    uint32_t reg = SSP_SSPPCELLID0__GET();
    reg = (reg & SSP_SSPPCELLID0__RES__Msk);
    reg = (reg >> SSP_SSPPCELLID0__RES__Pos);
    return (uint32_t)reg;
}

/** SSP_SSPPCELLID0__RES__EXTRACT() extracts SSPPCELLID0.RES.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPPCELLID0.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPPCELLID0
 * @return current value of SSPPCELLID0.RES
 */
__SSP_INLINE uint32_t SSP_SSPPCELLID0__RES__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPPCELLID0__RES__Msk);
    reg = (reg >> SSP_SSPPCELLID0__RES__Pos);
    return (uint32_t)reg;
}

/* ---------------------- SSP.SSPPCELLID0.SSPPCELLID0 ---------------------- */

/**
<pre>
  SSP.SSPPCELLID0.SSPPCELLID0:

    Cell Identification Number 0

</pre> */

#define SSP_SSPPCELLID0__SSPPCELLID0__Pos                       0                                                                      /*!< Right-most bit position of SSPPCellID0 in SSP.SSPPCELLID0 */
#define SSP_SSPPCELLID0__SSPPCELLID0__Msk                       (0x000000FFUL << SSP_SSPPCELLID0__SSPPCELLID0__Pos)                    /*!< Mask for SSPPCellID0 in SSP.SSPPCELLID0 */
#define SSP_SSPPCELLID0__SSPPCELLID0__Shift(v)                  (((v) << SSP_SSPPCELLID0__SSPPCELLID0__Pos) & SSP_SSPPCELLID0__SSPPCELLID0__Msk) /*!< Shift value 'v' into SSPPCellID0 and mask 'v' to fit it into SSPPCellID0 field */

/** SSP_SSPPCELLID0__SSPPCELLID0__GET() gets SSPPCELLID0.SSPPCELLID0's current value.
 *
 * When reading from SSPPCELLID0.SSPPCELLID0, this is recommended to use.
 *
 * @return current value of SSPPCELLID0.SSPPCELLID0
 */
__SSP_INLINE uint32_t SSP_SSPPCELLID0__SSPPCELLID0__GET(void)
{
    uint8_t reg = SSP_SSPPCELLID0__GETB0();
    reg = (reg & (uint8_t)0xFF);
    return (uint32_t)reg;
}

/** SSP_SSPPCELLID0__SSPPCELLID0__EXTRACT() extracts SSPPCELLID0.SSPPCELLID0.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPPCELLID0.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPPCELLID0
 * @return current value of SSPPCELLID0.SSPPCELLID0
 */
__SSP_INLINE uint32_t SSP_SSPPCELLID0__SSPPCELLID0__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPPCELLID0__SSPPCELLID0__Msk);
    reg = (reg >> SSP_SSPPCELLID0__SSPPCELLID0__Pos);
    return (uint32_t)reg;
}

/* -------------------------------------------------------------------------- */
/*                        SSPPCELLID1 member of SSP_t                        */
/* -------------------------------------------------------------------------- */

/** __SSP_SSPPCELLID1__ADDRESS returns the address of member SSPPCELLID1.
 *
 * As indicated by the __ prefix, this is not intended for use by the FW. It is
 * here for readability only.
 *
 * @return address of SSPPCELLID1
 */
__SSP_INLINE uint32_t* __SSP_SSPPCELLID1__ADDRESS(void)
{
    return (uint32_t*)((uint32_t)__SSP_BASE_PTR() + (uint32_t)(offsetof(SSP_t, SSPPCELLID1)));
}

/** SSP_SSPPCELLID1__GET() gets SSPPCELLID1's current value.
 *
 * When reading from SSPPCELLID1, this is mandatory to use.
 *
 * @return current value of SSPPCELLID1
 */
__SSP_INLINE uint32_t SSP_SSPPCELLID1__GET(void)
{
    return HAL_GET32(__SSP_SSPPCELLID1__ADDRESS());
}

/** SSP_SSPPCELLID1__GETB0() gets byte 0 of SSPPCELLID1's current value.
 *
 * When reading from byte 0 of SSPPCELLID1, this is mandatory to use.
 *
 * @return current value of byte 0 of SSPPCELLID1
 */
__SSP_INLINE uint8_t SSP_SSPPCELLID1__GETB0(void)
{
    return HAL_GET8(((uint8_t*)__SSP_SSPPCELLID1__ADDRESS()) + 0);
}

/* -------------------------- SSP.SSPPCELLID1.RES -------------------------- */

/**
<pre>
  SSP.SSPPCELLID1.RES:

    Reserved, read undefined, must read as zeros.

</pre> */

#define SSP_SSPPCELLID1__RES__Pos                               8                                                                      /*!< Right-most bit position of RES in SSP.SSPPCELLID1 */
#define SSP_SSPPCELLID1__RES__Msk                               (0x00FFFFFFUL << SSP_SSPPCELLID1__RES__Pos)                            /*!< Mask for RES in SSP.SSPPCELLID1 */
#define SSP_SSPPCELLID1__RES__Shift(v)                          (((v) << SSP_SSPPCELLID1__RES__Pos) & SSP_SSPPCELLID1__RES__Msk)       /*!< Shift value 'v' into RES and mask 'v' to fit it into RES field */

/** SSP_SSPPCELLID1__RES__GET() gets SSPPCELLID1.RES's current value.
 *
 * When reading from SSPPCELLID1.RES, this is recommended to use.
 *
 * @return current value of SSPPCELLID1.RES
 */
__SSP_INLINE uint32_t SSP_SSPPCELLID1__RES__GET(void)
{
    uint32_t reg = SSP_SSPPCELLID1__GET();
    reg = (reg & SSP_SSPPCELLID1__RES__Msk);
    reg = (reg >> SSP_SSPPCELLID1__RES__Pos);
    return (uint32_t)reg;
}

/** SSP_SSPPCELLID1__RES__EXTRACT() extracts SSPPCELLID1.RES.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPPCELLID1.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPPCELLID1
 * @return current value of SSPPCELLID1.RES
 */
__SSP_INLINE uint32_t SSP_SSPPCELLID1__RES__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPPCELLID1__RES__Msk);
    reg = (reg >> SSP_SSPPCELLID1__RES__Pos);
    return (uint32_t)reg;
}

/* ---------------------- SSP.SSPPCELLID1.SSPPCELLID1 ---------------------- */

/**
<pre>
  SSP.SSPPCELLID1.SSPPCELLID1:

    Cell Identification Number 1

</pre> */

#define SSP_SSPPCELLID1__SSPPCELLID1__Pos                       0                                                                      /*!< Right-most bit position of SSPPCellID1 in SSP.SSPPCELLID1 */
#define SSP_SSPPCELLID1__SSPPCELLID1__Msk                       (0x000000FFUL << SSP_SSPPCELLID1__SSPPCELLID1__Pos)                    /*!< Mask for SSPPCellID1 in SSP.SSPPCELLID1 */
#define SSP_SSPPCELLID1__SSPPCELLID1__Shift(v)                  (((v) << SSP_SSPPCELLID1__SSPPCELLID1__Pos) & SSP_SSPPCELLID1__SSPPCELLID1__Msk) /*!< Shift value 'v' into SSPPCellID1 and mask 'v' to fit it into SSPPCellID1 field */

/** SSP_SSPPCELLID1__SSPPCELLID1__GET() gets SSPPCELLID1.SSPPCELLID1's current value.
 *
 * When reading from SSPPCELLID1.SSPPCELLID1, this is recommended to use.
 *
 * @return current value of SSPPCELLID1.SSPPCELLID1
 */
__SSP_INLINE uint32_t SSP_SSPPCELLID1__SSPPCELLID1__GET(void)
{
    uint8_t reg = SSP_SSPPCELLID1__GETB0();
    reg = (reg & (uint8_t)0xFF);
    return (uint32_t)reg;
}

/** SSP_SSPPCELLID1__SSPPCELLID1__EXTRACT() extracts SSPPCELLID1.SSPPCELLID1.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPPCELLID1.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPPCELLID1
 * @return current value of SSPPCELLID1.SSPPCELLID1
 */
__SSP_INLINE uint32_t SSP_SSPPCELLID1__SSPPCELLID1__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPPCELLID1__SSPPCELLID1__Msk);
    reg = (reg >> SSP_SSPPCELLID1__SSPPCELLID1__Pos);
    return (uint32_t)reg;
}

/* -------------------------------------------------------------------------- */
/*                        SSPPCELLID2 member of SSP_t                        */
/* -------------------------------------------------------------------------- */

/** __SSP_SSPPCELLID2__ADDRESS returns the address of member SSPPCELLID2.
 *
 * As indicated by the __ prefix, this is not intended for use by the FW. It is
 * here for readability only.
 *
 * @return address of SSPPCELLID2
 */
__SSP_INLINE uint32_t* __SSP_SSPPCELLID2__ADDRESS(void)
{
    return (uint32_t*)((uint32_t)__SSP_BASE_PTR() + (uint32_t)(offsetof(SSP_t, SSPPCELLID2)));
}

/** SSP_SSPPCELLID2__GET() gets SSPPCELLID2's current value.
 *
 * When reading from SSPPCELLID2, this is mandatory to use.
 *
 * @return current value of SSPPCELLID2
 */
__SSP_INLINE uint32_t SSP_SSPPCELLID2__GET(void)
{
    return HAL_GET32(__SSP_SSPPCELLID2__ADDRESS());
}

/** SSP_SSPPCELLID2__GETB0() gets byte 0 of SSPPCELLID2's current value.
 *
 * When reading from byte 0 of SSPPCELLID2, this is mandatory to use.
 *
 * @return current value of byte 0 of SSPPCELLID2
 */
__SSP_INLINE uint8_t SSP_SSPPCELLID2__GETB0(void)
{
    return HAL_GET8(((uint8_t*)__SSP_SSPPCELLID2__ADDRESS()) + 0);
}

/* -------------------------- SSP.SSPPCELLID2.RES -------------------------- */

/**
<pre>
  SSP.SSPPCELLID2.RES:

    Reserved, read undefined, must read as zeros.

</pre> */

#define SSP_SSPPCELLID2__RES__Pos                               8                                                                      /*!< Right-most bit position of RES in SSP.SSPPCELLID2 */
#define SSP_SSPPCELLID2__RES__Msk                               (0x00FFFFFFUL << SSP_SSPPCELLID2__RES__Pos)                            /*!< Mask for RES in SSP.SSPPCELLID2 */
#define SSP_SSPPCELLID2__RES__Shift(v)                          (((v) << SSP_SSPPCELLID2__RES__Pos) & SSP_SSPPCELLID2__RES__Msk)       /*!< Shift value 'v' into RES and mask 'v' to fit it into RES field */

/** SSP_SSPPCELLID2__RES__GET() gets SSPPCELLID2.RES's current value.
 *
 * When reading from SSPPCELLID2.RES, this is recommended to use.
 *
 * @return current value of SSPPCELLID2.RES
 */
__SSP_INLINE uint32_t SSP_SSPPCELLID2__RES__GET(void)
{
    uint32_t reg = SSP_SSPPCELLID2__GET();
    reg = (reg & SSP_SSPPCELLID2__RES__Msk);
    reg = (reg >> SSP_SSPPCELLID2__RES__Pos);
    return (uint32_t)reg;
}

/** SSP_SSPPCELLID2__RES__EXTRACT() extracts SSPPCELLID2.RES.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPPCELLID2.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPPCELLID2
 * @return current value of SSPPCELLID2.RES
 */
__SSP_INLINE uint32_t SSP_SSPPCELLID2__RES__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPPCELLID2__RES__Msk);
    reg = (reg >> SSP_SSPPCELLID2__RES__Pos);
    return (uint32_t)reg;
}

/* ---------------------- SSP.SSPPCELLID2.SSPPCELLID2 ---------------------- */

/**
<pre>
  SSP.SSPPCELLID2.SSPPCELLID2:

    Cell Identification Number 2

</pre> */

#define SSP_SSPPCELLID2__SSPPCELLID2__Pos                       0                                                                      /*!< Right-most bit position of SSPPCellID2 in SSP.SSPPCELLID2 */
#define SSP_SSPPCELLID2__SSPPCELLID2__Msk                       (0x000000FFUL << SSP_SSPPCELLID2__SSPPCELLID2__Pos)                    /*!< Mask for SSPPCellID2 in SSP.SSPPCELLID2 */
#define SSP_SSPPCELLID2__SSPPCELLID2__Shift(v)                  (((v) << SSP_SSPPCELLID2__SSPPCELLID2__Pos) & SSP_SSPPCELLID2__SSPPCELLID2__Msk) /*!< Shift value 'v' into SSPPCellID2 and mask 'v' to fit it into SSPPCellID2 field */

/** SSP_SSPPCELLID2__SSPPCELLID2__GET() gets SSPPCELLID2.SSPPCELLID2's current value.
 *
 * When reading from SSPPCELLID2.SSPPCELLID2, this is recommended to use.
 *
 * @return current value of SSPPCELLID2.SSPPCELLID2
 */
__SSP_INLINE uint32_t SSP_SSPPCELLID2__SSPPCELLID2__GET(void)
{
    uint8_t reg = SSP_SSPPCELLID2__GETB0();
    reg = (reg & (uint8_t)0xFF);
    return (uint32_t)reg;
}

/** SSP_SSPPCELLID2__SSPPCELLID2__EXTRACT() extracts SSPPCELLID2.SSPPCELLID2.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPPCELLID2.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPPCELLID2
 * @return current value of SSPPCELLID2.SSPPCELLID2
 */
__SSP_INLINE uint32_t SSP_SSPPCELLID2__SSPPCELLID2__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPPCELLID2__SSPPCELLID2__Msk);
    reg = (reg >> SSP_SSPPCELLID2__SSPPCELLID2__Pos);
    return (uint32_t)reg;
}

/* -------------------------------------------------------------------------- */
/*                        SSPPCELLID3 member of SSP_t                        */
/* -------------------------------------------------------------------------- */

/** __SSP_SSPPCELLID3__ADDRESS returns the address of member SSPPCELLID3.
 *
 * As indicated by the __ prefix, this is not intended for use by the FW. It is
 * here for readability only.
 *
 * @return address of SSPPCELLID3
 */
__SSP_INLINE uint32_t* __SSP_SSPPCELLID3__ADDRESS(void)
{
    return (uint32_t*)((uint32_t)__SSP_BASE_PTR() + (uint32_t)(offsetof(SSP_t, SSPPCELLID3)));
}

/** SSP_SSPPCELLID3__GET() gets SSPPCELLID3's current value.
 *
 * When reading from SSPPCELLID3, this is mandatory to use.
 *
 * @return current value of SSPPCELLID3
 */
__SSP_INLINE uint32_t SSP_SSPPCELLID3__GET(void)
{
    return HAL_GET32(__SSP_SSPPCELLID3__ADDRESS());
}

/** SSP_SSPPCELLID3__GETB0() gets byte 0 of SSPPCELLID3's current value.
 *
 * When reading from byte 0 of SSPPCELLID3, this is mandatory to use.
 *
 * @return current value of byte 0 of SSPPCELLID3
 */
__SSP_INLINE uint8_t SSP_SSPPCELLID3__GETB0(void)
{
    return HAL_GET8(((uint8_t*)__SSP_SSPPCELLID3__ADDRESS()) + 0);
}

/* -------------------------- SSP.SSPPCELLID3.RES -------------------------- */

/**
<pre>
  SSP.SSPPCELLID3.RES:

    Reserved, read undefined, must read as zeros.

</pre> */

#define SSP_SSPPCELLID3__RES__Pos                               8                                                                      /*!< Right-most bit position of RES in SSP.SSPPCELLID3 */
#define SSP_SSPPCELLID3__RES__Msk                               (0x00FFFFFFUL << SSP_SSPPCELLID3__RES__Pos)                            /*!< Mask for RES in SSP.SSPPCELLID3 */
#define SSP_SSPPCELLID3__RES__Shift(v)                          (((v) << SSP_SSPPCELLID3__RES__Pos) & SSP_SSPPCELLID3__RES__Msk)       /*!< Shift value 'v' into RES and mask 'v' to fit it into RES field */

/** SSP_SSPPCELLID3__RES__GET() gets SSPPCELLID3.RES's current value.
 *
 * When reading from SSPPCELLID3.RES, this is recommended to use.
 *
 * @return current value of SSPPCELLID3.RES
 */
__SSP_INLINE uint32_t SSP_SSPPCELLID3__RES__GET(void)
{
    uint32_t reg = SSP_SSPPCELLID3__GET();
    reg = (reg & SSP_SSPPCELLID3__RES__Msk);
    reg = (reg >> SSP_SSPPCELLID3__RES__Pos);
    return (uint32_t)reg;
}

/** SSP_SSPPCELLID3__RES__EXTRACT() extracts SSPPCELLID3.RES.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPPCELLID3.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPPCELLID3
 * @return current value of SSPPCELLID3.RES
 */
__SSP_INLINE uint32_t SSP_SSPPCELLID3__RES__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPPCELLID3__RES__Msk);
    reg = (reg >> SSP_SSPPCELLID3__RES__Pos);
    return (uint32_t)reg;
}

/* ---------------------- SSP.SSPPCELLID3.SSPPCELLID3 ---------------------- */

/**
<pre>
  SSP.SSPPCELLID3.SSPPCELLID3:

    Cell Identification Number 3

</pre> */

#define SSP_SSPPCELLID3__SSPPCELLID3__Pos                       0                                                                      /*!< Right-most bit position of SSPPCellID3 in SSP.SSPPCELLID3 */
#define SSP_SSPPCELLID3__SSPPCELLID3__Msk                       (0x000000FFUL << SSP_SSPPCELLID3__SSPPCELLID3__Pos)                    /*!< Mask for SSPPCellID3 in SSP.SSPPCELLID3 */
#define SSP_SSPPCELLID3__SSPPCELLID3__Shift(v)                  (((v) << SSP_SSPPCELLID3__SSPPCELLID3__Pos) & SSP_SSPPCELLID3__SSPPCELLID3__Msk) /*!< Shift value 'v' into SSPPCellID3 and mask 'v' to fit it into SSPPCellID3 field */

/** SSP_SSPPCELLID3__SSPPCELLID3__GET() gets SSPPCELLID3.SSPPCELLID3's current value.
 *
 * When reading from SSPPCELLID3.SSPPCELLID3, this is recommended to use.
 *
 * @return current value of SSPPCELLID3.SSPPCELLID3
 */
__SSP_INLINE uint32_t SSP_SSPPCELLID3__SSPPCELLID3__GET(void)
{
    uint8_t reg = SSP_SSPPCELLID3__GETB0();
    reg = (reg & (uint8_t)0xFF);
    return (uint32_t)reg;
}

/** SSP_SSPPCELLID3__SSPPCELLID3__EXTRACT() extracts SSPPCELLID3.SSPPCELLID3.
 *
 * This is recommended to use when extracting more than one bitfield from SSP.SSPPCELLID3.
 * It avoids multiple time-consuming bus accesses.
 *
 * @param reg current value of SSP.SSPPCELLID3
 * @return current value of SSPPCELLID3.SSPPCELLID3
 */
__SSP_INLINE uint32_t SSP_SSPPCELLID3__SSPPCELLID3__EXTRACT(uint32_t reg)
{
    reg = (reg & SSP_SSPPCELLID3__SSPPCELLID3__Msk);
    reg = (reg >> SSP_SSPPCELLID3__SSPPCELLID3__Pos);
    return (uint32_t)reg;
}

/** @} */ /* End of group ssp block */


/** @} */ /* End of group SHASTA */

/** @} */ /* End of group Infineon */

#endif /* _SHASTA_HAL_SSP_H_ */
