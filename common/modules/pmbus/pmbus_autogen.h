
/**
 * @file    ../../common/modules/pmbus/pmbus_autogen.h
 * @brief   Automatically generated from output of pmbus compile script.
 */

/* ============================================================================
** Copyright (C) 2025 Infineon. All rights reserved.
**               Infineon Technologies, PMM SYS / DES
** ============================================================================
**
** ============================================================================
** This document contains proprietary information. Passing on and
** copying of this document, and communication of its contents is not
** permitted without prior written authorisation.
** ============================================================================
**
** Automatically generated by:  pmbus_xlsx2c.py shasta_pmbus.xlsx
** Created on:  2025-02-04
*/
/*lint -save -e960 */


#ifndef PMBUS_AUTOGEN_H
#define PMBUS_AUTOGEN_H

#include <stdint.h>              /* uint*_t */
#include "fw_bool.h"             /* boolean type */
#include <stddef.h>             // NULL pointer for public structs
#include "driver_common.h"             // NULL pointer for public structs

#define OPCODE_POSITION (0)
#define WR_PROTO_POSITION (8)
#define RD_PROTO_POSITION (12)
#define NUMBYTES_POSITION (16)
#define NUM_PROTO_BYTES_POSITION (22)
#define RANGE_TYPE_POSITION (24)
#define PROTECTED_POSITION (28)
#define SUPPORTED_POSITION (30)
#define OTP_STORE_POSITION (31)

#define OPCODE_MASK (0x000000ff)
#define WR_PROTO_MASK (0x00000f00)
#define RD_PROTO_MASK (0x0000f000)
#define NUMBYTES_MASK (0x003f0000)
#define NUM_PROTO_BYTES_MASK (0x00c00000)
#define RANGE_TYPE_MASK (0x0f000000)
#define PROTECTED_MASK (0x30000000)
#define SUPPORTED_MASK (0x40000000)
#define OTP_STORE_MASK (0x80000000)

typedef enum PMBUS_PAGE_e
{
    PMBUS_PAGE_0 = 0u,
    PMBUS_PAGE_1 = 1u
} PMBUS_PAGE_t;

typedef enum PMBUS_PAGE_W_BROADCAST_e
{
    PMBUS_PAGE_WB_0 = 0u,
    PMBUS_PAGE_WB_1 = 1u,
    PMBUS_PAGE_WB_BROADCAST = 255u
} PMBUS_PAGE_W_BROADCAST_t;

// Direction enumeration:
typedef enum  _PMBUS_DIRECTION_e {
    PMBUS_WRITE	= 0u, //!< Used for pmbus bus level indications of write
    PMBUS_READ	= 1u, //!< Used for pmbus bus level indications of read
    PMBUS_PEEK	= 2u, //!< Used for internal firmware indications of read
    PMBUS_POKE	= 3u, //!< Used for internal firmware indications of write
    OTP_RESTORE	= 4u,  //!< Used for otp restore of pmbus commands
    PMBUS_VIN_OFF	= 5u  //!< Used for telem irq below vin off for shutdown
} PMBUS_DIRECTION_e;

enum PMBUS_RANGE_TYPES
{
    PMBUS_RANGE_NONE,
    PMBUS_RANGE_ALL,
    PMBUS_RANGE_LINEAR11_SIGNED,
    PMBUS_RANGE_LINEAR11_UNSIGNED,
    PMBUS_RANGE_LINEAR11_SIGNED_ARRAY,
    PMBUS_RANGE_LINEAR11_UNSIGNED_ARRAY,
    PMBUS_RANGE_SPARSE8_PAIRS,
    PMBUS_RANGE_SPARSE8,
    PMBUS_RANGE_VOUT_MODE,
    PMBUS_RANGE_OPERATION,
    PMBUS_RANGE_SMBALERT_MASK,
    PMBUS_RANGE_MFR_IOUT_OC_FAST_FAULT_RESPONSE,
PMBUS_RANGE_BYTE_MASKS
};

enum PMBUS_PROTOCOL_ERROR_TYPES
{
    PMBUS_PROTOCOL_ERROR_NONE,
    PMBUS_PROTOCOL_ERROR_CORRUPTED_DATA,
    PMBUS_PROTOCOL_ERROR_RX_TOO_FEW_BITS,
    PMBUS_PROTOCOL_ERROR_TX_TOO_FEW_BITS,
    PMBUS_PROTOCOL_ERROR_RX_TOO_FEW_BYTES,
    PMBUS_PROTOCOL_ERROR_RX_TOO_MANY_BYTES,
    PMBUS_PROTOCOL_ERROR_TX_TOO_FEW_BYTES,
    PMBUS_PROTOCOL_ERROR_TX_TOO_MANY_BYTES,
    PMBUS_PROTOCOL_ERROR_DEVICE_BUSY,
    PMBUS_PROTOCOL_ERROR_SET_READ_BIT_IN_ADDRESS_BYTE,
    PMBUS_PROTOCOL_ERROR_UNSUPPORTED_COMMAND,
    PMBUS_PROTOCOL_ERROR_UNSUPPORTED_DATA,
    PMBUS_PROTOCOL_ERROR_DATA_OUT_OF_RANGE,
    PMBUS_PROTOCOL_ERROR_COMMAND_PROTECTED,
    PMBUS_PROTOCOL_ERROR_OTHER
};

enum ENUM_PMBUS_TRANSACTION_PROTOCOL
{
    TRANSACTION_PROTOCOL_NONE					,
    TRANSACTION_PROTOCOL_QUICK_COMMAND      	,
    TRANSACTION_PROTOCOL_READ      				,
    TRANSACTION_PROTOCOL_WRITE      			,
    TRANSACTION_PROTOCOL_PROCESS_CALL      		,
    TRANSACTION_PROTOCOL_BLOCK_READ     		,
    TRANSACTION_PROTOCOL_BLOCK_WRITE      		,
    TRANSACTION_PROTOCOL_I2C_WRITE32      		,
    TRANSACTION_PROTOCOL_I2C_READ32      		,
    TRANSACTION_PROTOCOL_ALERT_RESPONSE_ADDRESS ,
    TRANSACTION_PROTOCOL_ADDRESS_RESOLUTION 	,
    TRANSACTION_PROTOCOL_GROUP      			,
    TRANSACTION_PROTOCOL_EXTENDED_COMMAND_READ  ,
    TRANSACTION_PROTOCOL_EXTENDED_COMMAND_WRITE ,
    TRANSACTION_PROTOCOL_ZONE_READ      		,
    TRANSACTION_PROTOCOL_ZONE_WRITE      		,
    TRANSACTION_PROTOCOL_PAGE_PLUS_READ      	,
    TRANSACTION_PROTOCOL_PAGE_PLUS_WRITE
};

// common struct for all commands:
typedef struct _PMBUS_CMD_s
{
    uint32_t	CMD_CONFIG;
    uint8_t *   RANGE;
    uint8_t *	DATA0;  // pointer to a data array
    uint8_t *	DATA1;  // pointer to a data array
} PMBUS_CMD_t;

typedef void (* pmbus_callback)(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
typedef void (* mfr_specific_init_ptr)(void);

// this is an array of pointers to the pmbus structs it gets initialized in the init routine:
//  one of these per loop:
extern PMBUS_CMD_t * PMBUS_CMD_ARRAY_LOOP [256] ;
//extern PMBUS_CMD_t * PMBUS_CMD_ARRAY_LOOP1 [256] ;
extern uint32_t PMBUS_CMD_SUPPORT_ARRAY_LOOP [8] ;
//extern uint32_t PMBUS_CMD_SUPPORT_ARRAY_LOOP1 [8] ;
extern pmbus_callback ptr_pmbus_callback[256];
extern mfr_specific_init_ptr ptr_mfr_specific_init;

extern PMBUS_CMD_t PMBUS_CMD_UNSUPPORTED;
extern uint8_t	PMBUS_CMD_UNSUPPORTED_DATA[1];  // data array for command
extern uint8_t	PMBUS_CMD_UNSUPPORTED_RANGE[1];  // data array for range

extern const uint32_t PMBUS_RANGE_OPERATION_ARRAY[8];
extern const uint32_t PMBUS_RANGE_SMBALERT_MASK_ARRAY[8];
extern const uint32_t PMBUS_RANGE_MFR_IOUT_OC_FAST_FAULT_RESPONSE_ARRAY[8];
extern const uint32_t PMBUS_RANGE_UNSIGNED_LINEAR11_ARRAY[8];




#define PMBUS_CMDCODE_PAGE (0x0)

/* instantiate the command structure for PAGE.
 */
// instances of the struct one per command
extern PMBUS_CMD_t PMBUS_CMD_PAGE;
extern uint8_t	PMBUS_CMD_PAGE_DATA_LOOP0[1];  	// data array for command loop0
extern uint8_t	* PMBUS_CMD_PAGE_DATA_LOOP1;    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_PAGE_RANGE[4];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_OPERATION (0x1)

/* instantiate the command OPERATION.
 */
extern PMBUS_CMD_t PMBUS_CMD_OPERATION;
extern uint8_t	PMBUS_CMD_OPERATION_DATA_LOOP0[1];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_OPERATION_DATA_LOOP1[1];    // data array for command loop1 (pointer if common)

#define PMBUS_CMDCODE_ON_OFF_CONFIG (0x2)

/* instantiate the command ON_OFF_CONFIG.
 */
extern PMBUS_CMD_t PMBUS_CMD_ON_OFF_CONFIG;
extern uint8_t	PMBUS_CMD_ON_OFF_CONFIG_DATA_LOOP0[1];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_ON_OFF_CONFIG_DATA_LOOP1[1];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_ON_OFF_CONFIG_RANGE[1];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_CLEAR_FAULTS (0x3)

/* instantiate the command CLEAR_FAULTS.
 */
extern PMBUS_CMD_t PMBUS_CMD_CLEAR_FAULTS;

#define PMBUS_CMDCODE_WRITE_PROTECT (0x10)

/* instantiate the command WRITE_PROTECT.
 */
extern PMBUS_CMD_t PMBUS_CMD_WRITE_PROTECT;
extern uint8_t	PMBUS_CMD_WRITE_PROTECT_DATA_LOOP0[1];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_WRITE_PROTECT_DATA_LOOP1[1];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_WRITE_PROTECT_RANGE[5];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_STORE_DEFAULT_ALL (0x11)

/* instantiate the command STORE_DEFAULT_ALL.
 */
extern PMBUS_CMD_t PMBUS_CMD_STORE_DEFAULT_ALL;

#define PMBUS_CMDCODE_RESTORE_DEFAULT_ALL (0x12)

/* instantiate the command RESTORE_DEFAULT_ALL.
 */
extern PMBUS_CMD_t PMBUS_CMD_RESTORE_DEFAULT_ALL;

#define PMBUS_CMDCODE_STORE_USER_ALL (0x15)

/* instantiate the command STORE_USER_ALL.
 */
extern PMBUS_CMD_t PMBUS_CMD_STORE_USER_ALL;

#define PMBUS_CMDCODE_RESTORE_USER_ALL (0x16)

/* instantiate the command RESTORE_USER_ALL.
 */
extern PMBUS_CMD_t PMBUS_CMD_RESTORE_USER_ALL;

#define PMBUS_CMDCODE_STORE_USER_CODE (0x17)

/* instantiate the command STORE_USER_CODE.
 */
extern PMBUS_CMD_t PMBUS_CMD_STORE_USER_CODE;
extern uint8_t	PMBUS_CMD_STORE_USER_CODE_DATA_LOOP0[1];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_STORE_USER_CODE_DATA_LOOP1[1];    // data array for command loop1 (pointer if common)

#define PMBUS_CMDCODE_RESTORE_USER_CODE (0x18)

/* instantiate the command RESTORE_USER_CODE.
 */
extern PMBUS_CMD_t PMBUS_CMD_RESTORE_USER_CODE;
extern uint8_t	PMBUS_CMD_RESTORE_USER_CODE_DATA_LOOP0[1];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_RESTORE_USER_CODE_DATA_LOOP1[1];    // data array for command loop1 (pointer if common)

#define PMBUS_CMDCODE_CAPABILITY (0x19)

/* instantiate the command structure for CAPABILITY.
 */
// instances of the struct one per command
extern PMBUS_CMD_t PMBUS_CMD_CAPABILITY;
extern uint8_t	PMBUS_CMD_CAPABILITY_DATA_LOOP0[1];  	// data array for command loop0
extern uint8_t	* PMBUS_CMD_CAPABILITY_DATA_LOOP1;    // data array for command loop1 (pointer if common)

#define PMBUS_CMDCODE_SMBALERT_MASK (0x1B)

/* instantiate the command SMBALERT_MASK.
 */
extern PMBUS_CMD_t PMBUS_CMD_SMBALERT_MASK;
extern uint8_t	PMBUS_CMD_SMBALERT_MASK_DATA_LOOP0[11];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_SMBALERT_MASK_DATA_LOOP1[11];    // data array for command loop1 (pointer if common)

#define PMBUS_CMDCODE_VOUT_MODE (0x20)

/* instantiate the command VOUT_MODE.
 */
extern PMBUS_CMD_t PMBUS_CMD_VOUT_MODE;
extern uint8_t	PMBUS_CMD_VOUT_MODE_DATA_LOOP0[1];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_VOUT_MODE_DATA_LOOP1[1];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_VOUT_MODE_RANGE[3];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_VOUT_COMMAND (0x21)

/* instantiate the command VOUT_COMMAND.
 */
extern PMBUS_CMD_t PMBUS_CMD_VOUT_COMMAND;
extern uint8_t	PMBUS_CMD_VOUT_COMMAND_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_VOUT_COMMAND_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_VOUT_COMMAND_RANGE[2];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_VOUT_TRIM (0x22)

/* instantiate the command VOUT_TRIM.
 */
extern PMBUS_CMD_t PMBUS_CMD_VOUT_TRIM;
extern uint8_t	PMBUS_CMD_VOUT_TRIM_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_VOUT_TRIM_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_VOUT_TRIM_RANGE[2];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_VOUT_CAL_OFFSET (0x23)

/* instantiate the command VOUT_CAL_OFFSET.
 */
extern PMBUS_CMD_t PMBUS_CMD_VOUT_CAL_OFFSET;
extern uint8_t	PMBUS_CMD_VOUT_CAL_OFFSET_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_VOUT_CAL_OFFSET_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_VOUT_CAL_OFFSET_RANGE[2];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_VOUT_MAX (0x24)

/* instantiate the command VOUT_MAX.
 */
extern PMBUS_CMD_t PMBUS_CMD_VOUT_MAX;
extern uint8_t	PMBUS_CMD_VOUT_MAX_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_VOUT_MAX_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_VOUT_MAX_RANGE[2];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_VOUT_MARGIN_HIGH (0x25)

/* instantiate the command VOUT_MARGIN_HIGH.
 */
extern PMBUS_CMD_t PMBUS_CMD_VOUT_MARGIN_HIGH;
extern uint8_t	PMBUS_CMD_VOUT_MARGIN_HIGH_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_VOUT_MARGIN_HIGH_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_VOUT_MARGIN_HIGH_RANGE[2];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_VOUT_MARGIN_LOW (0x26)

/* instantiate the command VOUT_MARGIN_LOW.
 */
extern PMBUS_CMD_t PMBUS_CMD_VOUT_MARGIN_LOW;
extern uint8_t	PMBUS_CMD_VOUT_MARGIN_LOW_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_VOUT_MARGIN_LOW_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_VOUT_MARGIN_LOW_RANGE[2];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_VOUT_TRANSITION_RATE (0x27)

/* instantiate the command VOUT_TRANSITION_RATE.
 */
extern PMBUS_CMD_t PMBUS_CMD_VOUT_TRANSITION_RATE;
extern uint8_t	PMBUS_CMD_VOUT_TRANSITION_RATE_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_VOUT_TRANSITION_RATE_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_VOUT_TRANSITION_RATE_RANGE[2];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_VOUT_DROOP (0x28)

/* instantiate the command VOUT_DROOP.
 */
extern PMBUS_CMD_t PMBUS_CMD_VOUT_DROOP;
extern uint8_t	PMBUS_CMD_VOUT_DROOP_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_VOUT_DROOP_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_VOUT_DROOP_RANGE[4];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_VOUT_SCALE_LOOP (0x29)

/* instantiate the command VOUT_SCALE_LOOP.
 */
extern PMBUS_CMD_t PMBUS_CMD_VOUT_SCALE_LOOP;
extern uint8_t	PMBUS_CMD_VOUT_SCALE_LOOP_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_VOUT_SCALE_LOOP_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)

#define PMBUS_CMDCODE_VOUT_MIN (0x2B)

/* instantiate the command VOUT_MIN.
 */
extern PMBUS_CMD_t PMBUS_CMD_VOUT_MIN;
extern uint8_t	PMBUS_CMD_VOUT_MIN_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_VOUT_MIN_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_VOUT_MIN_RANGE[2];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_MAX_DUTY (0x32)

/* instantiate the command MAX_DUTY.
 */
extern PMBUS_CMD_t PMBUS_CMD_MAX_DUTY;
extern uint8_t	PMBUS_CMD_MAX_DUTY_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_MAX_DUTY_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_MAX_DUTY_RANGE[2];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_FREQUENCY_SWITCH (0x33)

/* instantiate the command FREQUENCY_SWITCH.
 */
extern PMBUS_CMD_t PMBUS_CMD_FREQUENCY_SWITCH;
extern uint8_t	PMBUS_CMD_FREQUENCY_SWITCH_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_FREQUENCY_SWITCH_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_FREQUENCY_SWITCH_RANGE[3];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_POWER_MODE (0x34)

/* instantiate the command POWER_MODE.
 */
extern PMBUS_CMD_t PMBUS_CMD_POWER_MODE;
extern uint8_t	PMBUS_CMD_POWER_MODE_DATA_LOOP0[1];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_POWER_MODE_DATA_LOOP1[1];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_POWER_MODE_RANGE[4];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_VIN_ON (0x35)

/* instantiate the command VIN_ON.
 */
extern PMBUS_CMD_t PMBUS_CMD_VIN_ON;
extern uint8_t	PMBUS_CMD_VIN_ON_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_VIN_ON_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_VIN_ON_RANGE[2];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_VIN_OFF (0x36)

/* instantiate the command VIN_OFF.
 */
extern PMBUS_CMD_t PMBUS_CMD_VIN_OFF;
extern uint8_t	PMBUS_CMD_VIN_OFF_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_VIN_OFF_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_VIN_OFF_RANGE[2];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_INTERLEAVE (0x37)

/* instantiate the command INTERLEAVE.
 */
extern PMBUS_CMD_t PMBUS_CMD_INTERLEAVE;
extern uint8_t	PMBUS_CMD_INTERLEAVE_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_INTERLEAVE_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_INTERLEAVE_RANGE[2];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_IOUT_CAL_OFFSET (0x39)

/* instantiate the command IOUT_CAL_OFFSET.
 */
extern PMBUS_CMD_t PMBUS_CMD_IOUT_CAL_OFFSET;
extern uint8_t	PMBUS_CMD_IOUT_CAL_OFFSET_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_IOUT_CAL_OFFSET_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_IOUT_CAL_OFFSET_RANGE[2];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_VOUT_OV_FAULT_LIMIT (0x40)

/* instantiate the command VOUT_OV_FAULT_LIMIT.
 */
extern PMBUS_CMD_t PMBUS_CMD_VOUT_OV_FAULT_LIMIT;
extern uint8_t	PMBUS_CMD_VOUT_OV_FAULT_LIMIT_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_VOUT_OV_FAULT_LIMIT_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_VOUT_OV_FAULT_LIMIT_RANGE[2];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_VOUT_OV_FAULT_RESPONSE (0x41)

/* instantiate the command VOUT_OV_FAULT_RESPONSE.
 */
extern PMBUS_CMD_t PMBUS_CMD_VOUT_OV_FAULT_RESPONSE;
extern uint8_t	PMBUS_CMD_VOUT_OV_FAULT_RESPONSE_DATA_LOOP0[1];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_VOUT_OV_FAULT_RESPONSE_DATA_LOOP1[1];    // data array for command loop1 (pointer if common)

#define PMBUS_CMDCODE_VOUT_OV_WARN_LIMIT (0x42)

/* instantiate the command VOUT_OV_WARN_LIMIT.
 */
extern PMBUS_CMD_t PMBUS_CMD_VOUT_OV_WARN_LIMIT;
extern uint8_t	PMBUS_CMD_VOUT_OV_WARN_LIMIT_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_VOUT_OV_WARN_LIMIT_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_VOUT_OV_WARN_LIMIT_RANGE[2];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_VOUT_UV_WARN_LIMIT (0x43)

/* instantiate the command VOUT_UV_WARN_LIMIT.
 */
extern PMBUS_CMD_t PMBUS_CMD_VOUT_UV_WARN_LIMIT;
extern uint8_t	PMBUS_CMD_VOUT_UV_WARN_LIMIT_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_VOUT_UV_WARN_LIMIT_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_VOUT_UV_WARN_LIMIT_RANGE[2];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_VOUT_UV_FAULT_LIMIT (0x44)

/* instantiate the command VOUT_UV_FAULT_LIMIT.
 */
extern PMBUS_CMD_t PMBUS_CMD_VOUT_UV_FAULT_LIMIT;
extern uint8_t	PMBUS_CMD_VOUT_UV_FAULT_LIMIT_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_VOUT_UV_FAULT_LIMIT_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_VOUT_UV_FAULT_LIMIT_RANGE[2];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_VOUT_UV_FAULT_RESPONSE (0x45)

/* instantiate the command VOUT_UV_FAULT_RESPONSE.
 */
extern PMBUS_CMD_t PMBUS_CMD_VOUT_UV_FAULT_RESPONSE;
extern uint8_t	PMBUS_CMD_VOUT_UV_FAULT_RESPONSE_DATA_LOOP0[1];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_VOUT_UV_FAULT_RESPONSE_DATA_LOOP1[1];    // data array for command loop1 (pointer if common)

#define PMBUS_CMDCODE_IOUT_OC_FAULT_LIMIT (0x46)

/* instantiate the command IOUT_OC_FAULT_LIMIT.
 */
extern PMBUS_CMD_t PMBUS_CMD_IOUT_OC_FAULT_LIMIT;
extern uint8_t	PMBUS_CMD_IOUT_OC_FAULT_LIMIT_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_IOUT_OC_FAULT_LIMIT_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_IOUT_OC_FAULT_LIMIT_RANGE[2];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_IOUT_OC_FAULT_RESPONSE (0x47)

/* instantiate the command IOUT_OC_FAULT_RESPONSE.
 */
extern PMBUS_CMD_t PMBUS_CMD_IOUT_OC_FAULT_RESPONSE;
extern uint8_t	PMBUS_CMD_IOUT_OC_FAULT_RESPONSE_DATA_LOOP0[1];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_IOUT_OC_FAULT_RESPONSE_DATA_LOOP1[1];    // data array for command loop1 (pointer if common)

#define PMBUS_CMDCODE_IOUT_OC_LV_FAULT_LIMIT (0x48)

/* instantiate the command IOUT_OC_LV_FAULT_LIMIT.
 */
extern PMBUS_CMD_t PMBUS_CMD_IOUT_OC_LV_FAULT_LIMIT;
extern uint8_t	PMBUS_CMD_IOUT_OC_LV_FAULT_LIMIT_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_IOUT_OC_LV_FAULT_LIMIT_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_IOUT_OC_LV_FAULT_LIMIT_RANGE[2];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_IOUT_OC_WARN_LIMIT (0x4A)

/* instantiate the command IOUT_OC_WARN_LIMIT.
 */
extern PMBUS_CMD_t PMBUS_CMD_IOUT_OC_WARN_LIMIT;
extern uint8_t	PMBUS_CMD_IOUT_OC_WARN_LIMIT_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_IOUT_OC_WARN_LIMIT_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_IOUT_OC_WARN_LIMIT_RANGE[2];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_IOUT_UC_FAULT_LIMIT (0x4B)

/* instantiate the command IOUT_UC_FAULT_LIMIT.
 */
extern PMBUS_CMD_t PMBUS_CMD_IOUT_UC_FAULT_LIMIT;
extern uint8_t	PMBUS_CMD_IOUT_UC_FAULT_LIMIT_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_IOUT_UC_FAULT_LIMIT_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_IOUT_UC_FAULT_LIMIT_RANGE[2];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_IOUT_UC_FAULT_RESPONSE (0x4C)

/* instantiate the command IOUT_UC_FAULT_RESPONSE.
 */
extern PMBUS_CMD_t PMBUS_CMD_IOUT_UC_FAULT_RESPONSE;
extern uint8_t	PMBUS_CMD_IOUT_UC_FAULT_RESPONSE_DATA_LOOP0[1];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_IOUT_UC_FAULT_RESPONSE_DATA_LOOP1[1];    // data array for command loop1 (pointer if common)

#define PMBUS_CMDCODE_OT_FAULT_LIMIT (0x4F)

/* instantiate the command OT_FAULT_LIMIT.
 */
extern PMBUS_CMD_t PMBUS_CMD_OT_FAULT_LIMIT;
extern uint8_t	PMBUS_CMD_OT_FAULT_LIMIT_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_OT_FAULT_LIMIT_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_OT_FAULT_LIMIT_RANGE[2];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_OT_FAULT_RESPONSE (0x50)

/* instantiate the command OT_FAULT_RESPONSE.
 */
extern PMBUS_CMD_t PMBUS_CMD_OT_FAULT_RESPONSE;
extern uint8_t	PMBUS_CMD_OT_FAULT_RESPONSE_DATA_LOOP0[1];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_OT_FAULT_RESPONSE_DATA_LOOP1[1];    // data array for command loop1 (pointer if common)

#define PMBUS_CMDCODE_OT_WARN_LIMIT (0x51)

/* instantiate the command OT_WARN_LIMIT.
 */
extern PMBUS_CMD_t PMBUS_CMD_OT_WARN_LIMIT;
extern uint8_t	PMBUS_CMD_OT_WARN_LIMIT_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_OT_WARN_LIMIT_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_OT_WARN_LIMIT_RANGE[2];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_UT_WARN_LIMIT (0x52)

/* instantiate the command UT_WARN_LIMIT.
 */
extern PMBUS_CMD_t PMBUS_CMD_UT_WARN_LIMIT;
extern uint8_t	PMBUS_CMD_UT_WARN_LIMIT_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_UT_WARN_LIMIT_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_UT_WARN_LIMIT_RANGE[3];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_UT_FAULT_LIMIT (0x53)

/* instantiate the command UT_FAULT_LIMIT.
 */
extern PMBUS_CMD_t PMBUS_CMD_UT_FAULT_LIMIT;
extern uint8_t	PMBUS_CMD_UT_FAULT_LIMIT_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_UT_FAULT_LIMIT_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_UT_FAULT_LIMIT_RANGE[3];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_UT_FAULT_RESPONSE (0x54)

/* instantiate the command UT_FAULT_RESPONSE.
 */
extern PMBUS_CMD_t PMBUS_CMD_UT_FAULT_RESPONSE;
extern uint8_t	PMBUS_CMD_UT_FAULT_RESPONSE_DATA_LOOP0[1];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_UT_FAULT_RESPONSE_DATA_LOOP1[1];    // data array for command loop1 (pointer if common)

#define PMBUS_CMDCODE_VIN_OV_FAULT_LIMIT (0x55)

/* instantiate the command VIN_OV_FAULT_LIMIT.
 */
extern PMBUS_CMD_t PMBUS_CMD_VIN_OV_FAULT_LIMIT;
extern uint8_t	PMBUS_CMD_VIN_OV_FAULT_LIMIT_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_VIN_OV_FAULT_LIMIT_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_VIN_OV_FAULT_LIMIT_RANGE[2];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_VIN_OV_FAULT_RESPONSE (0x56)

/* instantiate the command VIN_OV_FAULT_RESPONSE.
 */
extern PMBUS_CMD_t PMBUS_CMD_VIN_OV_FAULT_RESPONSE;
extern uint8_t	PMBUS_CMD_VIN_OV_FAULT_RESPONSE_DATA_LOOP0[1];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_VIN_OV_FAULT_RESPONSE_DATA_LOOP1[1];    // data array for command loop1 (pointer if common)

#define PMBUS_CMDCODE_VIN_OV_WARN_LIMIT (0x57)

/* instantiate the command VIN_OV_WARN_LIMIT.
 */
extern PMBUS_CMD_t PMBUS_CMD_VIN_OV_WARN_LIMIT;
extern uint8_t	PMBUS_CMD_VIN_OV_WARN_LIMIT_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_VIN_OV_WARN_LIMIT_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_VIN_OV_WARN_LIMIT_RANGE[2];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_VIN_UV_WARN_LIMIT (0x58)

/* instantiate the command VIN_UV_WARN_LIMIT.
 */
extern PMBUS_CMD_t PMBUS_CMD_VIN_UV_WARN_LIMIT;
extern uint8_t	PMBUS_CMD_VIN_UV_WARN_LIMIT_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_VIN_UV_WARN_LIMIT_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_VIN_UV_WARN_LIMIT_RANGE[2];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_VIN_UV_FAULT_LIMIT (0x59)

/* instantiate the command VIN_UV_FAULT_LIMIT.
 */
extern PMBUS_CMD_t PMBUS_CMD_VIN_UV_FAULT_LIMIT;
extern uint8_t	PMBUS_CMD_VIN_UV_FAULT_LIMIT_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_VIN_UV_FAULT_LIMIT_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_VIN_UV_FAULT_LIMIT_RANGE[2];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_VIN_UV_FAULT_RESPONSE (0x5A)

/* instantiate the command VIN_UV_FAULT_RESPONSE.
 */
extern PMBUS_CMD_t PMBUS_CMD_VIN_UV_FAULT_RESPONSE;
extern uint8_t	PMBUS_CMD_VIN_UV_FAULT_RESPONSE_DATA_LOOP0[1];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_VIN_UV_FAULT_RESPONSE_DATA_LOOP1[1];    // data array for command loop1 (pointer if common)

#define PMBUS_CMDCODE_IIN_OC_FAULT_LIMIT (0x5B)

/* instantiate the command IIN_OC_FAULT_LIMIT.
 */
extern PMBUS_CMD_t PMBUS_CMD_IIN_OC_FAULT_LIMIT;
extern uint8_t	PMBUS_CMD_IIN_OC_FAULT_LIMIT_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_IIN_OC_FAULT_LIMIT_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_IIN_OC_FAULT_LIMIT_RANGE[2];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_IIN_OC_FAULT_RESPONSE (0x5C)

/* instantiate the command IIN_OC_FAULT_RESPONSE.
 */
extern PMBUS_CMD_t PMBUS_CMD_IIN_OC_FAULT_RESPONSE;
extern uint8_t	PMBUS_CMD_IIN_OC_FAULT_RESPONSE_DATA_LOOP0[1];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_IIN_OC_FAULT_RESPONSE_DATA_LOOP1[1];    // data array for command loop1 (pointer if common)

#define PMBUS_CMDCODE_IIN_OC_WARN_LIMIT (0x5D)

/* instantiate the command IIN_OC_WARN_LIMIT.
 */
extern PMBUS_CMD_t PMBUS_CMD_IIN_OC_WARN_LIMIT;
extern uint8_t	PMBUS_CMD_IIN_OC_WARN_LIMIT_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_IIN_OC_WARN_LIMIT_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_IIN_OC_WARN_LIMIT_RANGE[2];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_POWER_GOOD_ON (0x5E)

/* instantiate the command POWER_GOOD_ON.
 */
extern PMBUS_CMD_t PMBUS_CMD_POWER_GOOD_ON;
extern uint8_t	PMBUS_CMD_POWER_GOOD_ON_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_POWER_GOOD_ON_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_POWER_GOOD_ON_RANGE[2];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_POWER_GOOD_OFF (0x5F)

/* instantiate the command POWER_GOOD_OFF.
 */
extern PMBUS_CMD_t PMBUS_CMD_POWER_GOOD_OFF;
extern uint8_t	PMBUS_CMD_POWER_GOOD_OFF_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_POWER_GOOD_OFF_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_POWER_GOOD_OFF_RANGE[2];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_TON_DELAY (0x60)

/* instantiate the command TON_DELAY.
 */
extern PMBUS_CMD_t PMBUS_CMD_TON_DELAY;
extern uint8_t	PMBUS_CMD_TON_DELAY_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_TON_DELAY_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_TON_DELAY_RANGE[2];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_TON_RISE (0x61)

/* instantiate the command TON_RISE.
 */
extern PMBUS_CMD_t PMBUS_CMD_TON_RISE;
extern uint8_t	PMBUS_CMD_TON_RISE_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_TON_RISE_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_TON_RISE_RANGE[6];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_TON_MAX_FAULT_LIMIT (0x62)

/* instantiate the command TON_MAX_FAULT_LIMIT.
 */
extern PMBUS_CMD_t PMBUS_CMD_TON_MAX_FAULT_LIMIT;
extern uint8_t	PMBUS_CMD_TON_MAX_FAULT_LIMIT_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_TON_MAX_FAULT_LIMIT_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_TON_MAX_FAULT_LIMIT_RANGE[6];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_TON_MAX_FAULT_RESPONSE (0x63)

/* instantiate the command TON_MAX_FAULT_RESPONSE.
 */
extern PMBUS_CMD_t PMBUS_CMD_TON_MAX_FAULT_RESPONSE;
extern uint8_t	PMBUS_CMD_TON_MAX_FAULT_RESPONSE_DATA_LOOP0[1];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_TON_MAX_FAULT_RESPONSE_DATA_LOOP1[1];    // data array for command loop1 (pointer if common)

#define PMBUS_CMDCODE_TOFF_DELAY (0x64)

/* instantiate the command TOFF_DELAY.
 */
extern PMBUS_CMD_t PMBUS_CMD_TOFF_DELAY;
extern uint8_t	PMBUS_CMD_TOFF_DELAY_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_TOFF_DELAY_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_TOFF_DELAY_RANGE[2];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_TOFF_FALL (0x65)

/* instantiate the command TOFF_FALL.
 */
extern PMBUS_CMD_t PMBUS_CMD_TOFF_FALL;
extern uint8_t	PMBUS_CMD_TOFF_FALL_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_TOFF_FALL_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_TOFF_FALL_RANGE[6];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_TOFF_MAX_WARN_LIMIT (0x66)

/* instantiate the command TOFF_MAX_WARN_LIMIT.
 */
extern PMBUS_CMD_t PMBUS_CMD_TOFF_MAX_WARN_LIMIT;
extern uint8_t	PMBUS_CMD_TOFF_MAX_WARN_LIMIT_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_TOFF_MAX_WARN_LIMIT_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_TOFF_MAX_WARN_LIMIT_RANGE[6];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_POUT_OP_WARN_LIMIT (0x6A)

/* instantiate the command POUT_OP_WARN_LIMIT.
 */
extern PMBUS_CMD_t PMBUS_CMD_POUT_OP_WARN_LIMIT;
extern uint8_t	PMBUS_CMD_POUT_OP_WARN_LIMIT_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_POUT_OP_WARN_LIMIT_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_POUT_OP_WARN_LIMIT_RANGE[6];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_PIN_OP_WARN_LIMIT (0x6B)

/* instantiate the command PIN_OP_WARN_LIMIT.
 */
extern PMBUS_CMD_t PMBUS_CMD_PIN_OP_WARN_LIMIT;
extern uint8_t	PMBUS_CMD_PIN_OP_WARN_LIMIT_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_PIN_OP_WARN_LIMIT_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_PIN_OP_WARN_LIMIT_RANGE[6];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_STATUS_BYTE (0x78)

/* instantiate the command STATUS_BYTE.
 */
extern PMBUS_CMD_t PMBUS_CMD_STATUS_BYTE;
extern uint8_t	PMBUS_CMD_STATUS_BYTE_DATA_LOOP0[1];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_STATUS_BYTE_DATA_LOOP1[1];    // data array for command loop1 (pointer if common)

#define PMBUS_CMDCODE_STATUS_WORD (0x79)

/* instantiate the command STATUS_WORD.
 */
extern PMBUS_CMD_t PMBUS_CMD_STATUS_WORD;
extern uint8_t	PMBUS_CMD_STATUS_WORD_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_STATUS_WORD_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)

#define PMBUS_CMDCODE_STATUS_VOUT (0x7A)

/* instantiate the command STATUS_VOUT.
 */
extern PMBUS_CMD_t PMBUS_CMD_STATUS_VOUT;
extern uint8_t	PMBUS_CMD_STATUS_VOUT_DATA_LOOP0[1];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_STATUS_VOUT_DATA_LOOP1[1];    // data array for command loop1 (pointer if common)

#define PMBUS_CMDCODE_STATUS_IOUT (0x7B)

/* instantiate the command STATUS_IOUT.
 */
extern PMBUS_CMD_t PMBUS_CMD_STATUS_IOUT;
extern uint8_t	PMBUS_CMD_STATUS_IOUT_DATA_LOOP0[1];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_STATUS_IOUT_DATA_LOOP1[1];    // data array for command loop1 (pointer if common)

#define PMBUS_CMDCODE_STATUS_INPUT (0x7C)

/* instantiate the command STATUS_INPUT.
 */
extern PMBUS_CMD_t PMBUS_CMD_STATUS_INPUT;
extern uint8_t	PMBUS_CMD_STATUS_INPUT_DATA_LOOP0[1];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_STATUS_INPUT_DATA_LOOP1[1];    // data array for command loop1 (pointer if common)

#define PMBUS_CMDCODE_STATUS_TEMPERATURE (0x7D)

/* instantiate the command STATUS_TEMPERATURE.
 */
extern PMBUS_CMD_t PMBUS_CMD_STATUS_TEMPERATURE;
extern uint8_t	PMBUS_CMD_STATUS_TEMPERATURE_DATA_LOOP0[1];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_STATUS_TEMPERATURE_DATA_LOOP1[1];    // data array for command loop1 (pointer if common)

#define PMBUS_CMDCODE_STATUS_CML (0x7E)

/* instantiate the command STATUS_CML.
 */
extern PMBUS_CMD_t PMBUS_CMD_STATUS_CML;
extern uint8_t	PMBUS_CMD_STATUS_CML_DATA_LOOP0[1];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_STATUS_CML_DATA_LOOP1[1];    // data array for command loop1 (pointer if common)

#define PMBUS_CMDCODE_STATUS_OTHER (0x7F)

/* instantiate the command STATUS_OTHER.
 */
extern PMBUS_CMD_t PMBUS_CMD_STATUS_OTHER;
extern uint8_t	PMBUS_CMD_STATUS_OTHER_DATA_LOOP0[1];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_STATUS_OTHER_DATA_LOOP1[1];    // data array for command loop1 (pointer if common)

#define PMBUS_CMDCODE_STATUS_MFR_SPECIFIC (0x80)

/* instantiate the command STATUS_MFR_SPECIFIC.
 */
extern PMBUS_CMD_t PMBUS_CMD_STATUS_MFR_SPECIFIC;
extern uint8_t	PMBUS_CMD_STATUS_MFR_SPECIFIC_DATA_LOOP0[1];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_STATUS_MFR_SPECIFIC_DATA_LOOP1[1];    // data array for command loop1 (pointer if common)

#define PMBUS_CMDCODE_STATUS_FANS_1_2 (0x81)

/* instantiate the command STATUS_FANS_1_2.
 */
extern PMBUS_CMD_t PMBUS_CMD_STATUS_FANS_1_2;
extern uint8_t	PMBUS_CMD_STATUS_FANS_1_2_DATA_LOOP0[1];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_STATUS_FANS_1_2_DATA_LOOP1[1];    // data array for command loop1 (pointer if common)

#define PMBUS_CMDCODE_READ_VIN (0x88)

/* instantiate the command READ_VIN.
 */
extern PMBUS_CMD_t PMBUS_CMD_READ_VIN;
extern uint8_t	PMBUS_CMD_READ_VIN_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_READ_VIN_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_READ_VIN_RANGE[2];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_READ_IIN (0x89)

/* instantiate the command READ_IIN.
 */
extern PMBUS_CMD_t PMBUS_CMD_READ_IIN;
extern uint8_t	PMBUS_CMD_READ_IIN_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_READ_IIN_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_READ_IIN_RANGE[2];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_READ_VOUT (0x8B)

/* instantiate the command READ_VOUT.
 */
extern PMBUS_CMD_t PMBUS_CMD_READ_VOUT;
extern uint8_t	PMBUS_CMD_READ_VOUT_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_READ_VOUT_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_READ_VOUT_RANGE[2];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_READ_IOUT (0x8C)

/* instantiate the command READ_IOUT.
 */
extern PMBUS_CMD_t PMBUS_CMD_READ_IOUT;
extern uint8_t	PMBUS_CMD_READ_IOUT_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_READ_IOUT_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_READ_IOUT_RANGE[2];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_READ_TEMPERATURE_1 (0x8D)

/* instantiate the command READ_TEMPERATURE_1.
 */
extern PMBUS_CMD_t PMBUS_CMD_READ_TEMPERATURE_1;
extern uint8_t	PMBUS_CMD_READ_TEMPERATURE_1_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_READ_TEMPERATURE_1_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_READ_TEMPERATURE_1_RANGE[2];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_READ_TEMPERATURE_2 (0x8E)

/* instantiate the command READ_TEMPERATURE_2.
 */
extern PMBUS_CMD_t PMBUS_CMD_READ_TEMPERATURE_2;
extern uint8_t	PMBUS_CMD_READ_TEMPERATURE_2_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_READ_TEMPERATURE_2_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_READ_TEMPERATURE_2_RANGE[2];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_READ_FAN_SPEED_1 (0x90)

/* instantiate the command structure for READ_FAN_SPEED_1.
 */
// instances of the struct one per command
extern PMBUS_CMD_t PMBUS_CMD_READ_FAN_SPEED_1;
extern uint8_t	PMBUS_CMD_READ_FAN_SPEED_1_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	* PMBUS_CMD_READ_FAN_SPEED_1_DATA_LOOP1;    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_READ_FAN_SPEED_1_RANGE[3];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_READ_FAN_SPEED_2 (0x91)

/* instantiate the command structure for READ_FAN_SPEED_2.
 */
// instances of the struct one per command
extern PMBUS_CMD_t PMBUS_CMD_READ_FAN_SPEED_2;
extern uint8_t	PMBUS_CMD_READ_FAN_SPEED_2_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	* PMBUS_CMD_READ_FAN_SPEED_2_DATA_LOOP1;    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_READ_FAN_SPEED_2_RANGE[3];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_READ_DUTY_CYCLE (0x94)

/* instantiate the command READ_DUTY_CYCLE.
 */
extern PMBUS_CMD_t PMBUS_CMD_READ_DUTY_CYCLE;
extern uint8_t	PMBUS_CMD_READ_DUTY_CYCLE_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_READ_DUTY_CYCLE_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_READ_DUTY_CYCLE_RANGE[2];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_READ_FREQUENCY (0x95)

/* instantiate the command READ_FREQUENCY.
 */
extern PMBUS_CMD_t PMBUS_CMD_READ_FREQUENCY;
extern uint8_t	PMBUS_CMD_READ_FREQUENCY_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_READ_FREQUENCY_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_READ_FREQUENCY_RANGE[3];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_READ_POUT (0x96)

/* instantiate the command READ_POUT.
 */
extern PMBUS_CMD_t PMBUS_CMD_READ_POUT;
extern uint8_t	PMBUS_CMD_READ_POUT_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_READ_POUT_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_READ_POUT_RANGE[8];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_READ_PIN (0x97)

/* instantiate the command READ_PIN.
 */
extern PMBUS_CMD_t PMBUS_CMD_READ_PIN;
extern uint8_t	PMBUS_CMD_READ_PIN_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_READ_PIN_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_READ_PIN_RANGE[8];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_PMBUS_REVISION (0x98)

/* instantiate the command structure for PMBUS_REVISION.
 */
// instances of the struct one per command
extern PMBUS_CMD_t PMBUS_CMD_PMBUS_REVISION;
extern uint8_t	PMBUS_CMD_PMBUS_REVISION_DATA_LOOP0[1];  	// data array for command loop0
extern uint8_t	* PMBUS_CMD_PMBUS_REVISION_DATA_LOOP1;    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_PMBUS_REVISION_RANGE[3];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_MFR_ID (0x99)

/* instantiate the command structure for MFR_ID.
 */
// instances of the struct one per command
extern PMBUS_CMD_t PMBUS_CMD_MFR_ID;
extern uint8_t	PMBUS_CMD_MFR_ID_DATA_LOOP0[12];  	// data array for command loop0
extern uint8_t	* PMBUS_CMD_MFR_ID_DATA_LOOP1;    // data array for command loop1 (pointer if common)

#define PMBUS_CMDCODE_MFR_MODEL (0x9A)

/* instantiate the command structure for MFR_MODEL.
 */
// instances of the struct one per command
extern PMBUS_CMD_t PMBUS_CMD_MFR_MODEL;
extern uint8_t	PMBUS_CMD_MFR_MODEL_DATA_LOOP0[20];  	// data array for command loop0
extern uint8_t	* PMBUS_CMD_MFR_MODEL_DATA_LOOP1;    // data array for command loop1 (pointer if common)

#define PMBUS_CMDCODE_MFR_REVISION (0x9B)

/* instantiate the command structure for MFR_REVISION.
 */
// instances of the struct one per command
extern PMBUS_CMD_t PMBUS_CMD_MFR_REVISION;
extern uint8_t	PMBUS_CMD_MFR_REVISION_DATA_LOOP0[12];  	// data array for command loop0
extern uint8_t	* PMBUS_CMD_MFR_REVISION_DATA_LOOP1;    // data array for command loop1 (pointer if common)

#define PMBUS_CMDCODE_MFR_LOCATION (0x9C)

/* instantiate the command structure for MFR_LOCATION.
 */
// instances of the struct one per command
extern PMBUS_CMD_t PMBUS_CMD_MFR_LOCATION;
extern uint8_t	PMBUS_CMD_MFR_LOCATION_DATA_LOOP0[12];  	// data array for command loop0
extern uint8_t	* PMBUS_CMD_MFR_LOCATION_DATA_LOOP1;    // data array for command loop1 (pointer if common)

#define PMBUS_CMDCODE_MFR_DATE (0x9D)

/* instantiate the command structure for MFR_DATE.
 */
// instances of the struct one per command
extern PMBUS_CMD_t PMBUS_CMD_MFR_DATE;
extern uint8_t	PMBUS_CMD_MFR_DATE_DATA_LOOP0[12];  	// data array for command loop0
extern uint8_t	* PMBUS_CMD_MFR_DATE_DATA_LOOP1;    // data array for command loop1 (pointer if common)

#define PMBUS_CMDCODE_MFR_SERIAL (0x9E)

/* instantiate the command structure for MFR_SERIAL.
 */
// instances of the struct one per command
extern PMBUS_CMD_t PMBUS_CMD_MFR_SERIAL;
extern uint8_t	PMBUS_CMD_MFR_SERIAL_DATA_LOOP0[20];  	// data array for command loop0
extern uint8_t	* PMBUS_CMD_MFR_SERIAL_DATA_LOOP1;    // data array for command loop1 (pointer if common)

#define PMBUS_CMDCODE_MFR_VIN_MIN (0xA0)

/* instantiate the command MFR_VIN_MIN.
 */
extern PMBUS_CMD_t PMBUS_CMD_MFR_VIN_MIN;
extern uint8_t	PMBUS_CMD_MFR_VIN_MIN_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_MFR_VIN_MIN_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_MFR_VIN_MIN_RANGE[2];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_MFR_VIN_MAX (0xA1)

/* instantiate the command MFR_VIN_MAX.
 */
extern PMBUS_CMD_t PMBUS_CMD_MFR_VIN_MAX;
extern uint8_t	PMBUS_CMD_MFR_VIN_MAX_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_MFR_VIN_MAX_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_MFR_VIN_MAX_RANGE[2];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_MFR_IIN_MAX (0xA2)

/* instantiate the command MFR_IIN_MAX.
 */
extern PMBUS_CMD_t PMBUS_CMD_MFR_IIN_MAX;
extern uint8_t	PMBUS_CMD_MFR_IIN_MAX_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_MFR_IIN_MAX_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_MFR_IIN_MAX_RANGE[2];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_MFR_PIN_MAX (0xA3)

/* instantiate the command MFR_PIN_MAX.
 */
extern PMBUS_CMD_t PMBUS_CMD_MFR_PIN_MAX;
extern uint8_t	PMBUS_CMD_MFR_PIN_MAX_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_MFR_PIN_MAX_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_MFR_PIN_MAX_RANGE[6];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_MFR_VOUT_MIN (0xA4)

/* instantiate the command MFR_VOUT_MIN.
 */
extern PMBUS_CMD_t PMBUS_CMD_MFR_VOUT_MIN;
extern uint8_t	PMBUS_CMD_MFR_VOUT_MIN_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_MFR_VOUT_MIN_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_MFR_VOUT_MIN_RANGE[2];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_MFR_VOUT_MAX (0xA5)

/* instantiate the command MFR_VOUT_MAX.
 */
extern PMBUS_CMD_t PMBUS_CMD_MFR_VOUT_MAX;
extern uint8_t	PMBUS_CMD_MFR_VOUT_MAX_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_MFR_VOUT_MAX_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_MFR_VOUT_MAX_RANGE[2];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_MFR_IOUT_MAX (0xA6)

/* instantiate the command MFR_IOUT_MAX.
 */
extern PMBUS_CMD_t PMBUS_CMD_MFR_IOUT_MAX;
extern uint8_t	PMBUS_CMD_MFR_IOUT_MAX_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_MFR_IOUT_MAX_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_MFR_IOUT_MAX_RANGE[2];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_MFR_POUT_MAX (0xA7)

/* instantiate the command MFR_POUT_MAX.
 */
extern PMBUS_CMD_t PMBUS_CMD_MFR_POUT_MAX;
extern uint8_t	PMBUS_CMD_MFR_POUT_MAX_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_MFR_POUT_MAX_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_MFR_POUT_MAX_RANGE[6];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_MFR_TAMBIENT_MAX (0xA8)

/* instantiate the command structure for MFR_TAMBIENT_MAX.
 */
// instances of the struct one per command
extern PMBUS_CMD_t PMBUS_CMD_MFR_TAMBIENT_MAX;
extern uint8_t	PMBUS_CMD_MFR_TAMBIENT_MAX_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	* PMBUS_CMD_MFR_TAMBIENT_MAX_DATA_LOOP1;    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_MFR_TAMBIENT_MAX_RANGE[2];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_IC_DEVICE_ID (0xAD)

/* instantiate the command structure for IC_DEVICE_ID.
 */
// instances of the struct one per command
extern PMBUS_CMD_t PMBUS_CMD_IC_DEVICE_ID;
extern uint8_t	PMBUS_CMD_IC_DEVICE_ID_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	* PMBUS_CMD_IC_DEVICE_ID_DATA_LOOP1;    // data array for command loop1 (pointer if common)

#define PMBUS_CMDCODE_IC_DEVICE_REV (0xAE)

/* instantiate the command structure for IC_DEVICE_REV.
 */
// instances of the struct one per command
extern PMBUS_CMD_t PMBUS_CMD_IC_DEVICE_REV;
extern uint8_t	PMBUS_CMD_IC_DEVICE_REV_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	* PMBUS_CMD_IC_DEVICE_REV_DATA_LOOP1;    // data array for command loop1 (pointer if common)

#define PMBUS_CMDCODE_USER_DATA_00 (0xB0)

/* instantiate the command USER_DATA_00.
 */
extern PMBUS_CMD_t PMBUS_CMD_USER_DATA_00;
extern uint8_t	PMBUS_CMD_USER_DATA_00_DATA_LOOP0[16];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_USER_DATA_00_DATA_LOOP1[16];    // data array for command loop1 (pointer if common)

#define PMBUS_CMDCODE_FW_CONFIG_PWM (0xC4)

/* instantiate the command FW_CONFIG_PWM.
 */
extern PMBUS_CMD_t PMBUS_CMD_FW_CONFIG_PWM;
extern uint8_t	PMBUS_CMD_FW_CONFIG_PWM_DATA_LOOP0[4];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_FW_CONFIG_PWM_DATA_LOOP1[4];    // data array for command loop1 (pointer if common)

#define PMBUS_CMDCODE_FW_CONFIG_REGULATION (0xC5)

/* instantiate the command FW_CONFIG_REGULATION.
 */
extern PMBUS_CMD_t PMBUS_CMD_FW_CONFIG_REGULATION;
extern uint8_t	PMBUS_CMD_FW_CONFIG_REGULATION_DATA_LOOP0[14];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_FW_CONFIG_REGULATION_DATA_LOOP1[14];    // data array for command loop1 (pointer if common)

#define PMBUS_CMDCODE_FW_CONFIG_TELEMETRY (0xC6)

/* instantiate the command FW_CONFIG_TELEMETRY.
 */
extern PMBUS_CMD_t PMBUS_CMD_FW_CONFIG_TELEMETRY;
extern uint8_t	PMBUS_CMD_FW_CONFIG_TELEMETRY_DATA_LOOP0[21];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_FW_CONFIG_TELEMETRY_DATA_LOOP1[21];    // data array for command loop1 (pointer if common)

#define PMBUS_CMDCODE_FW_CONFIG_FAULTS (0xC8)

/* instantiate the command FW_CONFIG_FAULTS.
 */
extern PMBUS_CMD_t PMBUS_CMD_FW_CONFIG_FAULTS;
extern uint8_t	PMBUS_CMD_FW_CONFIG_FAULTS_DATA_LOOP0[25];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_FW_CONFIG_FAULTS_DATA_LOOP1[25];    // data array for command loop1 (pointer if common)

#define PMBUS_CMDCODE_FW_CONFIG_PMBUS (0xC9)

/* instantiate the command FW_CONFIG_PMBUS.
 */
extern PMBUS_CMD_t PMBUS_CMD_FW_CONFIG_PMBUS;
extern uint8_t	PMBUS_CMD_FW_CONFIG_PMBUS_DATA_LOOP0[11];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_FW_CONFIG_PMBUS_DATA_LOOP1[11];    // data array for command loop1 (pointer if common)

#define PMBUS_CMDCODE_MFR_IOUT_OC_FAST_FAULT_RESPONSE (0xCA)

/* instantiate the command MFR_IOUT_OC_FAST_FAULT_RESPONSE.
 */
extern PMBUS_CMD_t PMBUS_CMD_MFR_IOUT_OC_FAST_FAULT_RESPONSE;
extern uint8_t	PMBUS_CMD_MFR_IOUT_OC_FAST_FAULT_RESPONSE_DATA_LOOP0[1];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_MFR_IOUT_OC_FAST_FAULT_RESPONSE_DATA_LOOP1[1];    // data array for command loop1 (pointer if common)

#define PMBUS_CMDCODE_FW_CONFIG_DE_THRESH (0xCB)

/* instantiate the command FW_CONFIG_DE_THRESH.
 */
extern PMBUS_CMD_t PMBUS_CMD_FW_CONFIG_DE_THRESH;
extern uint8_t	PMBUS_CMD_FW_CONFIG_DE_THRESH_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_FW_CONFIG_DE_THRESH_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_FW_CONFIG_DE_THRESH_RANGE[2];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_MFR_VRECT_SCALE (0xCD)

/* instantiate the command MFR_VRECT_SCALE.
 */
extern PMBUS_CMD_t PMBUS_CMD_MFR_VRECT_SCALE;
extern uint8_t	PMBUS_CMD_MFR_VRECT_SCALE_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_MFR_VRECT_SCALE_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_MFR_VRECT_SCALE_RANGE[2];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_MFR_TRANSFORMER_SCALE (0xCE)

/* instantiate the command MFR_TRANSFORMER_SCALE.
 */
extern PMBUS_CMD_t PMBUS_CMD_MFR_TRANSFORMER_SCALE;
extern uint8_t	PMBUS_CMD_MFR_TRANSFORMER_SCALE_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_MFR_TRANSFORMER_SCALE_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_MFR_TRANSFORMER_SCALE_RANGE[2];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_PWM_DEADTIME (0xCF)

/* instantiate the command structure for PWM_DEADTIME.
 */
// instances of the struct one per command
extern PMBUS_CMD_t PMBUS_CMD_PWM_DEADTIME;
extern uint8_t	PMBUS_CMD_PWM_DEADTIME_DATA_LOOP0[24];  	// data array for command loop0
extern uint8_t	* PMBUS_CMD_PWM_DEADTIME_DATA_LOOP1;    // data array for command loop1 (pointer if common)

#define PMBUS_CMDCODE_MFR_IOUT_OC_FAST_FAULT_LIMIT (0xD1)

/* instantiate the command MFR_IOUT_OC_FAST_FAULT_LIMIT.
 */
extern PMBUS_CMD_t PMBUS_CMD_MFR_IOUT_OC_FAST_FAULT_LIMIT;
extern uint8_t	PMBUS_CMD_MFR_IOUT_OC_FAST_FAULT_LIMIT_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_MFR_IOUT_OC_FAST_FAULT_LIMIT_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_MFR_IOUT_OC_FAST_FAULT_LIMIT_RANGE[2];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_PWM_DEADTIME_ADJUSTMENT (0xD6)

/* instantiate the command structure for PWM_DEADTIME_ADJUSTMENT.
 */
// instances of the struct one per command
extern PMBUS_CMD_t PMBUS_CMD_PWM_DEADTIME_ADJUSTMENT;
extern uint8_t	PMBUS_CMD_PWM_DEADTIME_ADJUSTMENT_DATA_LOOP0[24];  	// data array for command loop0
extern uint8_t	* PMBUS_CMD_PWM_DEADTIME_ADJUSTMENT_DATA_LOOP1;    // data array for command loop1 (pointer if common)

#define PMBUS_CMDCODE_MFR_SELECT_TEMPERATURE_SENSOR (0xDC)

/* instantiate the command MFR_SELECT_TEMPERATURE_SENSOR.
 */
extern PMBUS_CMD_t PMBUS_CMD_MFR_SELECT_TEMPERATURE_SENSOR;
extern uint8_t	PMBUS_CMD_MFR_SELECT_TEMPERATURE_SENSOR_DATA_LOOP0[1];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_MFR_SELECT_TEMPERATURE_SENSOR_DATA_LOOP1[1];    // data array for command loop1 (pointer if common)

#define PMBUS_CMDCODE_FW_CONFIG_DEADTIME_ADJUSMENT_THRESHOLD (0xE4)

/* instantiate the command FW_CONFIG_DEADTIME_ADJUSMENT_THRESHOLD.
 */
extern PMBUS_CMD_t PMBUS_CMD_FW_CONFIG_DEADTIME_ADJUSMENT_THRESHOLD;
extern uint8_t	PMBUS_CMD_FW_CONFIG_DEADTIME_ADJUSMENT_THRESHOLD_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_FW_CONFIG_DEADTIME_ADJUSMENT_THRESHOLD_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_FW_CONFIG_DEADTIME_ADJUSMENT_THRESHOLD_RANGE[2];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_MFR_IOUT_APC (0xEA)

/* instantiate the command MFR_IOUT_APC.
 */
extern PMBUS_CMD_t PMBUS_CMD_MFR_IOUT_APC;
extern uint8_t	PMBUS_CMD_MFR_IOUT_APC_DATA_LOOP0[2];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_MFR_IOUT_APC_DATA_LOOP1[2];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_MFR_IOUT_APC_RANGE[4];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_MFR_MIN_PW (0xEB)

/* instantiate the command MFR_MIN_PW.
 */
extern PMBUS_CMD_t PMBUS_CMD_MFR_MIN_PW;
extern uint8_t	PMBUS_CMD_MFR_MIN_PW_DATA_LOOP0[1];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_MFR_MIN_PW_DATA_LOOP1[1];    // data array for command loop1 (pointer if common)
extern uint8_t	PMBUS_CMD_MFR_MIN_PW_RANGE[2];  	// data array for range (common for loops)

#define PMBUS_CMDCODE_MFR_DEBUG_BUFF (0xF0)

/* instantiate the command MFR_DEBUG_BUFF.
 */
extern PMBUS_CMD_t PMBUS_CMD_MFR_DEBUG_BUFF;
extern uint8_t	PMBUS_CMD_MFR_DEBUG_BUFF_DATA_LOOP0[8];  	// data array for command loop0
extern uint8_t	PMBUS_CMD_MFR_DEBUG_BUFF_DATA_LOOP1[8];    // data array for command loop1 (pointer if common)

#define PMBUS_CMDCODE_MFR_SETUP_PASSWORD (0xF1)

/* instantiate the command structure for MFR_SETUP_PASSWORD.
 */
// instances of the struct one per command
extern PMBUS_CMD_t PMBUS_CMD_MFR_SETUP_PASSWORD;
extern uint8_t	PMBUS_CMD_MFR_SETUP_PASSWORD_DATA_LOOP0[6];  	// data array for command loop0
extern uint8_t	* PMBUS_CMD_MFR_SETUP_PASSWORD_DATA_LOOP1;    // data array for command loop1 (pointer if common)

#define PMBUS_CMDCODE_MFR_DISABLE_SECURITY_ONCE (0xF2)

/* instantiate the command structure for MFR_DISABLE_SECURITY_ONCE.
 */
// instances of the struct one per command
extern PMBUS_CMD_t PMBUS_CMD_MFR_DISABLE_SECURITY_ONCE;
extern uint8_t	PMBUS_CMD_MFR_DISABLE_SECURITY_ONCE_DATA_LOOP0[6];  	// data array for command loop0
extern uint8_t	* PMBUS_CMD_MFR_DISABLE_SECURITY_ONCE_DATA_LOOP1;    // data array for command loop1 (pointer if common)

#define PMBUS_CMDCODE_MFR_SECURITY_BIT_MASK_LOW (0xF4)

/* instantiate the command structure for MFR_SECURITY_BIT_MASK_LOW.
 */
// instances of the struct one per command
extern PMBUS_CMD_t PMBUS_CMD_MFR_SECURITY_BIT_MASK_LOW;
extern uint8_t	PMBUS_CMD_MFR_SECURITY_BIT_MASK_LOW_DATA_LOOP0[16];  	// data array for command loop0
extern uint8_t	* PMBUS_CMD_MFR_SECURITY_BIT_MASK_LOW_DATA_LOOP1;    // data array for command loop1 (pointer if common)

#define PMBUS_CMDCODE_MFR_SECURITY_BIT_MASK_HIGH (0xF5)

/* instantiate the command structure for MFR_SECURITY_BIT_MASK_HIGH.
 */
// instances of the struct one per command
extern PMBUS_CMD_t PMBUS_CMD_MFR_SECURITY_BIT_MASK_HIGH;
extern uint8_t	PMBUS_CMD_MFR_SECURITY_BIT_MASK_HIGH_DATA_LOOP0[16];  	// data array for command loop0
extern uint8_t	* PMBUS_CMD_MFR_SECURITY_BIT_MASK_HIGH_DATA_LOOP1;    // data array for command loop1 (pointer if common)

#define PMBUS_CMDCODE_MFR_FIRMWARE_COMMAND (0xFE)

/* instantiate the command structure for MFR_FIRMWARE_COMMAND.
 */
// instances of the struct one per command
extern PMBUS_CMD_t PMBUS_CMD_MFR_FIRMWARE_COMMAND;
extern uint8_t	PMBUS_CMD_MFR_FIRMWARE_COMMAND_DATA_LOOP0[1];  	// data array for command loop0
extern uint8_t	* PMBUS_CMD_MFR_FIRMWARE_COMMAND_DATA_LOOP1;    // data array for command loop1 (pointer if common)


void pmbus_autogen_init(void);
void PMBUS_CMD_HANDLER(PMBUS_PAGE_t page, uint8_t command, PMBUS_DIRECTION_e direction);

// external handle functions
extern void PMBUS_HANDLE_OPERATION(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_CLEAR_FAULTS(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_WRITE_PROTECT(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_STORE_DEFAULT_ALL(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_RESTORE_DEFAULT_ALL(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_STORE_USER_ALL(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_RESTORE_USER_ALL(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_STORE_USER_CODE(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_RESTORE_USER_CODE(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_SMBALERT_MASK(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_VOUT_COMMAND(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_VOUT_MAX(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_VOUT_DROOP(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_VOUT_SCALE_LOOP(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_VOUT_MIN(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_MAX_DUTY(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_FREQUENCY_SWITCH(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_VIN_ON(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_INTERLEAVE(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_IOUT_CAL_OFFSET(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_VOUT_OV_FAULT_LIMIT(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_VOUT_OV_WARN_LIMIT(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_VOUT_UV_WARN_LIMIT(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_VOUT_UV_FAULT_LIMIT(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_IOUT_OC_FAULT_LIMIT(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_IOUT_OC_FAULT_RESPONSE(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_IOUT_OC_LV_FAULT_LIMIT(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_IOUT_OC_WARN_LIMIT(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_IOUT_UC_FAULT_LIMIT(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_OT_FAULT_LIMIT(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_OT_WARN_LIMIT(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_UT_WARN_LIMIT(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_UT_FAULT_LIMIT(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_VIN_OV_FAULT_LIMIT(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_VIN_OV_WARN_LIMIT(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_VIN_UV_WARN_LIMIT(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_VIN_UV_FAULT_LIMIT(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_IIN_OC_FAULT_LIMIT(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_IIN_OC_WARN_LIMIT(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_POWER_GOOD_ON(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_TON_MAX_FAULT_LIMIT(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_TOFF_MAX_WARN_LIMIT(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_POUT_OP_WARN_LIMIT(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_PIN_OP_WARN_LIMIT(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_STATUS_WORD(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_STATUS_VOUT(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_STATUS_IOUT(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_STATUS_INPUT(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_STATUS_TEMPERATURE(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_STATUS_CML(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_STATUS_OTHER(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_STATUS_MFR_SPECIFIC(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_STATUS_FANS_1_2(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_IC_DEVICE_ID(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_IC_DEVICE_REV(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_FW_CONFIG_REGULATION(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_FW_CONFIG_FAULTS(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_FW_CONFIG_PMBUS(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_MFR_IOUT_OC_FAST_FAULT_RESPONSE(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_FW_CONFIG_DE_THRESH(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_PWM_DEADTIME(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_MFR_IOUT_OC_FAST_FAULT_LIMIT(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_PWM_DEADTIME_ADJUSTMENT(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_MFR_SELECT_TEMPERATURE_SENSOR(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_MFR_IOUT_APC(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_MFR_MIN_PW(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_MFR_DEBUG_BUFF(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_MFR_SETUP_PASSWORD(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_MFR_DISABLE_SECURITY_ONCE(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_MFR_SECURITY_BIT_MASK_LOW(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_MFR_SECURITY_BIT_MASK_HIGH(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);
extern void PMBUS_HANDLE_MFR_FIRMWARE_COMMAND(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction);

#endif   //#endif /* _PMBUS_AUTOGEN_H_ */


